export const metaii_codes = [
    {
        "filename": "c00a__demo__compiled_assignments_c[i01a_c01bjs]_.txt",
        "contents": "\taddress fern\r\n\tliteral 5\r\n\tliteral 6\r\n\tadd\r\n\tstore\r\n\taddress ace\r\n\tload fern\r\n\tliteral 5\r\n\tmpy\r\n\tstore\r\n\taddress waldo\r\n\tload fern\r\n\tload alpha\r\n\tload beta\r\n\tminus\r\n\tload gamma\r\n\texp\r\n\tdiv\r\n\tadd\r\n\tstore\r\n\taddress fern\r\n\tliteral 5\r\n\tliteral 6\r\n\tle\r\n\tstore\r\n\taddress ace\r\n\tload fern\r\n\tliteral 5\r\n\tmpy\r\n\tload bob\r\n\tge\r\n\tstore\r\n\taddress waldo\r\n\tload fern\r\n\tload alpha\r\n\tshl\r\n\tload beta\r\n\tload gamma\r\n\tshr\r\n\tle\r\n\tstore\r\n"
    },
    {
        "filename": "c00__demo__compiled_assignments_c[i01_c01]_.txt",
        "contents": "\taddress fern\r\n\tliteral 5\r\n\tliteral 6\r\n\tadd\r\n\tstore\r\n\taddress ace\r\n\tload fern\r\n\tliteral 5\r\n\tmpy\r\n\tstore\r\n\taddress waldo\r\n\tload fern\r\n\tload alpha\r\n\tload beta\r\n\tminus\r\n\tload gamma\r\n\texp\r\n\tdiv\r\n\tadd\r\n\tstore\r\n"
    },
    {
        "filename": "c01ajs__demo__AEXP_compile_assignments_c[i02a_c12js].txt",
        "contents": "// AEXP compiler\r\ncompiler = {\r\n\r\n  compile: function (input) {\r\n    // initialize compiler variables\r\n    this.inbuf = input ;\r\n    this.initialize() ;\r\n    // call the first rule\r\n    this.ctxpush('AEXP') ;\r\n    this.ruleAEXP() ;\r\n    this.ctxpop() ;\r\n    // special case handling of first rule failure\r\n    if ((!this.eflag) && (!this.pflag)) {\r\n      this.eflag = true ;\r\n      this.erule = 'AEXP' ;\r\n      this.einput = this.inp ; } ;\r\n    return this.eflag ;\r\n  },\r\n\r\n  ruleAEXP: function () {\r\n    this.ctxpush('AS') ;\r\n    this.ruleAS() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.ctxpush('AS') ;\r\n        this.ruleAS() ;\r\n        this.ctxpop() ;\r\n        if (this.eflag) return ;\r\n      } ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) this.err();\r\n    } ;\r\n  } ,\r\n\r\n  ruleAS: function () {\r\n    this.ctxpush('ID') ;\r\n    this.ruleID() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.out('\\t') ;\r\n      this.out('address ') ;\r\n      this.out(this.token) ;\r\n      this.eol() ;\r\n      this.test(':=');\r\n      if (!this.pflag) this.err();\r\n      this.ctxpush('RX1') ;\r\n      this.ruleRX1() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (!this.pflag) this.err();\r\n      this.out('\\t') ;\r\n      this.out('store') ;\r\n      this.eol() ;\r\n      this.test(';');\r\n      if (!this.pflag) this.err();\r\n    } ;\r\n  } ,\r\n\r\n  ruleRX1: function () {\r\n    this.ctxpush('RX2') ;\r\n    this.ruleRX2() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.test('=');\r\n      if (this.pflag) {\r\n        this.ctxpush('RX2') ;\r\n        this.ruleRX2() ;\r\n        this.ctxpop() ;\r\n        if (this.eflag) return ;\r\n        if (!this.pflag) this.err();\r\n        this.out('\\t') ;\r\n        this.out('eq') ;\r\n        this.eol() ;\r\n      } ;\r\n      if (!this.pflag) {\r\n        this.test('<');\r\n        if (this.pflag) {\r\n          this.ctxpush('RX2') ;\r\n          this.ruleRX2() ;\r\n          this.ctxpop() ;\r\n          if (this.eflag) return ;\r\n          if (!this.pflag) this.err();\r\n          this.out('\\t') ;\r\n          this.out('lt') ;\r\n          this.eol() ;\r\n        } ;\r\n      } ;\r\n      if (!this.pflag) {\r\n        this.test('>');\r\n        if (this.pflag) {\r\n          this.ctxpush('RX2') ;\r\n          this.ruleRX2() ;\r\n          this.ctxpop() ;\r\n          if (this.eflag) return ;\r\n          if (!this.pflag) this.err();\r\n          this.out('\\t') ;\r\n          this.out('gt') ;\r\n          this.eol() ;\r\n        } ;\r\n      } ;\r\n      if (!this.pflag) {\r\n        this.test('<=');\r\n        if (this.pflag) {\r\n          this.ctxpush('RX2') ;\r\n          this.ruleRX2() ;\r\n          this.ctxpop() ;\r\n          if (this.eflag) return ;\r\n          if (!this.pflag) this.err();\r\n          this.out('\\t') ;\r\n          this.out('le') ;\r\n          this.eol() ;\r\n        } ;\r\n      } ;\r\n      if (!this.pflag) {\r\n        this.test('>=');\r\n        if (this.pflag) {\r\n          this.ctxpush('RX2') ;\r\n          this.ruleRX2() ;\r\n          this.ctxpop() ;\r\n          if (this.eflag) return ;\r\n          if (!this.pflag) this.err();\r\n          this.out('\\t') ;\r\n          this.out('ge') ;\r\n          this.eol() ;\r\n        } ;\r\n      } ;\r\n      if (!this.pflag) {\r\n        this.pflag = true ;\r\n        if (this.pflag) {\r\n        } ;\r\n      } ;\r\n      if (!this.pflag) this.err();\r\n    } ;\r\n  } ,\r\n\r\n  ruleRX2: function () {\r\n    this.test('~');\r\n    if (this.pflag) {\r\n      this.ctxpush('EX0') ;\r\n      this.ruleEX0() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (!this.pflag) this.err();\r\n      this.out('\\t') ;\r\n      this.out('not') ;\r\n      this.eol() ;\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.ctxpush('EX0') ;\r\n      this.ruleEX0() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (this.pflag) {\r\n      } ;\r\n    } ;\r\n  } ,\r\n\r\n  ruleEX0: function () {\r\n    this.ctxpush('EX1') ;\r\n    this.ruleEX1() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.test('<-');\r\n      if (this.pflag) {\r\n        this.ctxpush('EX1') ;\r\n        this.ruleEX1() ;\r\n        this.ctxpop() ;\r\n        if (this.eflag) return ;\r\n        if (!this.pflag) this.err();\r\n        this.out('\\t') ;\r\n        this.out('shl') ;\r\n        this.eol() ;\r\n      } ;\r\n      if (!this.pflag) {\r\n        this.test('->');\r\n        if (this.pflag) {\r\n          this.ctxpush('EX2') ;\r\n          this.ruleEX2() ;\r\n          this.ctxpop() ;\r\n          if (this.eflag) return ;\r\n          if (!this.pflag) this.err();\r\n          this.out('\\t') ;\r\n          this.out('shr') ;\r\n          this.eol() ;\r\n        } ;\r\n      } ;\r\n      if (!this.pflag) {\r\n        this.pflag = true ;\r\n        if (this.pflag) {\r\n        } ;\r\n      } ;\r\n      if (!this.pflag) this.err();\r\n    } ;\r\n  } ,\r\n\r\n  ruleEX1: function () {\r\n    this.ctxpush('EX2') ;\r\n    this.ruleEX2() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.test('+');\r\n        if (this.pflag) {\r\n          this.ctxpush('EX2') ;\r\n          this.ruleEX2() ;\r\n          this.ctxpop() ;\r\n          if (this.eflag) return ;\r\n          if (!this.pflag) this.err();\r\n          this.out('\\t') ;\r\n          this.out('add') ;\r\n          this.eol() ;\r\n        } ;\r\n        if (!this.pflag) {\r\n          this.test('-');\r\n          if (this.pflag) {\r\n            this.ctxpush('EX2') ;\r\n            this.ruleEX2() ;\r\n            this.ctxpop() ;\r\n            if (this.eflag) return ;\r\n            if (!this.pflag) this.err();\r\n            this.out('\\t') ;\r\n            this.out('sub') ;\r\n            this.eol() ;\r\n          } ;\r\n        } ;\r\n      } ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) this.err();\r\n    } ;\r\n  } ,\r\n\r\n  ruleEX2: function () {\r\n    this.ctxpush('EX3') ;\r\n    this.ruleEX3() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.test('*');\r\n        if (this.pflag) {\r\n          this.ctxpush('EX3') ;\r\n          this.ruleEX3() ;\r\n          this.ctxpop() ;\r\n          if (this.eflag) return ;\r\n          if (!this.pflag) this.err();\r\n          this.out('\\t') ;\r\n          this.out('mpy') ;\r\n          this.eol() ;\r\n        } ;\r\n        if (!this.pflag) {\r\n          this.test('/');\r\n          if (this.pflag) {\r\n            this.ctxpush('EX3') ;\r\n            this.ruleEX3() ;\r\n            this.ctxpop() ;\r\n            if (this.eflag) return ;\r\n            if (!this.pflag) this.err();\r\n            this.out('\\t') ;\r\n            this.out('div') ;\r\n            this.eol() ;\r\n          } ;\r\n        } ;\r\n      } ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) this.err();\r\n    } ;\r\n  } ,\r\n\r\n  ruleEX3: function () {\r\n    this.ctxpush('EX4') ;\r\n    this.ruleEX4() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.test('^');\r\n        if (this.pflag) {\r\n          this.ctxpush('EX3') ;\r\n          this.ruleEX3() ;\r\n          this.ctxpop() ;\r\n          if (this.eflag) return ;\r\n          if (!this.pflag) this.err();\r\n          this.out('\\t') ;\r\n          this.out('exp') ;\r\n          this.eol() ;\r\n        } ;\r\n      } ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) this.err();\r\n    } ;\r\n  } ,\r\n\r\n  ruleEX4: function () {\r\n    this.test('+');\r\n    if (this.pflag) {\r\n      this.ctxpush('EX5') ;\r\n      this.ruleEX5() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (!this.pflag) this.err();\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.test('-');\r\n      if (this.pflag) {\r\n        this.ctxpush('EX5') ;\r\n        this.ruleEX5() ;\r\n        this.ctxpop() ;\r\n        if (this.eflag) return ;\r\n        if (!this.pflag) this.err();\r\n        this.out('\\t') ;\r\n        this.out('minus') ;\r\n        this.eol() ;\r\n      } ;\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.ctxpush('EX5') ;\r\n      this.ruleEX5() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (this.pflag) {\r\n      } ;\r\n    } ;\r\n  } ,\r\n\r\n  ruleEX5: function () {\r\n    this.ctxpush('ID') ;\r\n    this.ruleID() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.out('\\t') ;\r\n      this.out('load ') ;\r\n      this.out(this.token) ;\r\n      this.eol() ;\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.ctxpush('NUMBER') ;\r\n      this.ruleNUMBER() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (this.pflag) {\r\n        this.out('\\t') ;\r\n        this.out('literal ') ;\r\n        this.out(this.token) ;\r\n        this.eol() ;\r\n      } ;\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.test('(');\r\n      if (this.pflag) {\r\n        this.ctxpush('EX1') ;\r\n        this.ruleEX1() ;\r\n        this.ctxpop() ;\r\n        if (this.eflag) return ;\r\n        if (!this.pflag) this.err();\r\n        this.test(')');\r\n        if (!this.pflag) this.err();\r\n      } ;\r\n    } ;\r\n  } ,\r\n\r\n  rulePREFIX: function () {\r\n    this.pflag = true ;\r\n    while (this.pflag) {\r\n      this.pflag = \r\n        (this.inbuf.charCodeAt(this.inp) == 32)  ||\r\n        (this.inbuf.charCodeAt(this.inp) == 9)  ||\r\n        (this.inbuf.charCodeAt(this.inp) == 13)  ||\r\n        (this.inbuf.charCodeAt(this.inp) == 10)  ;\r\n      if (this.pflag) {\r\n        if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n        this.inp++ } ;\r\n    };\r\n    this.pflag = true ;\r\n    if (this.pflag) {\r\n    } ;\r\n  } ,\r\n\r\n  ruleID: function () {\r\n    this.ctxpush('PREFIX') ;\r\n    this.rulePREFIX() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.tflag = true ; \r\n      this.token = '' ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.pflag = \r\n        ((this.inbuf.charCodeAt(this.inp) >= 65) &&\r\n         (this.inbuf.charCodeAt(this.inp) <= 90)  ) ||\r\n        ((this.inbuf.charCodeAt(this.inp) >= 97) &&\r\n         (this.inbuf.charCodeAt(this.inp) <= 122)  ) ;\r\n      if (this.pflag) {\r\n        if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n        this.inp++ } ;\r\n      if (!this.pflag) return;\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.pflag = \r\n          ((this.inbuf.charCodeAt(this.inp) >= 65) &&\r\n           (this.inbuf.charCodeAt(this.inp) <= 90)  ) ||\r\n          ((this.inbuf.charCodeAt(this.inp) >= 97) &&\r\n           (this.inbuf.charCodeAt(this.inp) <= 122)  ) ;\r\n        if (this.pflag) {\r\n          if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n          this.inp++ } ;\r\n        if (this.pflag) {\r\n        } ;\r\n        if (!this.pflag) {\r\n          this.pflag = \r\n            ((this.inbuf.charCodeAt(this.inp) >= 48) &&\r\n             (this.inbuf.charCodeAt(this.inp) <= 57)  ) ;\r\n          if (this.pflag) {\r\n            if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n            this.inp++ } ;\r\n          if (this.pflag) {\r\n          } ;\r\n        } ;\r\n      };\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.tflag = false ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n    } ;\r\n  } ,\r\n\r\n  ruleNUMBER: function () {\r\n    this.ctxpush('PREFIX') ;\r\n    this.rulePREFIX() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.tflag = true ; \r\n      this.token = '' ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.pflag = \r\n        ((this.inbuf.charCodeAt(this.inp) >= 48) &&\r\n         (this.inbuf.charCodeAt(this.inp) <= 57)  ) ;\r\n      if (this.pflag) {\r\n        if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n        this.inp++ } ;\r\n      if (!this.pflag) return;\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.pflag = \r\n          ((this.inbuf.charCodeAt(this.inp) >= 48) &&\r\n           (this.inbuf.charCodeAt(this.inp) <= 57)  ) ;\r\n        if (this.pflag) {\r\n          if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n          this.inp++ } ;\r\n      };\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.tflag = false ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n    } ;\r\n  } ,\r\n\r\n  // runtime variables\r\n  pflag: false ,\r\n  tflag: false ,\r\n  eflag: false ,\r\n  inp: 0 ,\r\n  inbuf:  '' ,\r\n  outbuf:  '' ,\r\n  erule:  '' ,\r\n  einput: 0 ,\r\n  token: '' ,\r\n  labelcount: 0 ,\r\n  stackframesize: 3 ,\r\n  stackframe: 0 ,\r\n  stos: -1 ,\r\n  stack: [] ,\r\n\r\n  initialize: function () {\r\n    // initialize for another compile\r\n    this.pflag = false ;\r\n    this.tflag = false ;\r\n    this.eflag = false ;\r\n    this.inp = 0 ;\r\n    this.outbuf = '' ;\r\n    this.erule = '' ;\r\n    this.einput = 0 ;\r\n    this.token = '' ;\r\n    this.labelcount = 1 ;\r\n    this.stackframe = -1 ;\r\n    this.stos = -1 ;\r\n    this.stack = [] ;\r\n  },\r\n\r\n  ctxpush: function (rulename){\r\n    // push and initialize a new stackframe\r\n    var LM ;\r\n    // new context inherits current context left margin\r\n    LM = 0; if (this.stackframe >= 0) LM = this.stack[this.stackframe + 2] ;\r\n    this.stos++ ;\r\n    this.stackframe = this.stos * this.stackframesize ;\r\n    // stackframe definition\r\n    this.stack[this.stackframe + 0] = 0 ;        // generated label\r\n    this.stack[this.stackframe + 1] = rulename ; // called rule name\r\n    this.stack[this.stackframe + 2] = LM ;       // left margin\r\n  },\r\n\r\n  ctxpop: function (){\r\n    // pop and possibly deallocate old stackframe\r\n    this.stos-- ; // pop stackframe\r\n    this.stackframe = this.stos * this.stackframesize ;\r\n  },\r\n\r\n  out: function (s){\r\n    // output string\r\n    var i ;\r\n    // if newline last output, add left margin before string\r\n    if (this.outbuf.charAt(this.outbuf.length - 1) == '\\n') {\r\n      i = this.stack[this.stackframe + 2] ;\r\n      while (i>0) { this.outbuf += ' ' ; i-- } ; } ;\r\n    this.outbuf += s ;\r\n  },\r\n\r\n  eol: function (){\r\n    // output end of line\r\n    this.outbuf += '\\n' ;\r\n  },\r\n\r\n  test: function (s) {\r\n    // test for a string in the input\r\n    var i ;\r\n    // delete whitespace\r\n    while ((this.inbuf.charAt(this.inp) == ' ')  ||\r\n           (this.inbuf.charAt(this.inp) == '\\n') ||\r\n           (this.inbuf.charAt(this.inp) == '\\r') ||\r\n           (this.inbuf.charAt(this.inp) == '\\t') ) this.inp++ ;\r\n    // test string case insensitive\r\n    this.pflag = true ; i = 0 ;\r\n    while (this.pflag && (i < s.length) && ((this.inp+i) < this.inbuf.length) )\r\n    { this.pflag = (s.charAt(i).toUpperCase() ==\r\n                    this.inbuf.charAt(this.inp+i).toUpperCase()) ;\r\n      i++ ; } ;\r\n    this.pflag = this.pflag && (i == s.length) ;\r\n    // advance input if found\r\n    if (this.pflag) this.inp = this.inp + s.length ;\r\n  },\r\n\r\n  err: function () {\r\n    // compilation error, provide error indication and context\r\n    this.eflag = true ;\r\n    this.erule = this.stack[this.stackframe + 1] ;\r\n    this.einput = this.inp ;\r\n  }\r\n\r\n}\r\n"
    },
    {
        "filename": "c01bjs__demo__AEXP2_assignments_compiler_c[i02b_c13js].txt",
        "contents": "// AEXP2 compiler\r\ncompiler = {\r\n\r\n  compile: function (input) {\r\n    // initialize compiler variables\r\n    this.inbuf = input ;\r\n    this.initialize() ;\r\n    // call the first rule\r\n    this.ctxpush('AEXP2') ;\r\n    this.ruleAEXP2() ;\r\n    this.ctxpop() ;\r\n    // special case handling of first rule failure\r\n    if ((!this.eflag) && (!this.pflag)) {\r\n      this.eflag = true ;\r\n      this.erule = 'AEXP2' ;\r\n      this.einput = this.inp ; } ;\r\n    return this.eflag ;\r\n  },\r\n\r\n  ruleAEXP2: function () {\r\n    this.ctxpush('AS') ;\r\n    this.ruleAS() ;\r\n    this.ctxpop() ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.pflag = true ;\r\n        while (this.pflag & !this.eflag) {\r\n          this.ctxpush('AS') ;\r\n          this.ruleAS() ;\r\n          this.ctxpop() ;\r\n        } ;\r\n        this.pflag = !this.eflag ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  ruleAS: function () {\r\n    this.ctxpush('ID') ;\r\n    this.ruleID() ;\r\n    this.ctxpop() ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.out('\\t') ;\r\n        this.out('address ') ;\r\n        this.out(this.token) ;\r\n        this.eol() ;\r\n        this.test(':=');\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.ctxpush('RX1') ;\r\n        this.ruleRX1() ;\r\n        this.ctxpop() ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.out('\\t') ;\r\n        this.out('store') ;\r\n        this.eol() ;\r\n        this.test(';');\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  ruleRX1: function () {\r\n    this.ctxpush('RX2') ;\r\n    this.ruleRX2() ;\r\n    this.ctxpop() ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.bkset() ;\r\n        this.test('=');\r\n        if (this.pflag) {\r\n          while (!this.eflag) {\r\n            this.ctxpush('RX2') ;\r\n            this.ruleRX2() ;\r\n            this.ctxpop() ;\r\n            if (!this.pflag) this.bkerr();\r\n            if (this.eflag) break ;\r\n            this.out('\\t') ;\r\n            this.out('eq') ;\r\n            this.eol() ;\r\n            break }\r\n        } ;\r\n        if (!this.pflag) {\r\n          if (this.eflag) this.bkrestore() ;\r\n          this.test('<');\r\n          if (this.pflag) {\r\n            while (!this.eflag) {\r\n              this.ctxpush('RX2') ;\r\n              this.ruleRX2() ;\r\n              this.ctxpop() ;\r\n              if (!this.pflag) this.bkerr();\r\n              if (this.eflag) break ;\r\n              this.out('\\t') ;\r\n              this.out('lt') ;\r\n              this.eol() ;\r\n              break }\r\n          } ;\r\n        } ;\r\n        if (!this.pflag) {\r\n          if (this.eflag) this.bkrestore() ;\r\n          this.test('>');\r\n          if (this.pflag) {\r\n            while (!this.eflag) {\r\n              this.ctxpush('RX2') ;\r\n              this.ruleRX2() ;\r\n              this.ctxpop() ;\r\n              if (!this.pflag) this.bkerr();\r\n              if (this.eflag) break ;\r\n              this.out('\\t') ;\r\n              this.out('gt') ;\r\n              this.eol() ;\r\n              break }\r\n          } ;\r\n        } ;\r\n        if (!this.pflag) {\r\n          if (this.eflag) this.bkrestore() ;\r\n          this.test('<=');\r\n          if (this.pflag) {\r\n            while (!this.eflag) {\r\n              this.ctxpush('RX2') ;\r\n              this.ruleRX2() ;\r\n              this.ctxpop() ;\r\n              if (!this.pflag) this.bkerr();\r\n              if (this.eflag) break ;\r\n              this.out('\\t') ;\r\n              this.out('le') ;\r\n              this.eol() ;\r\n              break }\r\n          } ;\r\n        } ;\r\n        if (!this.pflag) {\r\n          if (this.eflag) this.bkrestore() ;\r\n          this.test('>=');\r\n          if (this.pflag) {\r\n            while (!this.eflag) {\r\n              this.ctxpush('RX2') ;\r\n              this.ruleRX2() ;\r\n              this.ctxpop() ;\r\n              if (!this.pflag) this.bkerr();\r\n              if (this.eflag) break ;\r\n              this.out('\\t') ;\r\n              this.out('ge') ;\r\n              this.eol() ;\r\n              break }\r\n          } ;\r\n        } ;\r\n        if (!this.pflag) {\r\n          if (this.eflag) this.bkrestore() ;\r\n          this.pflag = true ;\r\n          if (this.pflag) {\r\n            while (!this.eflag) {\r\n              break }\r\n          } ;\r\n        } ;\r\n        if (this.eflag) this.bkrestore() ;\r\n        this.bkclear() ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  ruleRX2: function () {\r\n    this.test('~');\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.ctxpush('EX0') ;\r\n        this.ruleEX0() ;\r\n        this.ctxpop() ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.out('\\t') ;\r\n        this.out('not') ;\r\n        this.eol() ;\r\n        break }\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.ctxpush('EX0') ;\r\n      this.ruleEX0() ;\r\n      this.ctxpop() ;\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          break }\r\n      } ;\r\n    } ;\r\n  } ,\r\n\r\n  ruleEX0: function () {\r\n    this.ctxpush('EX1') ;\r\n    this.ruleEX1() ;\r\n    this.ctxpop() ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.test('<-');\r\n        if (this.pflag) {\r\n          while (!this.eflag) {\r\n            this.ctxpush('EX1') ;\r\n            this.ruleEX1() ;\r\n            this.ctxpop() ;\r\n            if (!this.pflag) this.bkerr();\r\n            if (this.eflag) break ;\r\n            this.out('\\t') ;\r\n            this.out('shl') ;\r\n            this.eol() ;\r\n            break }\r\n        } ;\r\n        if ((!this.pflag) && (!this.eflag)) {\r\n          this.test('->');\r\n          if (this.pflag) {\r\n            while (!this.eflag) {\r\n              this.ctxpush('EX2') ;\r\n              this.ruleEX2() ;\r\n              this.ctxpop() ;\r\n              if (!this.pflag) this.bkerr();\r\n              if (this.eflag) break ;\r\n              this.out('\\t') ;\r\n              this.out('shr') ;\r\n              this.eol() ;\r\n              break }\r\n          } ;\r\n        } ;\r\n        if ((!this.pflag) && (!this.eflag)) {\r\n          this.pflag = true ;\r\n          if (this.pflag) {\r\n            while (!this.eflag) {\r\n              break }\r\n          } ;\r\n        } ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  ruleEX1: function () {\r\n    this.ctxpush('EX2') ;\r\n    this.ruleEX2() ;\r\n    this.ctxpop() ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.pflag = true ;\r\n        while (this.pflag & !this.eflag) {\r\n          this.bkset() ;\r\n          this.test('+');\r\n          if (this.pflag) {\r\n            while (!this.eflag) {\r\n              this.ctxpush('EX2') ;\r\n              this.ruleEX2() ;\r\n              this.ctxpop() ;\r\n              if (!this.pflag) this.bkerr();\r\n              if (this.eflag) break ;\r\n              this.out('\\t') ;\r\n              this.out('add') ;\r\n              this.eol() ;\r\n              break }\r\n          } ;\r\n          if (!this.pflag) {\r\n            if (this.eflag) this.bkrestore() ;\r\n            this.test('-');\r\n            if (this.pflag) {\r\n              while (!this.eflag) {\r\n                this.ctxpush('EX2') ;\r\n                this.ruleEX2() ;\r\n                this.ctxpop() ;\r\n                if (!this.pflag) this.bkerr();\r\n                if (this.eflag) break ;\r\n                this.out('\\t') ;\r\n                this.out('sub') ;\r\n                this.eol() ;\r\n                break }\r\n            } ;\r\n          } ;\r\n          if (this.eflag) this.bkrestore() ;\r\n          this.bkclear() ;\r\n        } ;\r\n        this.pflag = !this.eflag ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  ruleEX2: function () {\r\n    this.ctxpush('EX3') ;\r\n    this.ruleEX3() ;\r\n    this.ctxpop() ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.pflag = true ;\r\n        while (this.pflag & !this.eflag) {\r\n          this.test('*');\r\n          if (this.pflag) {\r\n            while (!this.eflag) {\r\n              this.ctxpush('EX3') ;\r\n              this.ruleEX3() ;\r\n              this.ctxpop() ;\r\n              if (!this.pflag) this.bkerr();\r\n              if (this.eflag) break ;\r\n              this.out('\\t') ;\r\n              this.out('mpy') ;\r\n              this.eol() ;\r\n              break }\r\n          } ;\r\n          if ((!this.pflag) && (!this.eflag)) {\r\n            this.test('/');\r\n            if (this.pflag) {\r\n              while (!this.eflag) {\r\n                this.ctxpush('EX3') ;\r\n                this.ruleEX3() ;\r\n                this.ctxpop() ;\r\n                if (!this.pflag) this.bkerr();\r\n                if (this.eflag) break ;\r\n                this.out('\\t') ;\r\n                this.out('div') ;\r\n                this.eol() ;\r\n                break }\r\n            } ;\r\n          } ;\r\n        } ;\r\n        this.pflag = !this.eflag ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  ruleEX3: function () {\r\n    this.ctxpush('EX4') ;\r\n    this.ruleEX4() ;\r\n    this.ctxpop() ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.pflag = true ;\r\n        while (this.pflag & !this.eflag) {\r\n          this.test('^');\r\n          if (this.pflag) {\r\n            while (!this.eflag) {\r\n              this.ctxpush('EX3') ;\r\n              this.ruleEX3() ;\r\n              this.ctxpop() ;\r\n              if (!this.pflag) this.bkerr();\r\n              if (this.eflag) break ;\r\n              this.out('\\t') ;\r\n              this.out('exp') ;\r\n              this.eol() ;\r\n              break }\r\n          } ;\r\n        } ;\r\n        this.pflag = !this.eflag ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  ruleEX4: function () {\r\n    this.test('+');\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.ctxpush('EX5') ;\r\n        this.ruleEX5() ;\r\n        this.ctxpop() ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        break }\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('-');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.ctxpush('EX5') ;\r\n          this.ruleEX5() ;\r\n          this.ctxpop() ;\r\n          if (!this.pflag) this.bkerr();\r\n          if (this.eflag) break ;\r\n          this.out('\\t') ;\r\n          this.out('minus') ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.ctxpush('EX5') ;\r\n      this.ruleEX5() ;\r\n      this.ctxpop() ;\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          break }\r\n      } ;\r\n    } ;\r\n  } ,\r\n\r\n  ruleEX5: function () {\r\n    this.ctxpush('ID') ;\r\n    this.ruleID() ;\r\n    this.ctxpop() ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.out('\\t') ;\r\n        this.out('load ') ;\r\n        this.out(this.token) ;\r\n        this.eol() ;\r\n        break }\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.ctxpush('NUMBER') ;\r\n      this.ruleNUMBER() ;\r\n      this.ctxpop() ;\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('\\t') ;\r\n          this.out('literal ') ;\r\n          this.out(this.token) ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('(');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.ctxpush('EX0') ;\r\n          this.ruleEX0() ;\r\n          this.ctxpop() ;\r\n          if (!this.pflag) this.bkerr();\r\n          if (this.eflag) break ;\r\n          this.test(')');\r\n          if (!this.pflag) this.bkerr();\r\n          if (this.eflag) break ;\r\n          break }\r\n      } ;\r\n    } ;\r\n  } ,\r\n\r\n  rulePREFIX: function () {\r\n    this.pflag = true ;\r\n    while (this.pflag) {\r\n      this.pflag = \r\n        (this.inbuf.charCodeAt(this.inp) == 32)  ||\r\n        (this.inbuf.charCodeAt(this.inp) == 9)  ||\r\n        (this.inbuf.charCodeAt(this.inp) == 13)  ||\r\n        (this.inbuf.charCodeAt(this.inp) == 10)  ;\r\n      if (this.pflag) {\r\n        if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n        this.inp++ } ;\r\n    };\r\n    this.pflag = true ;\r\n    if (this.pflag) {\r\n    } ;\r\n  } ,\r\n\r\n  ruleID: function () {\r\n    this.ctxpush('PREFIX') ;\r\n    this.rulePREFIX() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.tflag = true ; \r\n      this.token = '' ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.pflag = \r\n        ((this.inbuf.charCodeAt(this.inp) >= 65) &&\r\n         (this.inbuf.charCodeAt(this.inp) <= 90)  ) ||\r\n        ((this.inbuf.charCodeAt(this.inp) >= 97) &&\r\n         (this.inbuf.charCodeAt(this.inp) <= 122)  ) ;\r\n      if (this.pflag) {\r\n        if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n        this.inp++ } ;\r\n      if (!this.pflag) return;\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.pflag = \r\n          ((this.inbuf.charCodeAt(this.inp) >= 65) &&\r\n           (this.inbuf.charCodeAt(this.inp) <= 90)  ) ||\r\n          ((this.inbuf.charCodeAt(this.inp) >= 97) &&\r\n           (this.inbuf.charCodeAt(this.inp) <= 122)  ) ;\r\n        if (this.pflag) {\r\n          if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n          this.inp++ } ;\r\n        if (this.pflag) {\r\n        } ;\r\n        if (!this.pflag) {\r\n          this.pflag = \r\n            ((this.inbuf.charCodeAt(this.inp) >= 48) &&\r\n             (this.inbuf.charCodeAt(this.inp) <= 57)  ) ;\r\n          if (this.pflag) {\r\n            if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n            this.inp++ } ;\r\n          if (this.pflag) {\r\n          } ;\r\n        } ;\r\n      };\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.tflag = false ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n    } ;\r\n  } ,\r\n\r\n  ruleNUMBER: function () {\r\n    this.ctxpush('PREFIX') ;\r\n    this.rulePREFIX() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.tflag = true ; \r\n      this.token = '' ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.pflag = \r\n        ((this.inbuf.charCodeAt(this.inp) >= 48) &&\r\n         (this.inbuf.charCodeAt(this.inp) <= 57)  ) ;\r\n      if (this.pflag) {\r\n        if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n        this.inp++ } ;\r\n      if (!this.pflag) return;\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.pflag = \r\n          ((this.inbuf.charCodeAt(this.inp) >= 48) &&\r\n           (this.inbuf.charCodeAt(this.inp) <= 57)  ) ;\r\n        if (this.pflag) {\r\n          if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n          this.inp++ } ;\r\n      };\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.tflag = false ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n    } ;\r\n  } ,\r\n\r\n  // runtime variables\r\n  pflag: false ,\r\n  tflag: false ,\r\n  eflag: false ,\r\n  inp: 0 ,\r\n  inbuf:  '' ,\r\n  outbuf:  '' ,\r\n  erule:  '' ,\r\n  einput: 0 ,\r\n  token: '' ,\r\n  labelcount: 0 ,\r\n  stackframesize: 6 ,\r\n  stackframe: 0 ,\r\n  stos: -1 ,\r\n  stack: [] ,\r\n\r\n  initialize: function () {\r\n    // initialize for another compile\r\n    this.pflag = false ;\r\n    this.tflag = false ;\r\n    this.eflag = false ;\r\n    this.inp = 0 ;\r\n    this.outbuf = '' ;\r\n    this.erule = '' ;\r\n    this.einput = 0 ;\r\n    this.token = '' ;\r\n    this.labelcount = 1 ;\r\n    this.stackframe = -1 ;\r\n    this.stos = -1 ;\r\n    this.stack = [] ;\r\n  },\r\n\r\n  ctxpush: function (rulename){\r\n    // push and initialize a new stackframe\r\n    var LM ;\r\n    // new context inherits current context left margin\r\n    LM = 0; if (this.stackframe >= 0) LM = this.stack[this.stackframe + 2] ;\r\n    this.stos++ ;\r\n    this.stackframe = this.stos * this.stackframesize ;\r\n    // stackframe definition\r\n    this.stack[this.stackframe + 0] = 0 ;        // generated label\r\n    this.stack[this.stackframe + 1] = rulename ; // called rule name\r\n    this.stack[this.stackframe + 2] = LM ;       // left margin\r\n    // clear additional stackframe backtracking entries\r\n    this.bkclear() ;\r\n  },\r\n\r\n  ctxpop: function (){\r\n    // pop and possibly deallocate old stackframe\r\n    this.stos-- ; // pop stackframe\r\n    this.stackframe = this.stos * this.stackframesize ;\r\n  },\r\n\r\n  out: function (s){\r\n    // output string\r\n    var i ;\r\n    // if newline last output, add left margin before string\r\n    if (this.outbuf.charAt(this.outbuf.length - 1) == '\\n') {\r\n      i = this.stack[this.stackframe + 2] ;\r\n      while (i>0) { this.outbuf += ' ' ; i-- } ; } ;\r\n    this.outbuf += s ;\r\n  },\r\n\r\n  eol: function (){\r\n    // output end of line\r\n    this.outbuf += '\\n' ;\r\n  },\r\n\r\n  test: function (s) {\r\n    // test for a string in the input\r\n    var i ;\r\n    // delete whitespace\r\n    while ((this.inbuf.charAt(this.inp) == ' ')  ||\r\n           (this.inbuf.charAt(this.inp) == '\\n') ||\r\n           (this.inbuf.charAt(this.inp) == '\\r') ||\r\n           (this.inbuf.charAt(this.inp) == '\\t') ) this.inp++ ;\r\n    // test string case insensitive\r\n    this.pflag = true ; i = 0 ;\r\n    while (this.pflag && (i < s.length) && ((this.inp+i) < this.inbuf.length) )\r\n    { this.pflag = (s.charAt(i).toUpperCase() ==\r\n                    this.inbuf.charAt(this.inp+i).toUpperCase()) ;\r\n      i++ ; } ;\r\n    this.pflag = this.pflag && (i == s.length) ;\r\n    // advance input if found\r\n    if (this.pflag) this.inp = this.inp + s.length ;\r\n  },\r\n\r\n  bkerr: function () {\r\n    // compilation error, provide error indication and context\r\n    this.eflag = true ;\r\n    this.erule = this.stack[this.stackframe + 1] ;\r\n    this.einput = this.inp ;\r\n  },\r\n\r\n  bkset: function () {\r\n    // set backtrack context on stack\r\n    this.stack[this.stackframe + 3] = this.inp ;           // input position\r\n    this.stack[this.stackframe + 4] = this.outbuf.length ; // output position\r\n    this.stack[this.stackframe + 5] = this.token ;         // current token\r\n  },\r\n\r\n  bkclear: function () {\r\n    // clear backtrack context on stack\r\n    this.stack[this.stackframe + 3] = -1 ; // input position\r\n    this.stack[this.stackframe + 4] = -1 ; // output position\r\n    this.stack[this.stackframe + 5] = '' ; // current token\r\n  },\r\n\r\n  bkrestore: function () {\r\n    // restore context for backtracking\r\n    this.eflag = false ;\r\n    this.inp = this.stack[this.stackframe + 3] ;           // input position\r\n    this.outbuf = this.outbuf.substring(0,this.stack[this.stackframe + 4]) ; // output position\r\n    this.token = this.stack[this.stackframe + 5] ;         // current token\r\n  }\r\n\r\n}\r\n"
    },
    {
        "filename": "c01__demo__AEXP_assignments_compiler_c[i02_c02]_.txt",
        "contents": "\tADR AEXP\r\nAEXP\r\n\tCLL AS\r\n\tBF L1\r\nL2\r\n\tCLL AS\r\n\tBT L2\r\n\tSET\r\n\tBE\r\nL1\r\nL3\r\n\tR\r\nAS\r\n\tID\r\n\tBF L4\r\n\tCL 'address '\r\n\tCI\r\n\tOUT\r\n\tTST ':='\r\n\tBE\r\n\tCLL EX1\r\n\tBE\r\n\tCL 'store'\r\n\tOUT\r\n\tTST ';'\r\n\tBE\r\nL4\r\nL5\r\n\tR\r\nEX1\r\n\tCLL EX2\r\n\tBF L6\r\nL7\r\n\tTST '+'\r\n\tBF L8\r\n\tCLL EX2\r\n\tBE\r\n\tCL 'add'\r\n\tOUT\r\nL8\r\n\tBT L9\r\n\tTST '-'\r\n\tBF L10\r\n\tCLL EX2\r\n\tBE\r\n\tCL 'sub'\r\n\tOUT\r\nL10\r\nL9\r\n\tBT L7\r\n\tSET\r\n\tBE\r\nL6\r\nL11\r\n\tR\r\nEX2\r\n\tCLL EX3\r\n\tBF L12\r\nL13\r\n\tTST '*'\r\n\tBF L14\r\n\tCLL EX3\r\n\tBE\r\n\tCL 'mpy'\r\n\tOUT\r\nL14\r\n\tBT L15\r\n\tTST '/'\r\n\tBF L16\r\n\tCLL EX3\r\n\tBE\r\n\tCL 'div'\r\n\tOUT\r\nL16\r\nL15\r\n\tBT L13\r\n\tSET\r\n\tBE\r\nL12\r\nL17\r\n\tR\r\nEX3\r\n\tCLL EX4\r\n\tBF L18\r\nL19\r\n\tTST '^'\r\n\tBF L20\r\n\tCLL EX3\r\n\tBE\r\n\tCL 'exp'\r\n\tOUT\r\nL20\r\nL21\r\n\tBT L19\r\n\tSET\r\n\tBE\r\nL18\r\nL22\r\n\tR\r\nEX4\r\n\tTST '+'\r\n\tBF L23\r\n\tCLL EX5\r\n\tBE\r\nL23\r\n\tBT L24\r\n\tTST '-'\r\n\tBF L25\r\n\tCLL EX5\r\n\tBE\r\n\tCL 'minus'\r\n\tOUT\r\nL25\r\n\tBT L24\r\n\tCLL EX5\r\n\tBF L26\r\nL26\r\nL24\r\n\tR\r\nEX5\r\n\tID\r\n\tBF L27\r\n\tCL 'load '\r\n\tCI\r\n\tOUT\r\nL27\r\n\tBT L28\r\n\tNUM\r\n\tBF L29\r\n\tCL 'literal '\r\n\tCI\r\n\tOUT\r\nL29\r\n\tBT L28\r\n\tTST '('\r\n\tBF L30\r\n\tCLL EX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL30\r\nL28\r\n\tR\r\n\tEND\r\n"
    },
    {
        "filename": "c02.ts",
        "contents": "export const c02 = `\tADR PROGRAM\r\nOUT1\r\n\tTST '*1'\r\n\tBF L1\r\n\tCL 'GN1'\r\n\tOUT\r\nL1\r\n\tBT L2\r\n\tTST '*2'\r\n\tBF L3\r\n\tCL 'GN2'\r\n\tOUT\r\nL3\r\n\tBT L2\r\n\tTST '*'\r\n\tBF L4\r\n\tCL 'CI'\r\n\tOUT\r\nL4\r\n\tBT L2\r\n\tSR\r\n\tBF L5\r\n\tCL 'CL '\r\n\tCI\r\n\tOUT\r\nL5\r\nL2\r\n\tR\r\nOUTPUT\r\n\tTST '.OUT'\r\n\tBF L6\r\n\tTST '('\r\n\tBE\r\nL7\r\n\tCLL OUT1\r\n\tBT L7\r\n\tSET\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL6\r\n\tBT L8\r\n\tTST '.LABEL'\r\n\tBF L9\r\n\tCL 'LB'\r\n\tOUT\r\n\tCLL OUT1\r\n\tBE\r\nL9\r\nL8\r\n\tBF L10\r\n\tCL 'OUT'\r\n\tOUT\r\nL10\r\nL11\r\n\tR\r\nEX3\r\n\tID\r\n\tBF L12\r\n\tCL 'CLL '\r\n\tCI\r\n\tOUT\r\nL12\r\n\tBT L13\r\n\tSR\r\n\tBF L14\r\n\tCL 'TST '\r\n\tCI\r\n\tOUT\r\nL14\r\n\tBT L13\r\n\tTST '.ID'\r\n\tBF L15\r\n\tCL 'ID'\r\n\tOUT\r\nL15\r\n\tBT L13\r\n\tTST '.NUMBER'\r\n\tBF L16\r\n\tCL 'NUM'\r\n\tOUT\r\nL16\r\n\tBT L13\r\n\tTST '.STRING'\r\n\tBF L17\r\n\tCL 'SR'\r\n\tOUT\r\nL17\r\n\tBT L13\r\n\tTST '('\r\n\tBF L18\r\n\tCLL EX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL18\r\n\tBT L13\r\n\tTST '.EMPTY'\r\n\tBF L19\r\n\tCL 'SET'\r\n\tOUT\r\nL19\r\n\tBT L13\r\n\tTST '$'\r\n\tBF L20\r\n\tLB\r\n\tGN1\r\n\tOUT\r\n\tCLL EX3\r\n\tBE\r\n\tCL 'BT '\r\n\tGN1\r\n\tOUT\r\n\tCL 'SET'\r\n\tOUT\r\nL20\r\nL13\r\n\tR\r\nEX2\r\n\tCLL EX3\r\n\tBF L21\r\n\tCL 'BF '\r\n\tGN1\r\n\tOUT\r\nL21\r\n\tBT L22\r\n\tCLL OUTPUT\r\n\tBF L23\r\nL23\r\nL22\r\n\tBF L24\r\nL25\r\n\tCLL EX3\r\n\tBF L26\r\n\tCL 'BE'\r\n\tOUT\r\nL26\r\n\tBT L27\r\n\tCLL OUTPUT\r\n\tBF L28\r\nL28\r\nL27\r\n\tBT L25\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tGN1\r\n\tOUT\r\nL24\r\nL29\r\n\tR\r\nEX1\r\n\tCLL EX2\r\n\tBF L30\r\nL31\r\n\tTST '/'\r\n\tBF L32\r\n\tCL 'BT '\r\n\tGN1\r\n\tOUT\r\n\tCLL EX2\r\n\tBE\r\nL32\r\nL33\r\n\tBT L31\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tGN1\r\n\tOUT\r\nL30\r\nL34\r\n\tR\r\nST\r\n\tID\r\n\tBF L35\r\n\tLB\r\n\tCI\r\n\tOUT\r\n\tTST '='\r\n\tBE\r\n\tCLL EX1\r\n\tBE\r\n\tTST '.,'\r\n\tBE\r\n\tCL 'R'\r\n\tOUT\r\nL35\r\nL36\r\n\tR\r\nPROGRAM\r\n\tTST '.SYNTAX'\r\n\tBF L37\r\n\tID\r\n\tBE\r\n\tCL 'ADR '\r\n\tCI\r\n\tOUT\r\nL38\r\n\tCLL ST\r\n\tBT L38\r\n\tSET\r\n\tBE\r\n\tTST '.END'\r\n\tBE\r\n\tCL 'END'\r\n\tOUT\r\nL37\r\nL39\r\n\tR\r\n\tEND`;"
    },
    {
        "filename": "c02__Meta_II_of_fig__5__m[i03_c02].txt",
        "contents": "\tADR PROGRAM\r\nOUT1\r\n\tTST '*1'\r\n\tBF L1\r\n\tCL 'GN1'\r\n\tOUT\r\nL1\r\n\tBT L2\r\n\tTST '*2'\r\n\tBF L3\r\n\tCL 'GN2'\r\n\tOUT\r\nL3\r\n\tBT L2\r\n\tTST '*'\r\n\tBF L4\r\n\tCL 'CI'\r\n\tOUT\r\nL4\r\n\tBT L2\r\n\tSR\r\n\tBF L5\r\n\tCL 'CL '\r\n\tCI\r\n\tOUT\r\nL5\r\nL2\r\n\tR\r\nOUTPUT\r\n\tTST '.OUT'\r\n\tBF L6\r\n\tTST '('\r\n\tBE\r\nL7\r\n\tCLL OUT1\r\n\tBT L7\r\n\tSET\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL6\r\n\tBT L8\r\n\tTST '.LABEL'\r\n\tBF L9\r\n\tCL 'LB'\r\n\tOUT\r\n\tCLL OUT1\r\n\tBE\r\nL9\r\nL8\r\n\tBF L10\r\n\tCL 'OUT'\r\n\tOUT\r\nL10\r\nL11\r\n\tR\r\nEX3\r\n\tID\r\n\tBF L12\r\n\tCL 'CLL '\r\n\tCI\r\n\tOUT\r\nL12\r\n\tBT L13\r\n\tSR\r\n\tBF L14\r\n\tCL 'TST '\r\n\tCI\r\n\tOUT\r\nL14\r\n\tBT L13\r\n\tTST '.ID'\r\n\tBF L15\r\n\tCL 'ID'\r\n\tOUT\r\nL15\r\n\tBT L13\r\n\tTST '.NUMBER'\r\n\tBF L16\r\n\tCL 'NUM'\r\n\tOUT\r\nL16\r\n\tBT L13\r\n\tTST '.STRING'\r\n\tBF L17\r\n\tCL 'SR'\r\n\tOUT\r\nL17\r\n\tBT L13\r\n\tTST '('\r\n\tBF L18\r\n\tCLL EX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL18\r\n\tBT L13\r\n\tTST '.EMPTY'\r\n\tBF L19\r\n\tCL 'SET'\r\n\tOUT\r\nL19\r\n\tBT L13\r\n\tTST '$'\r\n\tBF L20\r\n\tLB\r\n\tGN1\r\n\tOUT\r\n\tCLL EX3\r\n\tBE\r\n\tCL 'BT '\r\n\tGN1\r\n\tOUT\r\n\tCL 'SET'\r\n\tOUT\r\nL20\r\nL13\r\n\tR\r\nEX2\r\n\tCLL EX3\r\n\tBF L21\r\n\tCL 'BF '\r\n\tGN1\r\n\tOUT\r\nL21\r\n\tBT L22\r\n\tCLL OUTPUT\r\n\tBF L23\r\nL23\r\nL22\r\n\tBF L24\r\nL25\r\n\tCLL EX3\r\n\tBF L26\r\n\tCL 'BE'\r\n\tOUT\r\nL26\r\n\tBT L27\r\n\tCLL OUTPUT\r\n\tBF L28\r\nL28\r\nL27\r\n\tBT L25\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tGN1\r\n\tOUT\r\nL24\r\nL29\r\n\tR\r\nEX1\r\n\tCLL EX2\r\n\tBF L30\r\nL31\r\n\tTST '/'\r\n\tBF L32\r\n\tCL 'BT '\r\n\tGN1\r\n\tOUT\r\n\tCLL EX2\r\n\tBE\r\nL32\r\nL33\r\n\tBT L31\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tGN1\r\n\tOUT\r\nL30\r\nL34\r\n\tR\r\nST\r\n\tID\r\n\tBF L35\r\n\tLB\r\n\tCI\r\n\tOUT\r\n\tTST '='\r\n\tBE\r\n\tCLL EX1\r\n\tBE\r\n\tTST '.,'\r\n\tBE\r\n\tCL 'R'\r\n\tOUT\r\nL35\r\nL36\r\n\tR\r\nPROGRAM\r\n\tTST '.SYNTAX'\r\n\tBF L37\r\n\tID\r\n\tBE\r\n\tCL 'ADR '\r\n\tCI\r\n\tOUT\r\nL38\r\n\tCLL ST\r\n\tBT L38\r\n\tSET\r\n\tBE\r\n\tTST '.END'\r\n\tBE\r\n\tCL 'END'\r\n\tOUT\r\nL37\r\nL39\r\n\tR\r\n\tEND\r\n"
    },
    {
        "filename": "c03js__Meta_II_reordered__c[i04a_c13js].txt",
        "contents": "// PROGRAM compiler\r\ncompiler = {\r\n\r\n  compile: function (input) {\r\n    // initialize compiler variables\r\n    this.inbuf = input ;\r\n    this.initialize() ;\r\n    // call the first rule\r\n    this.ctxpush('PROGRAM') ;\r\n    this.rulePROGRAM() ;\r\n    this.ctxpop() ;\r\n    // special case handling of first rule failure\r\n    if ((!this.eflag) && (!this.pflag)) {\r\n      this.eflag = true ;\r\n      this.erule = 'PROGRAM' ;\r\n      this.einput = this.inp ; } ;\r\n    return this.eflag ;\r\n  },\r\n\r\n  rulePROGRAM: function () {\r\n    this.test('.SYNTAX');\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.ctxpush('ID') ;\r\n        this.ruleID() ;\r\n        this.ctxpop() ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.out('\\t') ;\r\n        this.out('ADR ') ;\r\n        this.out(this.token) ;\r\n        this.eol() ;\r\n        this.pflag = true ;\r\n        while (this.pflag & !this.eflag) {\r\n          this.ctxpush('ST') ;\r\n          this.ruleST() ;\r\n          this.ctxpop() ;\r\n        } ;\r\n        this.pflag = !this.eflag ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.test('.END');\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.out('\\t') ;\r\n        this.out('END') ;\r\n        this.eol() ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  ruleST: function () {\r\n    this.ctxpush('ID') ;\r\n    this.ruleID() ;\r\n    this.ctxpop() ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.out(this.token) ;\r\n        this.eol() ;\r\n        this.test('=');\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.ctxpush('EX1') ;\r\n        this.ruleEX1() ;\r\n        this.ctxpop() ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.test('.,');\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.out('\\t') ;\r\n        this.out('R') ;\r\n        this.eol() ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  ruleEX1: function () {\r\n    this.ctxpush('EX2') ;\r\n    this.ruleEX2() ;\r\n    this.ctxpop() ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.pflag = true ;\r\n        while (this.pflag & !this.eflag) {\r\n          this.test('/');\r\n          if (this.pflag) {\r\n            while (!this.eflag) {\r\n              this.out('\\t') ;\r\n              this.out('BT L') ;\r\n              if (this.stack[this.stackframe + 0] == 0) {\r\n                this.stack[this.stackframe + 0] = this.labelcount ;\r\n                this.labelcount++ ; } ;\r\n              this.out(this.stack[this.stackframe + 0]) ;\r\n              this.eol() ;\r\n              this.ctxpush('EX2') ;\r\n              this.ruleEX2() ;\r\n              this.ctxpop() ;\r\n              if (!this.pflag) this.bkerr();\r\n              if (this.eflag) break ;\r\n              break }\r\n          } ;\r\n        } ;\r\n        this.pflag = !this.eflag ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.out('L') ;\r\n        if (this.stack[this.stackframe + 0] == 0) {\r\n          this.stack[this.stackframe + 0] = this.labelcount ;\r\n          this.labelcount++ ; } ;\r\n        this.out(this.stack[this.stackframe + 0]) ;\r\n        this.eol() ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  ruleEX2: function () {\r\n    this.ctxpush('EX3') ;\r\n    this.ruleEX3() ;\r\n    this.ctxpop() ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.out('\\t') ;\r\n        this.out('BF L') ;\r\n        if (this.stack[this.stackframe + 0] == 0) {\r\n          this.stack[this.stackframe + 0] = this.labelcount ;\r\n          this.labelcount++ ; } ;\r\n        this.out(this.stack[this.stackframe + 0]) ;\r\n        this.eol() ;\r\n        break }\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.ctxpush('OUTPUT') ;\r\n      this.ruleOUTPUT() ;\r\n      this.ctxpop() ;\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          break }\r\n      } ;\r\n    } ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.pflag = true ;\r\n        while (this.pflag & !this.eflag) {\r\n          this.ctxpush('EX3') ;\r\n          this.ruleEX3() ;\r\n          this.ctxpop() ;\r\n          if (this.pflag) {\r\n            while (!this.eflag) {\r\n              this.out('\\t') ;\r\n              this.out('BE') ;\r\n              this.eol() ;\r\n              break }\r\n          } ;\r\n          if ((!this.pflag) && (!this.eflag)) {\r\n            this.ctxpush('OUTPUT') ;\r\n            this.ruleOUTPUT() ;\r\n            this.ctxpop() ;\r\n            if (this.pflag) {\r\n              while (!this.eflag) {\r\n                break }\r\n            } ;\r\n          } ;\r\n        } ;\r\n        this.pflag = !this.eflag ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.out('L') ;\r\n        if (this.stack[this.stackframe + 0] == 0) {\r\n          this.stack[this.stackframe + 0] = this.labelcount ;\r\n          this.labelcount++ ; } ;\r\n        this.out(this.stack[this.stackframe + 0]) ;\r\n        this.eol() ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  ruleEX3: function () {\r\n    this.ctxpush('ID') ;\r\n    this.ruleID() ;\r\n    this.ctxpop() ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.out('\\t') ;\r\n        this.out('CLL ') ;\r\n        this.out(this.token) ;\r\n        this.eol() ;\r\n        break }\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.ctxpush('STRING') ;\r\n      this.ruleSTRING() ;\r\n      this.ctxpop() ;\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('\\t') ;\r\n          this.out('TST ') ;\r\n          this.out(this.token) ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('.ID');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('\\t') ;\r\n          this.out('ID') ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('.NUMBER');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('\\t') ;\r\n          this.out('NUM') ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('.STRING');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('\\t') ;\r\n          this.out('SR') ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('(');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.ctxpush('EX1') ;\r\n          this.ruleEX1() ;\r\n          this.ctxpop() ;\r\n          if (!this.pflag) this.bkerr();\r\n          if (this.eflag) break ;\r\n          this.test(')');\r\n          if (!this.pflag) this.bkerr();\r\n          if (this.eflag) break ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('.EMPTY');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('\\t') ;\r\n          this.out('SET') ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('$');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('L') ;\r\n          if (this.stack[this.stackframe + 0] == 0) {\r\n            this.stack[this.stackframe + 0] = this.labelcount ;\r\n            this.labelcount++ ; } ;\r\n          this.out(this.stack[this.stackframe + 0]) ;\r\n          this.eol() ;\r\n          this.ctxpush('EX3') ;\r\n          this.ruleEX3() ;\r\n          this.ctxpop() ;\r\n          if (!this.pflag) this.bkerr();\r\n          if (this.eflag) break ;\r\n          this.out('\\t') ;\r\n          this.out('BT L') ;\r\n          if (this.stack[this.stackframe + 0] == 0) {\r\n            this.stack[this.stackframe + 0] = this.labelcount ;\r\n            this.labelcount++ ; } ;\r\n          this.out(this.stack[this.stackframe + 0]) ;\r\n          this.eol() ;\r\n          this.out('\\t') ;\r\n          this.out('SET') ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n  } ,\r\n\r\n  ruleOUTPUT: function () {\r\n    this.test('.OUT');\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.test('(');\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.pflag = true ;\r\n        while (this.pflag & !this.eflag) {\r\n          this.ctxpush('OUT1') ;\r\n          this.ruleOUT1() ;\r\n          this.ctxpop() ;\r\n        } ;\r\n        this.pflag = !this.eflag ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.test(')');\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        break }\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('.LABEL');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('\\t') ;\r\n          this.out('LB') ;\r\n          this.eol() ;\r\n          this.ctxpush('OUT1') ;\r\n          this.ruleOUT1() ;\r\n          this.ctxpop() ;\r\n          if (!this.pflag) this.bkerr();\r\n          if (this.eflag) break ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.out('\\t') ;\r\n        this.out('OUT') ;\r\n        this.eol() ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  ruleOUT1: function () {\r\n    this.test('*1');\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.out('\\t') ;\r\n        this.out('GN1') ;\r\n        this.eol() ;\r\n        break }\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('*2');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('\\t') ;\r\n          this.out('GN2') ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('*');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('\\t') ;\r\n          this.out('CI') ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.ctxpush('STRING') ;\r\n      this.ruleSTRING() ;\r\n      this.ctxpop() ;\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('\\t') ;\r\n          this.out('CL ') ;\r\n          this.out(this.token) ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n  } ,\r\n\r\n  rulePREFIX: function () {\r\n    this.pflag = true ;\r\n    while (this.pflag) {\r\n      this.pflag = \r\n        (this.inbuf.charCodeAt(this.inp) == 32)  ||\r\n        (this.inbuf.charCodeAt(this.inp) == 9)  ||\r\n        (this.inbuf.charCodeAt(this.inp) == 13)  ||\r\n        (this.inbuf.charCodeAt(this.inp) == 10)  ;\r\n      if (this.pflag) {\r\n        if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n        this.inp++ } ;\r\n    };\r\n    this.pflag = true ;\r\n    if (this.pflag) {\r\n    } ;\r\n  } ,\r\n\r\n  ruleID: function () {\r\n    this.ctxpush('PREFIX') ;\r\n    this.rulePREFIX() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.tflag = true ; \r\n      this.token = '' ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.ctxpush('ALPHA') ;\r\n      this.ruleALPHA() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (!this.pflag) return;\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.ctxpush('ALPHA') ;\r\n        this.ruleALPHA() ;\r\n        this.ctxpop() ;\r\n        if (this.eflag) return ;\r\n        if (this.pflag) {\r\n        } ;\r\n        if (!this.pflag) {\r\n          this.ctxpush('DIGIT') ;\r\n          this.ruleDIGIT() ;\r\n          this.ctxpop() ;\r\n          if (this.eflag) return ;\r\n          if (this.pflag) {\r\n          } ;\r\n        } ;\r\n      };\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.tflag = false ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n    } ;\r\n  } ,\r\n\r\n  ruleNUMBER: function () {\r\n    this.ctxpush('PREFIX') ;\r\n    this.rulePREFIX() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.tflag = true ; \r\n      this.token = '' ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.ctxpush('DIGIT') ;\r\n      this.ruleDIGIT() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (!this.pflag) return;\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.ctxpush('DIGIT') ;\r\n        this.ruleDIGIT() ;\r\n        this.ctxpop() ;\r\n        if (this.eflag) return ;\r\n      };\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.tflag = false ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n    } ;\r\n  } ,\r\n\r\n  ruleSTRING: function () {\r\n    this.ctxpush('PREFIX') ;\r\n    this.rulePREFIX() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.tflag = true ; \r\n      this.token = '' ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.pflag = \r\n        (this.inbuf.charCodeAt(this.inp) == 39)  ;\r\n      if (this.pflag) {\r\n        if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n        this.inp++ } ;\r\n      if (!this.pflag) return;\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.pflag = \r\n          (this.inbuf.charCodeAt(this.inp) == 13)  ||\r\n          (this.inbuf.charCodeAt(this.inp) == 10)  ||\r\n          (this.inbuf.charCodeAt(this.inp) == 39)  ;\r\n        this.pflag = !this.pflag ;\r\n        if (this.pflag) {\r\n          if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n          this.inp++ } ;\r\n      };\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.pflag = \r\n        (this.inbuf.charCodeAt(this.inp) == 39)  ;\r\n      if (this.pflag) {\r\n        if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n        this.inp++ } ;\r\n      if (!this.pflag) return;\r\n      this.tflag = false ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n    } ;\r\n  } ,\r\n\r\n  ruleALPHA: function () {\r\n    this.pflag = \r\n      ((this.inbuf.charCodeAt(this.inp) >= 65) &&\r\n       (this.inbuf.charCodeAt(this.inp) <= 90)  ) ||\r\n      ((this.inbuf.charCodeAt(this.inp) >= 97) &&\r\n       (this.inbuf.charCodeAt(this.inp) <= 122)  ) ;\r\n    if (this.pflag) {\r\n      if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n      this.inp++ } ;\r\n    if (this.pflag) {\r\n    } ;\r\n  } ,\r\n\r\n  ruleDIGIT: function () {\r\n    this.pflag = \r\n      ((this.inbuf.charCodeAt(this.inp) >= 48) &&\r\n       (this.inbuf.charCodeAt(this.inp) <= 57)  ) ;\r\n    if (this.pflag) {\r\n      if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n      this.inp++ } ;\r\n    if (this.pflag) {\r\n    } ;\r\n  } ,\r\n\r\n  // runtime variables\r\n  pflag: false ,\r\n  tflag: false ,\r\n  eflag: false ,\r\n  inp: 0 ,\r\n  inbuf:  '' ,\r\n  outbuf:  '' ,\r\n  erule:  '' ,\r\n  einput: 0 ,\r\n  token: '' ,\r\n  labelcount: 0 ,\r\n  stackframesize: 6 ,\r\n  stackframe: 0 ,\r\n  stos: -1 ,\r\n  stack: [] ,\r\n\r\n  initialize: function () {\r\n    // initialize for another compile\r\n    this.pflag = false ;\r\n    this.tflag = false ;\r\n    this.eflag = false ;\r\n    this.inp = 0 ;\r\n    this.outbuf = '' ;\r\n    this.erule = '' ;\r\n    this.einput = 0 ;\r\n    this.token = '' ;\r\n    this.labelcount = 1 ;\r\n    this.stackframe = -1 ;\r\n    this.stos = -1 ;\r\n    this.stack = [] ;\r\n  },\r\n\r\n  ctxpush: function (rulename){\r\n    // push and initialize a new stackframe\r\n    var LM ;\r\n    // new context inherits current context left margin\r\n    LM = 0; if (this.stackframe >= 0) LM = this.stack[this.stackframe + 2] ;\r\n    this.stos++ ;\r\n    this.stackframe = this.stos * this.stackframesize ;\r\n    // stackframe definition\r\n    this.stack[this.stackframe + 0] = 0 ;        // generated label\r\n    this.stack[this.stackframe + 1] = rulename ; // called rule name\r\n    this.stack[this.stackframe + 2] = LM ;       // left margin\r\n    // clear additional stackframe backtracking entries\r\n    this.bkclear() ;\r\n  },\r\n\r\n  ctxpop: function (){\r\n    // pop and possibly deallocate old stackframe\r\n    this.stos-- ; // pop stackframe\r\n    this.stackframe = this.stos * this.stackframesize ;\r\n  },\r\n\r\n  out: function (s){\r\n    // output string\r\n    var i ;\r\n    // if newline last output, add left margin before string\r\n    if (this.outbuf.charAt(this.outbuf.length - 1) == '\\n') {\r\n      i = this.stack[this.stackframe + 2] ;\r\n      while (i>0) { this.outbuf += ' ' ; i-- } ; } ;\r\n    this.outbuf += s ;\r\n  },\r\n\r\n  eol: function (){\r\n    // output end of line\r\n    this.outbuf += '\\n' ;\r\n  },\r\n\r\n  test: function (s) {\r\n    // test for a string in the input\r\n    var i ;\r\n    // delete whitespace\r\n    while ((this.inbuf.charAt(this.inp) == ' ')  ||\r\n           (this.inbuf.charAt(this.inp) == '\\n') ||\r\n           (this.inbuf.charAt(this.inp) == '\\r') ||\r\n           (this.inbuf.charAt(this.inp) == '\\t') ) this.inp++ ;\r\n    // test string case insensitive\r\n    this.pflag = true ; i = 0 ;\r\n    while (this.pflag && (i < s.length) && ((this.inp+i) < this.inbuf.length) )\r\n    { this.pflag = (s.charAt(i).toUpperCase() ==\r\n                    this.inbuf.charAt(this.inp+i).toUpperCase()) ;\r\n      i++ ; } ;\r\n    this.pflag = this.pflag && (i == s.length) ;\r\n    // advance input if found\r\n    if (this.pflag) this.inp = this.inp + s.length ;\r\n  },\r\n\r\n  bkerr: function () {\r\n    // compilation error, provide error indication and context\r\n    this.eflag = true ;\r\n    this.erule = this.stack[this.stackframe + 1] ;\r\n    this.einput = this.inp ;\r\n  },\r\n\r\n  bkset: function () {\r\n    // set backtrack context on stack\r\n    this.stack[this.stackframe + 3] = this.inp ;           // input position\r\n    this.stack[this.stackframe + 4] = this.outbuf.length ; // output position\r\n    this.stack[this.stackframe + 5] = this.token ;         // current token\r\n  },\r\n\r\n  bkclear: function () {\r\n    // clear backtrack context on stack\r\n    this.stack[this.stackframe + 3] = -1 ; // input position\r\n    this.stack[this.stackframe + 4] = -1 ; // output position\r\n    this.stack[this.stackframe + 5] = '' ; // current token\r\n  },\r\n\r\n  bkrestore: function () {\r\n    // restore context for backtracking\r\n    this.eflag = false ;\r\n    this.inp = this.stack[this.stackframe + 3] ;           // input position\r\n    this.outbuf = this.outbuf.substring(0,this.stack[this.stackframe + 4]) ; // output position\r\n    this.token = this.stack[this.stackframe + 5] ;         // current token\r\n  }\r\n\r\n}\r\n"
    },
    {
        "filename": "c03__Meta_II_reordered__c[i04_c02]__m[i04_c03].txt",
        "contents": "\tADR PROGRAM\r\nPROGRAM\r\n\tTST '.SYNTAX'\r\n\tBF L1\r\n\tID\r\n\tBE\r\n\tCL 'ADR '\r\n\tCI\r\n\tOUT\r\nL2\r\n\tCLL ST\r\n\tBT L2\r\n\tSET\r\n\tBE\r\n\tTST '.END'\r\n\tBE\r\n\tCL 'END'\r\n\tOUT\r\nL1\r\nL3\r\n\tR\r\nST\r\n\tID\r\n\tBF L4\r\n\tLB\r\n\tCI\r\n\tOUT\r\n\tTST '='\r\n\tBE\r\n\tCLL EX1\r\n\tBE\r\n\tTST '.,'\r\n\tBE\r\n\tCL 'R'\r\n\tOUT\r\nL4\r\nL5\r\n\tR\r\nEX1\r\n\tCLL EX2\r\n\tBF L6\r\nL7\r\n\tTST '/'\r\n\tBF L8\r\n\tCL 'BT '\r\n\tGN1\r\n\tOUT\r\n\tCLL EX2\r\n\tBE\r\nL8\r\nL9\r\n\tBT L7\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tGN1\r\n\tOUT\r\nL6\r\nL10\r\n\tR\r\nEX2\r\n\tCLL EX3\r\n\tBF L11\r\n\tCL 'BF '\r\n\tGN1\r\n\tOUT\r\nL11\r\n\tBT L12\r\n\tCLL OUTPUT\r\n\tBF L13\r\nL13\r\nL12\r\n\tBF L14\r\nL15\r\n\tCLL EX3\r\n\tBF L16\r\n\tCL 'BE'\r\n\tOUT\r\nL16\r\n\tBT L17\r\n\tCLL OUTPUT\r\n\tBF L18\r\nL18\r\nL17\r\n\tBT L15\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tGN1\r\n\tOUT\r\nL14\r\nL19\r\n\tR\r\nEX3\r\n\tID\r\n\tBF L20\r\n\tCL 'CLL '\r\n\tCI\r\n\tOUT\r\nL20\r\n\tBT L21\r\n\tSR\r\n\tBF L22\r\n\tCL 'TST '\r\n\tCI\r\n\tOUT\r\nL22\r\n\tBT L21\r\n\tTST '.ID'\r\n\tBF L23\r\n\tCL 'ID'\r\n\tOUT\r\nL23\r\n\tBT L21\r\n\tTST '.NUMBER'\r\n\tBF L24\r\n\tCL 'NUM'\r\n\tOUT\r\nL24\r\n\tBT L21\r\n\tTST '.STRING'\r\n\tBF L25\r\n\tCL 'SR'\r\n\tOUT\r\nL25\r\n\tBT L21\r\n\tTST '('\r\n\tBF L26\r\n\tCLL EX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL26\r\n\tBT L21\r\n\tTST '.EMPTY'\r\n\tBF L27\r\n\tCL 'SET'\r\n\tOUT\r\nL27\r\n\tBT L21\r\n\tTST '$'\r\n\tBF L28\r\n\tLB\r\n\tGN1\r\n\tOUT\r\n\tCLL EX3\r\n\tBE\r\n\tCL 'BT '\r\n\tGN1\r\n\tOUT\r\n\tCL 'SET'\r\n\tOUT\r\nL28\r\nL21\r\n\tR\r\nOUTPUT\r\n\tTST '.OUT'\r\n\tBF L29\r\n\tTST '('\r\n\tBE\r\nL30\r\n\tCLL OUT1\r\n\tBT L30\r\n\tSET\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL29\r\n\tBT L31\r\n\tTST '.LABEL'\r\n\tBF L32\r\n\tCL 'LB'\r\n\tOUT\r\n\tCLL OUT1\r\n\tBE\r\nL32\r\nL31\r\n\tBF L33\r\n\tCL 'OUT'\r\n\tOUT\r\nL33\r\nL34\r\n\tR\r\nOUT1\r\n\tTST '*1'\r\n\tBF L35\r\n\tCL 'GN1'\r\n\tOUT\r\nL35\r\n\tBT L36\r\n\tTST '*2'\r\n\tBF L37\r\n\tCL 'GN2'\r\n\tOUT\r\nL37\r\n\tBT L36\r\n\tTST '*'\r\n\tBF L38\r\n\tCL 'CI'\r\n\tOUT\r\nL38\r\n\tBT L36\r\n\tSR\r\n\tBF L39\r\n\tCL 'CL '\r\n\tCI\r\n\tOUT\r\nL39\r\nL36\r\n\tR\r\n\tEND\r\n"
    },
    {
        "filename": "c04__Meta_II_semicolons__c[i05_c03]__m[i06_c04].txt",
        "contents": "\tADR PROGRAM\r\nPROGRAM\r\n\tTST '.SYNTAX'\r\n\tBF L1\r\n\tID\r\n\tBE\r\n\tCL 'ADR '\r\n\tCI\r\n\tOUT\r\nL2\r\n\tCLL ST\r\n\tBT L2\r\n\tSET\r\n\tBE\r\n\tTST '.END'\r\n\tBE\r\n\tCL 'END'\r\n\tOUT\r\nL1\r\nL3\r\n\tR\r\nST\r\n\tID\r\n\tBF L4\r\n\tLB\r\n\tCI\r\n\tOUT\r\n\tTST '='\r\n\tBE\r\n\tCLL EX1\r\n\tBE\r\n\tTST ';'\r\n\tBE\r\n\tCL 'R'\r\n\tOUT\r\nL4\r\nL5\r\n\tR\r\nEX1\r\n\tCLL EX2\r\n\tBF L6\r\nL7\r\n\tTST '/'\r\n\tBF L8\r\n\tCL 'BT '\r\n\tGN1\r\n\tOUT\r\n\tCLL EX2\r\n\tBE\r\nL8\r\nL9\r\n\tBT L7\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tGN1\r\n\tOUT\r\nL6\r\nL10\r\n\tR\r\nEX2\r\n\tCLL EX3\r\n\tBF L11\r\n\tCL 'BF '\r\n\tGN1\r\n\tOUT\r\nL11\r\n\tBT L12\r\n\tCLL OUTPUT\r\n\tBF L13\r\nL13\r\nL12\r\n\tBF L14\r\nL15\r\n\tCLL EX3\r\n\tBF L16\r\n\tCL 'BE'\r\n\tOUT\r\nL16\r\n\tBT L17\r\n\tCLL OUTPUT\r\n\tBF L18\r\nL18\r\nL17\r\n\tBT L15\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tGN1\r\n\tOUT\r\nL14\r\nL19\r\n\tR\r\nEX3\r\n\tID\r\n\tBF L20\r\n\tCL 'CLL '\r\n\tCI\r\n\tOUT\r\nL20\r\n\tBT L21\r\n\tSR\r\n\tBF L22\r\n\tCL 'TST '\r\n\tCI\r\n\tOUT\r\nL22\r\n\tBT L21\r\n\tTST '.ID'\r\n\tBF L23\r\n\tCL 'ID'\r\n\tOUT\r\nL23\r\n\tBT L21\r\n\tTST '.NUMBER'\r\n\tBF L24\r\n\tCL 'NUM'\r\n\tOUT\r\nL24\r\n\tBT L21\r\n\tTST '.STRING'\r\n\tBF L25\r\n\tCL 'SR'\r\n\tOUT\r\nL25\r\n\tBT L21\r\n\tTST '('\r\n\tBF L26\r\n\tCLL EX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL26\r\n\tBT L21\r\n\tTST '.EMPTY'\r\n\tBF L27\r\n\tCL 'SET'\r\n\tOUT\r\nL27\r\n\tBT L21\r\n\tTST '$'\r\n\tBF L28\r\n\tLB\r\n\tGN1\r\n\tOUT\r\n\tCLL EX3\r\n\tBE\r\n\tCL 'BT '\r\n\tGN1\r\n\tOUT\r\n\tCL 'SET'\r\n\tOUT\r\nL28\r\nL21\r\n\tR\r\nOUTPUT\r\n\tTST '.OUT'\r\n\tBF L29\r\n\tTST '('\r\n\tBE\r\nL30\r\n\tCLL OUT1\r\n\tBT L30\r\n\tSET\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL29\r\n\tBT L31\r\n\tTST '.LABEL'\r\n\tBF L32\r\n\tCL 'LB'\r\n\tOUT\r\n\tCLL OUT1\r\n\tBE\r\nL32\r\nL31\r\n\tBF L33\r\n\tCL 'OUT'\r\n\tOUT\r\nL33\r\nL34\r\n\tR\r\nOUT1\r\n\tTST '*1'\r\n\tBF L35\r\n\tCL 'GN1'\r\n\tOUT\r\nL35\r\n\tBT L36\r\n\tTST '*2'\r\n\tBF L37\r\n\tCL 'GN2'\r\n\tOUT\r\nL37\r\n\tBT L36\r\n\tTST '*'\r\n\tBF L38\r\n\tCL 'CI'\r\n\tOUT\r\nL38\r\n\tBT L36\r\n\tSR\r\n\tBF L39\r\n\tCL 'CL '\r\n\tCI\r\n\tOUT\r\nL39\r\nL36\r\n\tR\r\n\tEND\r\n"
    },
    {
        "filename": "c05__accept_new_output__c[i07_c04]__m[i07_c05].txt",
        "contents": "\tADR PROGRAM\r\nPROGRAM\r\n\tTST '.SYNTAX'\r\n\tBF L1\r\n\tID\r\n\tBE\r\n\tCL 'ADR '\r\n\tCI\r\n\tOUT\r\nL2\r\n\tCLL ST\r\n\tBT L2\r\n\tSET\r\n\tBE\r\n\tTST '.END'\r\n\tBE\r\n\tCL 'END'\r\n\tOUT\r\nL1\r\nL3\r\n\tR\r\nST\r\n\tID\r\n\tBF L4\r\n\tLB\r\n\tCI\r\n\tOUT\r\n\tTST '='\r\n\tBE\r\n\tCLL EX1\r\n\tBE\r\n\tTST ';'\r\n\tBE\r\n\tCL 'R'\r\n\tOUT\r\nL4\r\nL5\r\n\tR\r\nEX1\r\n\tCLL EX2\r\n\tBF L6\r\nL7\r\n\tTST '/'\r\n\tBF L8\r\n\tCL 'BT '\r\n\tGN1\r\n\tOUT\r\n\tCLL EX2\r\n\tBE\r\nL8\r\nL9\r\n\tBT L7\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tGN1\r\n\tOUT\r\nL6\r\nL10\r\n\tR\r\nEX2\r\n\tCLL EX3\r\n\tBF L11\r\n\tCL 'BF '\r\n\tGN1\r\n\tOUT\r\nL11\r\n\tBT L12\r\n\tCLL OUTPUT\r\n\tBF L13\r\nL13\r\nL12\r\n\tBF L14\r\nL15\r\n\tCLL EX3\r\n\tBF L16\r\n\tCL 'BE'\r\n\tOUT\r\nL16\r\n\tBT L17\r\n\tCLL OUTPUT\r\n\tBF L18\r\nL18\r\nL17\r\n\tBT L15\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tGN1\r\n\tOUT\r\nL14\r\nL19\r\n\tR\r\nEX3\r\n\tID\r\n\tBF L20\r\n\tCL 'CLL '\r\n\tCI\r\n\tOUT\r\nL20\r\n\tBT L21\r\n\tSR\r\n\tBF L22\r\n\tCL 'TST '\r\n\tCI\r\n\tOUT\r\nL22\r\n\tBT L21\r\n\tTST '.ID'\r\n\tBF L23\r\n\tCL 'ID'\r\n\tOUT\r\nL23\r\n\tBT L21\r\n\tTST '.NUMBER'\r\n\tBF L24\r\n\tCL 'NUM'\r\n\tOUT\r\nL24\r\n\tBT L21\r\n\tTST '.STRING'\r\n\tBF L25\r\n\tCL 'SR'\r\n\tOUT\r\nL25\r\n\tBT L21\r\n\tTST '('\r\n\tBF L26\r\n\tCLL EX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL26\r\n\tBT L21\r\n\tTST '.EMPTY'\r\n\tBF L27\r\n\tCL 'SET'\r\n\tOUT\r\nL27\r\n\tBT L21\r\n\tTST '$'\r\n\tBF L28\r\n\tLB\r\n\tGN1\r\n\tOUT\r\n\tCLL EX3\r\n\tBE\r\n\tCL 'BT '\r\n\tGN1\r\n\tOUT\r\n\tCL 'SET'\r\n\tOUT\r\nL28\r\nL21\r\n\tR\r\nOUTPUT\r\n\tTST '.OUT'\r\n\tBF L29\r\n\tTST '('\r\n\tBE\r\nL30\r\n\tCLL OUT1\r\n\tBT L30\r\n\tSET\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL29\r\n\tBT L31\r\n\tTST '.LABEL'\r\n\tBF L32\r\n\tCL 'LB'\r\n\tOUT\r\n\tCLL OUT1\r\n\tBE\r\nL32\r\nL31\r\n\tBF L33\r\n\tCL 'OUT'\r\n\tOUT\r\nL33\r\nL34\r\n\tR\r\nOUT1\r\n\tTST '*1'\r\n\tBF L35\r\n\tCL 'GN1'\r\n\tOUT\r\nL35\r\n\tBT L36\r\n\tTST '*2'\r\n\tBF L37\r\n\tCL 'GN2'\r\n\tOUT\r\nL37\r\n\tBT L36\r\n\tTST '*'\r\n\tBF L38\r\n\tCL 'CI'\r\n\tOUT\r\nL38\r\n\tBT L36\r\n\tSR\r\n\tBF L39\r\n\tCL 'CL '\r\n\tCI\r\n\tOUT\r\nL39\r\n\tBT L36\r\n\tTST '#'\r\n\tBF L40\r\n\tCL 'GN'\r\n\tOUT\r\nL40\r\n\tBT L36\r\n\tTST '.NL'\r\n\tBF L41\r\n\tCL 'NL'\r\n\tOUT\r\nL41\r\n\tBT L36\r\n\tTST '.LB'\r\n\tBF L42\r\n\tCL 'LB'\r\n\tOUT\r\nL42\r\n\tBT L36\r\n\tTST '.TB'\r\n\tBF L43\r\n\tCL 'TB'\r\n\tOUT\r\nL43\r\n\tBT L36\r\n\tTST '.LM+'\r\n\tBF L44\r\n\tCL 'LMI'\r\n\tOUT\r\nL44\r\n\tBT L36\r\n\tTST '.LM-'\r\n\tBF L45\r\n\tCL 'LMD'\r\n\tOUT\r\nL45\r\nL36\r\n\tR\r\n\tEND\r\n"
    },
    {
        "filename": "c06__reject_old_output__c[i08_c05].txt",
        "contents": "\tADR PROGRAM\r\nPROGRAM\r\n\tTST '.SYNTAX'\r\n\tBF L1\r\n\tID\r\n\tBE\r\n\tCL 'ADR '\r\n\tCI\r\n\tOUT\r\nL2\r\n\tCLL ST\r\n\tBT L2\r\n\tSET\r\n\tBE\r\n\tTST '.END'\r\n\tBE\r\n\tCL 'END'\r\n\tOUT\r\nL1\r\nL3\r\n\tR\r\nST\r\n\tID\r\n\tBF L4\r\n\tLB\r\n\tCI\r\n\tOUT\r\n\tTST '='\r\n\tBE\r\n\tCLL EX1\r\n\tBE\r\n\tTST ';'\r\n\tBE\r\n\tCL 'R'\r\n\tOUT\r\nL4\r\nL5\r\n\tR\r\nEX1\r\n\tCLL EX2\r\n\tBF L6\r\nL7\r\n\tTST '/'\r\n\tBF L8\r\n\tCL 'BT '\r\n\tGN1\r\n\tOUT\r\n\tCLL EX2\r\n\tBE\r\nL8\r\nL9\r\n\tBT L7\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tGN1\r\n\tOUT\r\nL6\r\nL10\r\n\tR\r\nEX2\r\n\tCLL EX3\r\n\tBF L11\r\n\tCL 'BF '\r\n\tGN1\r\n\tOUT\r\nL11\r\n\tBT L12\r\n\tCLL OUTPUT\r\n\tBF L13\r\nL13\r\nL12\r\n\tBF L14\r\nL15\r\n\tCLL EX3\r\n\tBF L16\r\n\tCL 'BE'\r\n\tOUT\r\nL16\r\n\tBT L17\r\n\tCLL OUTPUT\r\n\tBF L18\r\nL18\r\nL17\r\n\tBT L15\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tGN1\r\n\tOUT\r\nL14\r\nL19\r\n\tR\r\nEX3\r\n\tID\r\n\tBF L20\r\n\tCL 'CLL '\r\n\tCI\r\n\tOUT\r\nL20\r\n\tBT L21\r\n\tSR\r\n\tBF L22\r\n\tCL 'TST '\r\n\tCI\r\n\tOUT\r\nL22\r\n\tBT L21\r\n\tTST '.ID'\r\n\tBF L23\r\n\tCL 'ID'\r\n\tOUT\r\nL23\r\n\tBT L21\r\n\tTST '.NUMBER'\r\n\tBF L24\r\n\tCL 'NUM'\r\n\tOUT\r\nL24\r\n\tBT L21\r\n\tTST '.STRING'\r\n\tBF L25\r\n\tCL 'SR'\r\n\tOUT\r\nL25\r\n\tBT L21\r\n\tTST '('\r\n\tBF L26\r\n\tCLL EX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL26\r\n\tBT L21\r\n\tTST '.EMPTY'\r\n\tBF L27\r\n\tCL 'SET'\r\n\tOUT\r\nL27\r\n\tBT L21\r\n\tTST '$'\r\n\tBF L28\r\n\tLB\r\n\tGN1\r\n\tOUT\r\n\tCLL EX3\r\n\tBE\r\n\tCL 'BT '\r\n\tGN1\r\n\tOUT\r\n\tCL 'SET'\r\n\tOUT\r\nL28\r\nL21\r\n\tR\r\nOUTPUT\r\n\tTST '.OUT'\r\n\tBF L29\r\n\tTST '('\r\n\tBE\r\nL30\r\n\tCLL OUT1\r\n\tBT L30\r\n\tSET\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL29\r\nL31\r\n\tR\r\nOUT1\r\n\tTST '*'\r\n\tBF L32\r\n\tCL 'CI'\r\n\tOUT\r\nL32\r\n\tBT L33\r\n\tSR\r\n\tBF L34\r\n\tCL 'CL '\r\n\tCI\r\n\tOUT\r\nL34\r\n\tBT L33\r\n\tTST '#'\r\n\tBF L35\r\n\tCL 'GN'\r\n\tOUT\r\nL35\r\n\tBT L33\r\n\tTST '.NL'\r\n\tBF L36\r\n\tCL 'NL'\r\n\tOUT\r\nL36\r\n\tBT L33\r\n\tTST '.LB'\r\n\tBF L37\r\n\tCL 'LB'\r\n\tOUT\r\nL37\r\n\tBT L33\r\n\tTST '.TB'\r\n\tBF L38\r\n\tCL 'TB'\r\n\tOUT\r\nL38\r\n\tBT L33\r\n\tTST '.LM+'\r\n\tBF L39\r\n\tCL 'LMI'\r\n\tOUT\r\nL39\r\n\tBT L33\r\n\tTST '.LM-'\r\n\tBF L40\r\n\tCL 'LMD'\r\n\tOUT\r\nL40\r\nL33\r\n\tR\r\n\tEND\r\n"
    },
    {
        "filename": "c07jf__compile_to_js_functions__c[i10_c08]__m[i10_c07jf].txt",
        "contents": "// PROGRAM compiler\r\nfunction compiler (input) {\r\n  inbuf = input ;\r\n  inp = 0 ;\r\n  outbuf = \"\" ;\r\n  margin = 0 ;\r\n  gnlabel = 1 ;\r\n  rulePROGRAM() ;\r\n  return outbuf ;\r\n} ;\r\n\r\nfunction rulePROGRAM () {\r\n  var rname = \"PROGRAM\" ;\r\n  var rlabel = 0 ;\r\n  runTST('.SYNTAX');\r\n  if (flag) {\r\n    runID();\r\n    if (!flag) runBEjsfn(rname);\r\n    runLB();\r\n    runCL('// ');\r\n    runCI();\r\n    runCL(' compiler');\r\n    runextNL();\r\n    runCL('function compiler (input) {');\r\n    runextLMI();\r\n    runextNL();\r\n    runCL('inbuf = input ;');\r\n    runextNL();\r\n    runCL('inp = 0 ;');\r\n    runextNL();\r\n    runCL('outbuf = \"\" ;');\r\n    runextNL();\r\n    runCL('margin = 0 ;');\r\n    runextNL();\r\n    runCL('gnlabel = 1 ;');\r\n    runextNL();\r\n    runCL('rule');\r\n    runCI();\r\n    runCL('() ;');\r\n    runextNL();\r\n    runCL('return outbuf ;');\r\n    runextNL();\r\n    runextLMD();\r\n    runCL('} ;');\r\n    runextNL();\r\n    runextNL();\r\n    runSET();\r\n    while (flag) {\r\n      ruleST();\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST('.END');\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction ruleST () {\r\n  var rname = \"ST\" ;\r\n  var rlabel = 0 ;\r\n  runID();\r\n  if (flag) {\r\n    runLB();\r\n    runCL('function rule');\r\n    runCI();\r\n    runCL(' () {');\r\n    runextLMI();\r\n    runextNL();\r\n    runCL('var rname = \"');\r\n    runCI();\r\n    runCL('\" ;');\r\n    runextNL();\r\n    runCL('var rlabel = 0 ;');\r\n    runextNL();\r\n    runTST('=');\r\n    if (!flag) runBEjsfn(rname);\r\n    ruleEX1();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST(';');\r\n    if (!flag) runBEjsfn(rname);\r\n    runextLMD();\r\n    runCL('} ;');\r\n    runextNL();\r\n    runextNL();\r\n  } ;\r\n} ;\r\n\r\nfunction ruleEX1 () {\r\n  var rname = \"EX1\" ;\r\n  var rlabel = 0 ;\r\n  ruleEX2();\r\n  if (flag) {\r\n    runSET();\r\n    while (flag) {\r\n      runTST('/');\r\n      if (flag) {\r\n        runCL('if (!flag) {');\r\n        runextLMI();\r\n        runextNL();\r\n        ruleEX2();\r\n        if (!flag) runBEjsfn(rname);\r\n        runextLMD();\r\n        runCL('} ;');\r\n        runextNL();\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction ruleEX2 () {\r\n  var rname = \"EX2\" ;\r\n  var rlabel = 0 ;\r\n  ruleEX3();\r\n  if (flag) {\r\n    runCL('if (flag) {');\r\n    runextLMI();\r\n    runextNL();\r\n  } ;\r\n  if (!flag) {\r\n    ruleOUTPUT();\r\n    if (flag) {\r\n      runCL('if (true) {');\r\n      runextLMI();\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (flag) {\r\n    runSET();\r\n    while (flag) {\r\n      ruleEX3();\r\n      if (flag) {\r\n        runCL('if (!flag) runBEjsfn(rname);');\r\n        runextNL();\r\n      } ;\r\n      if (!flag) {\r\n        ruleOUTPUT();\r\n        if (flag) {\r\n        } ;\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n    runextLMD();\r\n    runCL('} ;');\r\n    runextNL();\r\n  } ;\r\n} ;\r\n\r\nfunction ruleEX3 () {\r\n  var rname = \"EX3\" ;\r\n  var rlabel = 0 ;\r\n  runID();\r\n  if (flag) {\r\n    runCL('rule');\r\n    runCI();\r\n    runCL('();');\r\n    runextNL();\r\n  } ;\r\n  if (!flag) {\r\n    runSR();\r\n    if (flag) {\r\n      runCL('runTST(');\r\n      runCI();\r\n      runCL(');');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.ID');\r\n    if (flag) {\r\n      runCL('runID();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.NUMBER');\r\n    if (flag) {\r\n      runCL('runNUM();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.STRING');\r\n    if (flag) {\r\n      runCL('runSR();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('(');\r\n    if (flag) {\r\n      ruleEX1();\r\n      if (!flag) runBEjsfn(rname);\r\n      runTST(')');\r\n      if (!flag) runBEjsfn(rname);\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.EMPTY');\r\n    if (flag) {\r\n      runCL('runSET();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('$');\r\n    if (flag) {\r\n      runCL('runSET();');\r\n      runextNL();\r\n      runCL('while (flag) {');\r\n      runextLMI();\r\n      runextNL();\r\n      ruleEX3();\r\n      if (!flag) runBEjsfn(rname);\r\n      runCL('};');\r\n      runextLMD();\r\n      runextNL();\r\n      runCL('runSET();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n} ;\r\n\r\nfunction ruleOUTPUT () {\r\n  var rname = \"OUTPUT\" ;\r\n  var rlabel = 0 ;\r\n  runTST('.OUT');\r\n  if (flag) {\r\n    runTST('(');\r\n    if (!flag) runBEjsfn(rname);\r\n    runSET();\r\n    while (flag) {\r\n      ruleOUT1();\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST(')');\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction ruleOUT1 () {\r\n  var rname = \"OUT1\" ;\r\n  var rlabel = 0 ;\r\n  runTST('*');\r\n  if (flag) {\r\n    runCL('runCI();');\r\n    runextNL();\r\n  } ;\r\n  if (!flag) {\r\n    runSR();\r\n    if (flag) {\r\n      runCL('runCL(');\r\n      runCI();\r\n      runCL(');');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('#');\r\n    if (flag) {\r\n      runCL('if (rlabel == 0) { rlabel = gnlabel; gnlabel++ ; } ;');\r\n      runextNL();\r\n      runCL('runCL(rlabel.toString());');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.NL');\r\n    if (flag) {\r\n      runCL('runextNL();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.LB');\r\n    if (flag) {\r\n      runCL('runLB();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.TB');\r\n    if (flag) {\r\n      runCL('runextTB();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.LM+');\r\n    if (flag) {\r\n      runCL('runextLMI();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.LM-');\r\n    if (flag) {\r\n      runCL('runextLMD();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n} ;\r\n\r\n"
    },
    {
        "filename": "c07__use_new_output__c[i09_c06]__m[i09_c07].txt",
        "contents": "\tADR PROGRAM\r\nPROGRAM\r\n\tTST '.SYNTAX'\r\n\tBF L1\r\n\tID\r\n\tBE\r\n\tLB\r\n\tTB\r\n\tCL 'ADR '\r\n\tCI\r\n\tNL\r\nL2\r\n\tCLL ST\r\n\tBT L2\r\n\tSET\r\n\tBE\r\n\tTST '.END'\r\n\tBE\r\n\tTB\r\n\tCL 'END'\r\n\tNL\r\nL1\r\nL3\r\n\tR\r\nST\r\n\tID\r\n\tBF L4\r\n\tLB\r\n\tCI\r\n\tNL\r\n\tTST '='\r\n\tBE\r\n\tCLL EX1\r\n\tBE\r\n\tTST ';'\r\n\tBE\r\n\tTB\r\n\tCL 'R'\r\n\tNL\r\nL4\r\nL5\r\n\tR\r\nEX1\r\n\tCLL EX2\r\n\tBF L6\r\nL7\r\n\tTST '/'\r\n\tBF L8\r\n\tTB\r\n\tCL 'BT L'\r\n\tGN\r\n\tNL\r\n\tCLL EX2\r\n\tBE\r\nL8\r\nL9\r\n\tBT L7\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tCL 'L'\r\n\tGN\r\n\tNL\r\nL6\r\nL10\r\n\tR\r\nEX2\r\n\tCLL EX3\r\n\tBF L11\r\n\tTB\r\n\tCL 'BF L'\r\n\tGN\r\n\tNL\r\nL11\r\n\tBT L12\r\n\tCLL OUTPUT\r\n\tBF L13\r\nL13\r\nL12\r\n\tBF L14\r\nL15\r\n\tCLL EX3\r\n\tBF L16\r\n\tTB\r\n\tCL 'BE'\r\n\tNL\r\nL16\r\n\tBT L17\r\n\tCLL OUTPUT\r\n\tBF L18\r\nL18\r\nL17\r\n\tBT L15\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tCL 'L'\r\n\tGN\r\n\tNL\r\nL14\r\nL19\r\n\tR\r\nEX3\r\n\tID\r\n\tBF L20\r\n\tTB\r\n\tCL 'CLL '\r\n\tCI\r\n\tNL\r\nL20\r\n\tBT L21\r\n\tSR\r\n\tBF L22\r\n\tTB\r\n\tCL 'TST '\r\n\tCI\r\n\tNL\r\nL22\r\n\tBT L21\r\n\tTST '.ID'\r\n\tBF L23\r\n\tTB\r\n\tCL 'ID'\r\n\tNL\r\nL23\r\n\tBT L21\r\n\tTST '.NUMBER'\r\n\tBF L24\r\n\tTB\r\n\tCL 'NUM'\r\n\tNL\r\nL24\r\n\tBT L21\r\n\tTST '.STRING'\r\n\tBF L25\r\n\tTB\r\n\tCL 'SR'\r\n\tNL\r\nL25\r\n\tBT L21\r\n\tTST '('\r\n\tBF L26\r\n\tCLL EX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL26\r\n\tBT L21\r\n\tTST '.EMPTY'\r\n\tBF L27\r\n\tTB\r\n\tCL 'SET'\r\n\tNL\r\nL27\r\n\tBT L21\r\n\tTST '$'\r\n\tBF L28\r\n\tLB\r\n\tCL 'L'\r\n\tGN\r\n\tNL\r\n\tCLL EX3\r\n\tBE\r\n\tTB\r\n\tCL 'BT L'\r\n\tGN\r\n\tNL\r\n\tTB\r\n\tCL 'SET'\r\n\tNL\r\nL28\r\nL21\r\n\tR\r\nOUTPUT\r\n\tTST '.OUT'\r\n\tBF L29\r\n\tTST '('\r\n\tBE\r\nL30\r\n\tCLL OUT1\r\n\tBT L30\r\n\tSET\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL29\r\nL31\r\n\tR\r\nOUT1\r\n\tTST '*'\r\n\tBF L32\r\n\tTB\r\n\tCL 'CI'\r\n\tNL\r\nL32\r\n\tBT L33\r\n\tSR\r\n\tBF L34\r\n\tTB\r\n\tCL 'CL '\r\n\tCI\r\n\tNL\r\nL34\r\n\tBT L33\r\n\tTST '#'\r\n\tBF L35\r\n\tTB\r\n\tCL 'GN'\r\n\tNL\r\nL35\r\n\tBT L33\r\n\tTST '.NL'\r\n\tBF L36\r\n\tTB\r\n\tCL 'NL'\r\n\tNL\r\nL36\r\n\tBT L33\r\n\tTST '.LB'\r\n\tBF L37\r\n\tTB\r\n\tCL 'LB'\r\n\tNL\r\nL37\r\n\tBT L33\r\n\tTST '.TB'\r\n\tBF L38\r\n\tTB\r\n\tCL 'TB'\r\n\tNL\r\nL38\r\n\tBT L33\r\n\tTST '.LM+'\r\n\tBF L39\r\n\tTB\r\n\tCL 'LMI'\r\n\tNL\r\nL39\r\n\tBT L33\r\n\tTST '.LM-'\r\n\tBF L40\r\n\tTB\r\n\tCL 'LMD'\r\n\tNL\r\nL40\r\nL33\r\n\tR\r\n\tEND\r\n"
    },
    {
        "filename": "c08__compile_to_js_functions__c[i10_c07].txt",
        "contents": "\tADR PROGRAM\r\nPROGRAM\r\n\tTST '.SYNTAX'\r\n\tBF L1\r\n\tID\r\n\tBE\r\n\tLB\r\n\tCL '// '\r\n\tCI\r\n\tCL ' compiler'\r\n\tNL\r\n\tCL 'function compiler (input) {'\r\n\tLMI\r\n\tNL\r\n\tCL 'inbuf = input ;'\r\n\tNL\r\n\tCL 'inp = 0 ;'\r\n\tNL\r\n\tCL 'outbuf = \"\" ;'\r\n\tNL\r\n\tCL 'margin = 0 ;'\r\n\tNL\r\n\tCL 'gnlabel = 1 ;'\r\n\tNL\r\n\tCL 'rule'\r\n\tCI\r\n\tCL '() ;'\r\n\tNL\r\n\tCL 'return outbuf ;'\r\n\tNL\r\n\tLMD\r\n\tCL '} ;'\r\n\tNL\r\n\tNL\r\nL2\r\n\tCLL ST\r\n\tBT L2\r\n\tSET\r\n\tBE\r\n\tTST '.END'\r\n\tBE\r\nL1\r\nL3\r\n\tR\r\nST\r\n\tID\r\n\tBF L4\r\n\tLB\r\n\tCL 'function rule'\r\n\tCI\r\n\tCL ' () {'\r\n\tLMI\r\n\tNL\r\n\tCL 'var rname = \"'\r\n\tCI\r\n\tCL '\" ;'\r\n\tNL\r\n\tCL 'var rlabel = 0 ;'\r\n\tNL\r\n\tTST '='\r\n\tBE\r\n\tCLL EX1\r\n\tBE\r\n\tTST ';'\r\n\tBE\r\n\tLMD\r\n\tCL '} ;'\r\n\tNL\r\n\tNL\r\nL4\r\nL5\r\n\tR\r\nEX1\r\n\tCLL EX2\r\n\tBF L6\r\nL7\r\n\tTST '/'\r\n\tBF L8\r\n\tCL 'if (!flag) {'\r\n\tLMI\r\n\tNL\r\n\tCLL EX2\r\n\tBE\r\n\tLMD\r\n\tCL '} ;'\r\n\tNL\r\nL8\r\nL9\r\n\tBT L7\r\n\tSET\r\n\tBE\r\nL6\r\nL10\r\n\tR\r\nEX2\r\n\tCLL EX3\r\n\tBF L11\r\n\tCL 'if (flag) {'\r\n\tLMI\r\n\tNL\r\nL11\r\n\tBT L12\r\n\tCLL OUTPUT\r\n\tBF L13\r\n\tCL 'if (true) {'\r\n\tLMI\r\n\tNL\r\nL13\r\nL12\r\n\tBF L14\r\nL15\r\n\tCLL EX3\r\n\tBF L16\r\n\tCL 'if (!flag) runBEjsfn(rname);'\r\n\tNL\r\nL16\r\n\tBT L17\r\n\tCLL OUTPUT\r\n\tBF L18\r\nL18\r\nL17\r\n\tBT L15\r\n\tSET\r\n\tBE\r\n\tLMD\r\n\tCL '} ;'\r\n\tNL\r\nL14\r\nL19\r\n\tR\r\nEX3\r\n\tID\r\n\tBF L20\r\n\tCL 'rule'\r\n\tCI\r\n\tCL '();'\r\n\tNL\r\nL20\r\n\tBT L21\r\n\tSR\r\n\tBF L22\r\n\tCL 'runTST('\r\n\tCI\r\n\tCL ');'\r\n\tNL\r\nL22\r\n\tBT L21\r\n\tTST '.ID'\r\n\tBF L23\r\n\tCL 'runID();'\r\n\tNL\r\nL23\r\n\tBT L21\r\n\tTST '.NUMBER'\r\n\tBF L24\r\n\tCL 'runNUM();'\r\n\tNL\r\nL24\r\n\tBT L21\r\n\tTST '.STRING'\r\n\tBF L25\r\n\tCL 'runSR();'\r\n\tNL\r\nL25\r\n\tBT L21\r\n\tTST '('\r\n\tBF L26\r\n\tCLL EX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL26\r\n\tBT L21\r\n\tTST '.EMPTY'\r\n\tBF L27\r\n\tCL 'runSET();'\r\n\tNL\r\nL27\r\n\tBT L21\r\n\tTST '$'\r\n\tBF L28\r\n\tCL 'runSET();'\r\n\tNL\r\n\tCL 'while (flag) {'\r\n\tLMI\r\n\tNL\r\n\tCLL EX3\r\n\tBE\r\n\tCL '};'\r\n\tLMD\r\n\tNL\r\n\tCL 'runSET();'\r\n\tNL\r\nL28\r\nL21\r\n\tR\r\nOUTPUT\r\n\tTST '.OUT'\r\n\tBF L29\r\n\tTST '('\r\n\tBE\r\nL30\r\n\tCLL OUT1\r\n\tBT L30\r\n\tSET\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL29\r\nL31\r\n\tR\r\nOUT1\r\n\tTST '*'\r\n\tBF L32\r\n\tCL 'runCI();'\r\n\tNL\r\nL32\r\n\tBT L33\r\n\tSR\r\n\tBF L34\r\n\tCL 'runCL('\r\n\tCI\r\n\tCL ');'\r\n\tNL\r\nL34\r\n\tBT L33\r\n\tTST '#'\r\n\tBF L35\r\n\tCL 'if (rlabel == 0) { rlabel = gnlabel; gnlabel++ ; } ;'\r\n\tNL\r\n\tCL 'runCL(rlabel.toString());'\r\n\tNL\r\nL35\r\n\tBT L33\r\n\tTST '.NL'\r\n\tBF L36\r\n\tCL 'runextNL();'\r\n\tNL\r\nL36\r\n\tBT L33\r\n\tTST '.LB'\r\n\tBF L37\r\n\tCL 'runLB();'\r\n\tNL\r\nL37\r\n\tBT L33\r\n\tTST '.TB'\r\n\tBF L38\r\n\tCL 'runextTB();'\r\n\tNL\r\nL38\r\n\tBT L33\r\n\tTST '.LM+'\r\n\tBF L39\r\n\tCL 'runextLMI();'\r\n\tNL\r\nL39\r\n\tBT L33\r\n\tTST '.LM-'\r\n\tBF L40\r\n\tCL 'runextLMD();'\r\n\tNL\r\nL40\r\nL33\r\n\tR\r\n\tEND\r\n"
    },
    {
        "filename": "c09jf__accept_tokens__c[i11jf_c07jf].txt",
        "contents": "// PROGRAM compiler\r\nfunction compiler (input) {\r\n  inbuf = input ;\r\n  inp = 0 ;\r\n  outbuf = \"\" ;\r\n  margin = 0 ;\r\n  gnlabel = 1 ;\r\n  rulePROGRAM() ;\r\n  return outbuf ;\r\n} ;\r\n\r\nfunction rulePROGRAM () {\r\n  var rname = \"PROGRAM\" ;\r\n  var rlabel = 0 ;\r\n  runTST('.SYNTAX');\r\n  if (flag) {\r\n    runID();\r\n    if (!flag) runBEjsfn(rname);\r\n    runLB();\r\n    runCL('// ');\r\n    runCI();\r\n    runCL(' compiler');\r\n    runextNL();\r\n    runCL('function compiler (input) {');\r\n    runextLMI();\r\n    runextNL();\r\n    runCL('inbuf = input ;');\r\n    runextNL();\r\n    runCL('inp = 0 ;');\r\n    runextNL();\r\n    runCL('outbuf = \"\" ;');\r\n    runextNL();\r\n    runCL('margin = 0 ;');\r\n    runextNL();\r\n    runCL('gnlabel = 1 ;');\r\n    runextNL();\r\n    runCL('runextTFF();');\r\n    runextNL();\r\n    runCL('rule');\r\n    runCI();\r\n    runCL('() ;');\r\n    runextNL();\r\n    runCL('return outbuf ;');\r\n    runextNL();\r\n    runextLMD();\r\n    runCL('} ;');\r\n    runextNL();\r\n    runextNL();\r\n    runSET();\r\n    while (flag) {\r\n      rulePR();\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST('.TOKENS');\r\n    if (!flag) runBEjsfn(rname);\r\n    runSET();\r\n    while (flag) {\r\n      ruleTR();\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST('.END');\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction rulePR () {\r\n  var rname = \"PR\" ;\r\n  var rlabel = 0 ;\r\n  runID();\r\n  if (flag) {\r\n    runLB();\r\n    runCL('function rule');\r\n    runCI();\r\n    runCL(' () {');\r\n    runextLMI();\r\n    runextNL();\r\n    runCL('var rname = \"');\r\n    runCI();\r\n    runCL('\" ;');\r\n    runextNL();\r\n    runCL('var rlabel = 0 ;');\r\n    runextNL();\r\n    runTST('=');\r\n    if (!flag) runBEjsfn(rname);\r\n    ruleEX1();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST(';');\r\n    if (!flag) runBEjsfn(rname);\r\n    runextLMD();\r\n    runCL('} ;');\r\n    runextNL();\r\n    runextNL();\r\n  } ;\r\n} ;\r\n\r\nfunction ruleTR () {\r\n  var rname = \"TR\" ;\r\n  var rlabel = 0 ;\r\n  runID();\r\n  if (flag) {\r\n    runLB();\r\n    runCL('function rule');\r\n    runCI();\r\n    runCL(' () {');\r\n    runextLMI();\r\n    runextNL();\r\n    runCL('var rname = \"');\r\n    runCI();\r\n    runCL('\" ;');\r\n    runextNL();\r\n    runCL('var rlabel = 0 ;');\r\n    runextNL();\r\n    runTST(':');\r\n    if (!flag) runBEjsfn(rname);\r\n    ruleTX1();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST(';');\r\n    if (!flag) runBEjsfn(rname);\r\n    runextLMD();\r\n    runCL('} ;');\r\n    runextNL();\r\n    runextNL();\r\n  } ;\r\n} ;\r\n\r\nfunction ruleEX1 () {\r\n  var rname = \"EX1\" ;\r\n  var rlabel = 0 ;\r\n  ruleEX2();\r\n  if (flag) {\r\n    runSET();\r\n    while (flag) {\r\n      runTST('/');\r\n      if (flag) {\r\n        runCL('if (!flag) {');\r\n        runextLMI();\r\n        runextNL();\r\n        ruleEX2();\r\n        if (!flag) runBEjsfn(rname);\r\n        runextLMD();\r\n        runCL('} ;');\r\n        runextNL();\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction ruleEX2 () {\r\n  var rname = \"EX2\" ;\r\n  var rlabel = 0 ;\r\n  ruleEX3();\r\n  if (flag) {\r\n    runCL('if (flag) {');\r\n    runextLMI();\r\n    runextNL();\r\n  } ;\r\n  if (!flag) {\r\n    ruleOUTPUT();\r\n    if (flag) {\r\n      runCL('if (true) {');\r\n      runextLMI();\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (flag) {\r\n    runSET();\r\n    while (flag) {\r\n      ruleEX3();\r\n      if (flag) {\r\n        runCL('if (!flag) runBEjsfn(rname);');\r\n        runextNL();\r\n      } ;\r\n      if (!flag) {\r\n        ruleOUTPUT();\r\n        if (flag) {\r\n        } ;\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n    runextLMD();\r\n    runCL('} ;');\r\n    runextNL();\r\n  } ;\r\n} ;\r\n\r\nfunction ruleEX3 () {\r\n  var rname = \"EX3\" ;\r\n  var rlabel = 0 ;\r\n  runID();\r\n  if (flag) {\r\n    runCL('rule');\r\n    runCI();\r\n    runCL('();');\r\n    runextNL();\r\n  } ;\r\n  if (!flag) {\r\n    runSR();\r\n    if (flag) {\r\n      runCL('runTST(');\r\n      runCI();\r\n      runCL(');');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.ID');\r\n    if (flag) {\r\n      runCL('runID();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.NUMBER');\r\n    if (flag) {\r\n      runCL('runNUM();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.STRING');\r\n    if (flag) {\r\n      runCL('runSR();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('(');\r\n    if (flag) {\r\n      ruleEX1();\r\n      if (!flag) runBEjsfn(rname);\r\n      runTST(')');\r\n      if (!flag) runBEjsfn(rname);\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.EMPTY');\r\n    if (flag) {\r\n      runCL('runSET();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('$');\r\n    if (flag) {\r\n      runCL('runSET();');\r\n      runextNL();\r\n      runCL('while (flag) {');\r\n      runextLMI();\r\n      runextNL();\r\n      ruleEX3();\r\n      if (!flag) runBEjsfn(rname);\r\n      runCL('};');\r\n      runextLMD();\r\n      runextNL();\r\n      runCL('runSET();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n} ;\r\n\r\nfunction ruleOUTPUT () {\r\n  var rname = \"OUTPUT\" ;\r\n  var rlabel = 0 ;\r\n  runTST('.OUT');\r\n  if (flag) {\r\n    runTST('(');\r\n    if (!flag) runBEjsfn(rname);\r\n    runSET();\r\n    while (flag) {\r\n      ruleOUT1();\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST(')');\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction ruleOUT1 () {\r\n  var rname = \"OUT1\" ;\r\n  var rlabel = 0 ;\r\n  runTST('*');\r\n  if (flag) {\r\n    runCL('runCI();');\r\n    runextNL();\r\n  } ;\r\n  if (!flag) {\r\n    runSR();\r\n    if (flag) {\r\n      runCL('runCL(');\r\n      runCI();\r\n      runCL(');');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runNUM();\r\n    if (flag) {\r\n      runCL('runextCC(');\r\n      runCI();\r\n      runCL(');');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('#');\r\n    if (flag) {\r\n      runCL('if (rlabel == 0) { rlabel = gnlabel; gnlabel++ ; } ;');\r\n      runextNL();\r\n      runCL('runCL(rlabel.toString());');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.NL');\r\n    if (flag) {\r\n      runCL('runextNL();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.LB');\r\n    if (flag) {\r\n      runCL('runLB();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.TB');\r\n    if (flag) {\r\n      runCL('runextTB();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.LM+');\r\n    if (flag) {\r\n      runCL('runextLMI();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.LM-');\r\n    if (flag) {\r\n      runCL('runextLMD();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n} ;\r\n\r\nfunction ruleTX1 () {\r\n  var rname = \"TX1\" ;\r\n  var rlabel = 0 ;\r\n  ruleTX2();\r\n  if (flag) {\r\n    runSET();\r\n    while (flag) {\r\n      runTST('/');\r\n      if (flag) {\r\n        runCL('if (!flag) {');\r\n        runextLMI();\r\n        runextNL();\r\n        ruleTX2();\r\n        if (!flag) runBEjsfn(rname);\r\n        runextLMD();\r\n        runCL('} ;');\r\n        runextNL();\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction ruleTX2 () {\r\n  var rname = \"TX2\" ;\r\n  var rlabel = 0 ;\r\n  ruleTX3();\r\n  if (flag) {\r\n    runCL('if (flag) {');\r\n    runextLMI();\r\n    runextNL();\r\n    runSET();\r\n    while (flag) {\r\n      ruleTX3();\r\n      if (flag) {\r\n        runCL('if (!flag) return;');\r\n        runextNL();\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n    runextLMD();\r\n    runCL('} ;');\r\n    runextNL();\r\n  } ;\r\n} ;\r\n\r\nfunction ruleTX3 () {\r\n  var rname = \"TX3\" ;\r\n  var rlabel = 0 ;\r\n  runTST('.TOKEN');\r\n  if (flag) {\r\n    runCL('runextTFT();');\r\n    runextNL();\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.DELTOK');\r\n    if (flag) {\r\n      runCL('runextTFF();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('$');\r\n    if (flag) {\r\n      runCL('runSET();');\r\n      runextNL();\r\n      runCL('while (flag) {');\r\n      runextLMI();\r\n      runextNL();\r\n      ruleTX3();\r\n      if (!flag) runBEjsfn(rname);\r\n      runCL('};');\r\n      runextLMD();\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (flag) {\r\n    runCL('runSET();');\r\n    runextNL();\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.ANYBUT(');\r\n    if (flag) {\r\n      ruleCX1();\r\n      if (!flag) runBEjsfn(rname);\r\n      runTST(')');\r\n      if (!flag) runBEjsfn(rname);\r\n      runCL('runextNOT();');\r\n      runextNL();\r\n      runCL('runextSCN();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.ANY(');\r\n    if (flag) {\r\n      ruleCX1();\r\n      if (!flag) runBEjsfn(rname);\r\n      runTST(')');\r\n      if (!flag) runBEjsfn(rname);\r\n      runCL('runextSCN();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runID();\r\n    if (flag) {\r\n      runCL('rule');\r\n      runCI();\r\n      runCL('();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('(');\r\n    if (flag) {\r\n      ruleTX1();\r\n      if (!flag) runBEjsfn(rname);\r\n      runTST(')');\r\n      if (!flag) runBEjsfn(rname);\r\n    } ;\r\n  } ;\r\n} ;\r\n\r\nfunction ruleCX1 () {\r\n  var rname = \"CX1\" ;\r\n  var rlabel = 0 ;\r\n  ruleCX2();\r\n  if (flag) {\r\n    runSET();\r\n    while (flag) {\r\n      runTST('!');\r\n      if (flag) {\r\n        runCL('if (!flag) {');\r\n        runextLMI();\r\n        runextNL();\r\n        ruleCX2();\r\n        if (!flag) runBEjsfn(rname);\r\n        runextLMD();\r\n        runCL('} ;');\r\n        runextNL();\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction ruleCX2 () {\r\n  var rname = \"CX2\" ;\r\n  var rlabel = 0 ;\r\n  ruleCX3();\r\n  if (flag) {\r\n    runTST(':');\r\n    if (flag) {\r\n      runCL('runextCGE(');\r\n      runCI();\r\n      runCL(');');\r\n      runextNL();\r\n      runCL('if (flag) {');\r\n      runextLMI();\r\n      runextNL();\r\n      ruleCX3();\r\n      if (!flag) runBEjsfn(rname);\r\n      runCL('runextCLE(');\r\n      runCI();\r\n      runCL(');');\r\n      runextNL();\r\n      runextLMD();\r\n      runCL('} ;');\r\n      runextNL();\r\n    } ;\r\n    if (!flag) {\r\n      runSET();\r\n      if (flag) {\r\n        runCL('runextCE(');\r\n        runCI();\r\n        runCL(');');\r\n        runextNL();\r\n      } ;\r\n    } ;\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction ruleCX3 () {\r\n  var rname = \"CX3\" ;\r\n  var rlabel = 0 ;\r\n  runNUM();\r\n  if (flag) {\r\n  } ;\r\n} ;\r\n\r\n"
    },
    {
        "filename": "c09__accept_tokens__c[i11_c07].txt",
        "contents": "\tADR PROGRAM\r\nPROGRAM\r\n\tTST '.SYNTAX'\r\n\tBF L1\r\n\tID\r\n\tBE\r\n\tLB\r\n\tTB\r\n\tCL 'ADR '\r\n\tCI\r\n\tNL\r\nL2\r\n\tCLL PR\r\n\tBT L2\r\n\tSET\r\n\tBE\r\n\tTST '.TOKENS'\r\n\tBE\r\nL3\r\n\tCLL TR\r\n\tBT L3\r\n\tSET\r\n\tBE\r\n\tTST '.END'\r\n\tBE\r\n\tTB\r\n\tCL 'END'\r\n\tNL\r\nL1\r\nL4\r\n\tR\r\nPR\r\n\tID\r\n\tBF L5\r\n\tLB\r\n\tCI\r\n\tNL\r\n\tTST '='\r\n\tBE\r\n\tCLL EX1\r\n\tBE\r\n\tTST ';'\r\n\tBE\r\n\tTB\r\n\tCL 'R'\r\n\tNL\r\nL5\r\nL6\r\n\tR\r\nTR\r\n\tID\r\n\tBF L7\r\n\tLB\r\n\tCI\r\n\tNL\r\n\tTST ':'\r\n\tBE\r\n\tCLL TX1\r\n\tBE\r\n\tTST ';'\r\n\tBE\r\n\tTB\r\n\tCL 'R'\r\n\tNL\r\nL7\r\nL8\r\n\tR\r\nEX1\r\n\tCLL EX2\r\n\tBF L9\r\nL10\r\n\tTST '/'\r\n\tBF L11\r\n\tTB\r\n\tCL 'BT L'\r\n\tGN\r\n\tNL\r\n\tCLL EX2\r\n\tBE\r\nL11\r\nL12\r\n\tBT L10\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tCL 'L'\r\n\tGN\r\n\tNL\r\nL9\r\nL13\r\n\tR\r\nEX2\r\n\tCLL EX3\r\n\tBF L14\r\n\tTB\r\n\tCL 'BF L'\r\n\tGN\r\n\tNL\r\nL14\r\n\tBT L15\r\n\tCLL OUTPUT\r\n\tBF L16\r\nL16\r\nL15\r\n\tBF L17\r\nL18\r\n\tCLL EX3\r\n\tBF L19\r\n\tTB\r\n\tCL 'BE'\r\n\tNL\r\nL19\r\n\tBT L20\r\n\tCLL OUTPUT\r\n\tBF L21\r\nL21\r\nL20\r\n\tBT L18\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tCL 'L'\r\n\tGN\r\n\tNL\r\nL17\r\nL22\r\n\tR\r\nEX3\r\n\tID\r\n\tBF L23\r\n\tTB\r\n\tCL 'CLL '\r\n\tCI\r\n\tNL\r\nL23\r\n\tBT L24\r\n\tSR\r\n\tBF L25\r\n\tTB\r\n\tCL 'TST '\r\n\tCI\r\n\tNL\r\nL25\r\n\tBT L24\r\n\tTST '.ID'\r\n\tBF L26\r\n\tTB\r\n\tCL 'ID'\r\n\tNL\r\nL26\r\n\tBT L24\r\n\tTST '.NUMBER'\r\n\tBF L27\r\n\tTB\r\n\tCL 'NUM'\r\n\tNL\r\nL27\r\n\tBT L24\r\n\tTST '.STRING'\r\n\tBF L28\r\n\tTB\r\n\tCL 'SR'\r\n\tNL\r\nL28\r\n\tBT L24\r\n\tTST '('\r\n\tBF L29\r\n\tCLL EX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL29\r\n\tBT L24\r\n\tTST '.EMPTY'\r\n\tBF L30\r\n\tTB\r\n\tCL 'SET'\r\n\tNL\r\nL30\r\n\tBT L24\r\n\tTST '$'\r\n\tBF L31\r\n\tLB\r\n\tCL 'L'\r\n\tGN\r\n\tNL\r\n\tCLL EX3\r\n\tBE\r\n\tTB\r\n\tCL 'BT L'\r\n\tGN\r\n\tNL\r\n\tTB\r\n\tCL 'SET'\r\n\tNL\r\nL31\r\nL24\r\n\tR\r\nOUTPUT\r\n\tTST '.OUT'\r\n\tBF L32\r\n\tTST '('\r\n\tBE\r\nL33\r\n\tCLL OUT1\r\n\tBT L33\r\n\tSET\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL32\r\nL34\r\n\tR\r\nOUT1\r\n\tTST '*'\r\n\tBF L35\r\n\tTB\r\n\tCL 'CI'\r\n\tNL\r\nL35\r\n\tBT L36\r\n\tSR\r\n\tBF L37\r\n\tTB\r\n\tCL 'CL '\r\n\tCI\r\n\tNL\r\nL37\r\n\tBT L36\r\n\tNUM\r\n\tBF L38\r\n\tTB\r\n\tCL 'CC '\r\n\tCI\r\n\tNL\r\nL38\r\n\tBT L36\r\n\tTST '#'\r\n\tBF L39\r\n\tTB\r\n\tCL 'GN'\r\n\tNL\r\nL39\r\n\tBT L36\r\n\tTST '.NL'\r\n\tBF L40\r\n\tTB\r\n\tCL 'NL'\r\n\tNL\r\nL40\r\n\tBT L36\r\n\tTST '.LB'\r\n\tBF L41\r\n\tTB\r\n\tCL 'LB'\r\n\tNL\r\nL41\r\n\tBT L36\r\n\tTST '.TB'\r\n\tBF L42\r\n\tTB\r\n\tCL 'TB'\r\n\tNL\r\nL42\r\n\tBT L36\r\n\tTST '.LM+'\r\n\tBF L43\r\n\tTB\r\n\tCL 'LMI'\r\n\tNL\r\nL43\r\n\tBT L36\r\n\tTST '.LM-'\r\n\tBF L44\r\n\tTB\r\n\tCL 'LMD'\r\n\tNL\r\nL44\r\nL36\r\n\tR\r\nTX1\r\n\tCLL TX2\r\n\tBF L45\r\nL46\r\n\tTST '/'\r\n\tBF L47\r\n\tTB\r\n\tCL 'BT T'\r\n\tGN\r\n\tNL\r\n\tCLL TX2\r\n\tBE\r\nL47\r\nL48\r\n\tBT L46\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tCL 'T'\r\n\tGN\r\n\tNL\r\nL45\r\nL49\r\n\tR\r\nTX2\r\n\tCLL TX3\r\n\tBF L50\r\n\tTB\r\n\tCL 'BF T'\r\n\tGN\r\n\tNL\r\nL51\r\n\tCLL TX3\r\n\tBF L52\r\n\tTB\r\n\tCL 'RF'\r\n\tNL\r\nL52\r\nL53\r\n\tBT L51\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tCL 'T'\r\n\tGN\r\n\tNL\r\nL50\r\nL54\r\n\tR\r\nTX3\r\n\tTST '.TOKEN'\r\n\tBF L55\r\n\tTB\r\n\tCL 'TFT'\r\n\tNL\r\nL55\r\n\tBT L56\r\n\tTST '.DELTOK'\r\n\tBF L57\r\n\tTB\r\n\tCL 'TFF'\r\n\tNL\r\nL57\r\n\tBT L56\r\n\tTST '$'\r\n\tBF L58\r\n\tLB\r\n\tCL 'T'\r\n\tGN\r\n\tNL\r\n\tCLL TX3\r\n\tBE\r\n\tTB\r\n\tCL 'BT T'\r\n\tGN\r\n\tNL\r\nL58\r\nL56\r\n\tBF L59\r\n\tTB\r\n\tCL 'SET'\r\n\tNL\r\nL59\r\n\tBT L60\r\n\tTST '.ANYBUT('\r\n\tBF L61\r\n\tCLL CX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\n\tTB\r\n\tCL 'NOT'\r\n\tNL\r\n\tTB\r\n\tCL 'SCN'\r\n\tNL\r\nL61\r\n\tBT L60\r\n\tTST '.ANY('\r\n\tBF L62\r\n\tCLL CX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\n\tTB\r\n\tCL 'SCN'\r\n\tNL\r\nL62\r\n\tBT L60\r\n\tID\r\n\tBF L63\r\n\tTB\r\n\tCL 'CLL '\r\n\tCI\r\n\tNL\r\nL63\r\n\tBT L60\r\n\tTST '('\r\n\tBF L64\r\n\tCLL TX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL64\r\nL60\r\n\tR\r\nCX1\r\n\tCLL CX2\r\n\tBF L65\r\nL66\r\n\tTST '!'\r\n\tBF L67\r\n\tTB\r\n\tCL 'BT C'\r\n\tGN\r\n\tNL\r\n\tCLL CX2\r\n\tBE\r\nL67\r\nL68\r\n\tBT L66\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tCL 'C'\r\n\tGN\r\n\tNL\r\nL65\r\nL69\r\n\tR\r\nCX2\r\n\tCLL CX3\r\n\tBF L70\r\n\tTST ':'\r\n\tBF L71\r\n\tTB\r\n\tCL 'CGE '\r\n\tCI\r\n\tNL\r\n\tTB\r\n\tCL 'BF D'\r\n\tGN\r\n\tNL\r\n\tCLL CX3\r\n\tBE\r\n\tTB\r\n\tCL 'CLE '\r\n\tCI\r\n\tNL\r\n\tLB\r\n\tCL 'D'\r\n\tGN\r\n\tNL\r\nL71\r\n\tBT L72\r\n\tSET\r\n\tBF L73\r\n\tTB\r\n\tCL 'CE '\r\n\tCI\r\n\tNL\r\nL73\r\nL72\r\n\tBE\r\nL70\r\nL74\r\n\tR\r\nCX3\r\n\tNUM\r\n\tBF L75\r\nL75\r\nL76\r\n\tR\r\n\tEND\r\n"
    },
    {
        "filename": "c10jf__use_tokens__c[i12jf_c09jf]__m[i12jf_c10jf].txt",
        "contents": "// PROGRAM compiler\r\nfunction compiler (input) {\r\n  inbuf = input ;\r\n  inp = 0 ;\r\n  outbuf = \"\" ;\r\n  margin = 0 ;\r\n  gnlabel = 1 ;\r\n  runextTFF();\r\n  rulePROGRAM() ;\r\n  return outbuf ;\r\n} ;\r\n\r\nfunction rulePROGRAM () {\r\n  var rname = \"PROGRAM\" ;\r\n  var rlabel = 0 ;\r\n  runTST('.SYNTAX');\r\n  if (flag) {\r\n    ruleID();\r\n    if (!flag) runBEjsfn(rname);\r\n    runLB();\r\n    runCL('// ');\r\n    runCI();\r\n    runCL(' compiler');\r\n    runextNL();\r\n    runCL('function compiler (input) {');\r\n    runextLMI();\r\n    runextNL();\r\n    runCL('inbuf = input ;');\r\n    runextNL();\r\n    runCL('inp = 0 ;');\r\n    runextNL();\r\n    runCL('outbuf = \"\" ;');\r\n    runextNL();\r\n    runCL('margin = 0 ;');\r\n    runextNL();\r\n    runCL('gnlabel = 1 ;');\r\n    runextNL();\r\n    runCL('runextTFF();');\r\n    runextNL();\r\n    runCL('rule');\r\n    runCI();\r\n    runCL('() ;');\r\n    runextNL();\r\n    runCL('return outbuf ;');\r\n    runextNL();\r\n    runextLMD();\r\n    runCL('} ;');\r\n    runextNL();\r\n    runextNL();\r\n    runSET();\r\n    while (flag) {\r\n      rulePR();\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST('.TOKENS');\r\n    if (!flag) runBEjsfn(rname);\r\n    runSET();\r\n    while (flag) {\r\n      ruleTR();\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST('.END');\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction rulePR () {\r\n  var rname = \"PR\" ;\r\n  var rlabel = 0 ;\r\n  ruleID();\r\n  if (flag) {\r\n    runLB();\r\n    runCL('function rule');\r\n    runCI();\r\n    runCL(' () {');\r\n    runextLMI();\r\n    runextNL();\r\n    runCL('var rname = \"');\r\n    runCI();\r\n    runCL('\" ;');\r\n    runextNL();\r\n    runCL('var rlabel = 0 ;');\r\n    runextNL();\r\n    runTST('=');\r\n    if (!flag) runBEjsfn(rname);\r\n    ruleEX1();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST(';');\r\n    if (!flag) runBEjsfn(rname);\r\n    runextLMD();\r\n    runCL('} ;');\r\n    runextNL();\r\n    runextNL();\r\n  } ;\r\n} ;\r\n\r\nfunction ruleTR () {\r\n  var rname = \"TR\" ;\r\n  var rlabel = 0 ;\r\n  ruleID();\r\n  if (flag) {\r\n    runLB();\r\n    runCL('function rule');\r\n    runCI();\r\n    runCL(' () {');\r\n    runextLMI();\r\n    runextNL();\r\n    runCL('var rname = \"');\r\n    runCI();\r\n    runCL('\" ;');\r\n    runextNL();\r\n    runCL('var rlabel = 0 ;');\r\n    runextNL();\r\n    runTST(':');\r\n    if (!flag) runBEjsfn(rname);\r\n    ruleTX1();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST(';');\r\n    if (!flag) runBEjsfn(rname);\r\n    runextLMD();\r\n    runCL('} ;');\r\n    runextNL();\r\n    runextNL();\r\n  } ;\r\n} ;\r\n\r\nfunction ruleEX1 () {\r\n  var rname = \"EX1\" ;\r\n  var rlabel = 0 ;\r\n  ruleEX2();\r\n  if (flag) {\r\n    runSET();\r\n    while (flag) {\r\n      runTST('/');\r\n      if (flag) {\r\n        runCL('if (!flag) {');\r\n        runextLMI();\r\n        runextNL();\r\n        ruleEX2();\r\n        if (!flag) runBEjsfn(rname);\r\n        runextLMD();\r\n        runCL('} ;');\r\n        runextNL();\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction ruleEX2 () {\r\n  var rname = \"EX2\" ;\r\n  var rlabel = 0 ;\r\n  ruleEX3();\r\n  if (flag) {\r\n    runCL('if (flag) {');\r\n    runextLMI();\r\n    runextNL();\r\n  } ;\r\n  if (!flag) {\r\n    ruleOUTPUT();\r\n    if (flag) {\r\n      runCL('if (true) {');\r\n      runextLMI();\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (flag) {\r\n    runSET();\r\n    while (flag) {\r\n      ruleEX3();\r\n      if (flag) {\r\n        runCL('if (!flag) runBEjsfn(rname);');\r\n        runextNL();\r\n      } ;\r\n      if (!flag) {\r\n        ruleOUTPUT();\r\n        if (flag) {\r\n        } ;\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n    runextLMD();\r\n    runCL('} ;');\r\n    runextNL();\r\n  } ;\r\n} ;\r\n\r\nfunction ruleEX3 () {\r\n  var rname = \"EX3\" ;\r\n  var rlabel = 0 ;\r\n  ruleID();\r\n  if (flag) {\r\n    runCL('rule');\r\n    runCI();\r\n    runCL('();');\r\n    runextNL();\r\n  } ;\r\n  if (!flag) {\r\n    ruleSTRING();\r\n    if (flag) {\r\n      runCL('runTST(');\r\n      runextCC(39);\r\n      runCI();\r\n      runextCC(39);\r\n      runCL(');');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('(');\r\n    if (flag) {\r\n      ruleEX1();\r\n      if (!flag) runBEjsfn(rname);\r\n      runTST(')');\r\n      if (!flag) runBEjsfn(rname);\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.EMPTY');\r\n    if (flag) {\r\n      runCL('runSET();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.LITCHR');\r\n    if (flag) {\r\n      runCL('runextLCH();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('$');\r\n    if (flag) {\r\n      runCL('runSET();');\r\n      runextNL();\r\n      runCL('while (flag) {');\r\n      runextLMI();\r\n      runextNL();\r\n      ruleEX3();\r\n      if (!flag) runBEjsfn(rname);\r\n      runCL('};');\r\n      runextLMD();\r\n      runextNL();\r\n      runCL('runSET();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n} ;\r\n\r\nfunction ruleOUTPUT () {\r\n  var rname = \"OUTPUT\" ;\r\n  var rlabel = 0 ;\r\n  runTST('.OUT');\r\n  if (flag) {\r\n    runTST('(');\r\n    if (!flag) runBEjsfn(rname);\r\n    runSET();\r\n    while (flag) {\r\n      ruleOUT1();\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST(')');\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction ruleOUT1 () {\r\n  var rname = \"OUT1\" ;\r\n  var rlabel = 0 ;\r\n  runTST('*');\r\n  if (flag) {\r\n    runCL('runCI();');\r\n    runextNL();\r\n  } ;\r\n  if (!flag) {\r\n    ruleSTRING();\r\n    if (flag) {\r\n      runCL('runCL(');\r\n      runextCC(39);\r\n      runCI();\r\n      runextCC(39);\r\n      runCL(');');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    ruleNUMBER();\r\n    if (flag) {\r\n      runCL('runextCC(');\r\n      runCI();\r\n      runCL(');');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('#');\r\n    if (flag) {\r\n      runCL('if (rlabel == 0) { rlabel = gnlabel; gnlabel++ ; } ;');\r\n      runextNL();\r\n      runCL('runCL(rlabel.toString());');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.NL');\r\n    if (flag) {\r\n      runCL('runextNL();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.LB');\r\n    if (flag) {\r\n      runCL('runLB();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.TB');\r\n    if (flag) {\r\n      runCL('runextTB();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.LM+');\r\n    if (flag) {\r\n      runCL('runextLMI();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.LM-');\r\n    if (flag) {\r\n      runCL('runextLMD();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n} ;\r\n\r\nfunction ruleTX1 () {\r\n  var rname = \"TX1\" ;\r\n  var rlabel = 0 ;\r\n  ruleTX2();\r\n  if (flag) {\r\n    runSET();\r\n    while (flag) {\r\n      runTST('/');\r\n      if (flag) {\r\n        runCL('if (!flag) {');\r\n        runextLMI();\r\n        runextNL();\r\n        ruleTX2();\r\n        if (!flag) runBEjsfn(rname);\r\n        runextLMD();\r\n        runCL('} ;');\r\n        runextNL();\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction ruleTX2 () {\r\n  var rname = \"TX2\" ;\r\n  var rlabel = 0 ;\r\n  ruleTX3();\r\n  if (flag) {\r\n    runCL('if (flag) {');\r\n    runextLMI();\r\n    runextNL();\r\n    runSET();\r\n    while (flag) {\r\n      ruleTX3();\r\n      if (flag) {\r\n        runCL('if (!flag) return;');\r\n        runextNL();\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n    runextLMD();\r\n    runCL('} ;');\r\n    runextNL();\r\n  } ;\r\n} ;\r\n\r\nfunction ruleTX3 () {\r\n  var rname = \"TX3\" ;\r\n  var rlabel = 0 ;\r\n  runTST('.TOKEN');\r\n  if (flag) {\r\n    runCL('runextTFT();');\r\n    runextNL();\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.DELTOK');\r\n    if (flag) {\r\n      runCL('runextTFF();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('$');\r\n    if (flag) {\r\n      runCL('runSET();');\r\n      runextNL();\r\n      runCL('while (flag) {');\r\n      runextLMI();\r\n      runextNL();\r\n      ruleTX3();\r\n      if (!flag) runBEjsfn(rname);\r\n      runCL('};');\r\n      runextLMD();\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (flag) {\r\n    runCL('runSET();');\r\n    runextNL();\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.ANYBUT(');\r\n    if (flag) {\r\n      ruleCX1();\r\n      if (!flag) runBEjsfn(rname);\r\n      runTST(')');\r\n      if (!flag) runBEjsfn(rname);\r\n      runCL('runextNOT();');\r\n      runextNL();\r\n      runCL('runextSCN();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.ANY(');\r\n    if (flag) {\r\n      ruleCX1();\r\n      if (!flag) runBEjsfn(rname);\r\n      runTST(')');\r\n      if (!flag) runBEjsfn(rname);\r\n      runCL('runextSCN();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    ruleID();\r\n    if (flag) {\r\n      runCL('rule');\r\n      runCI();\r\n      runCL('();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('(');\r\n    if (flag) {\r\n      ruleTX1();\r\n      if (!flag) runBEjsfn(rname);\r\n      runTST(')');\r\n      if (!flag) runBEjsfn(rname);\r\n    } ;\r\n  } ;\r\n} ;\r\n\r\nfunction ruleCX1 () {\r\n  var rname = \"CX1\" ;\r\n  var rlabel = 0 ;\r\n  ruleCX2();\r\n  if (flag) {\r\n    runSET();\r\n    while (flag) {\r\n      runTST('!');\r\n      if (flag) {\r\n        runCL('if (!flag) {');\r\n        runextLMI();\r\n        runextNL();\r\n        ruleCX2();\r\n        if (!flag) runBEjsfn(rname);\r\n        runextLMD();\r\n        runCL('} ;');\r\n        runextNL();\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction ruleCX2 () {\r\n  var rname = \"CX2\" ;\r\n  var rlabel = 0 ;\r\n  ruleCX3();\r\n  if (flag) {\r\n    runTST(':');\r\n    if (flag) {\r\n      runCL('runextCGE(');\r\n      runCI();\r\n      runCL(');');\r\n      runextNL();\r\n      runCL('if (flag) {');\r\n      runextLMI();\r\n      runextNL();\r\n      ruleCX3();\r\n      if (!flag) runBEjsfn(rname);\r\n      runCL('runextCLE(');\r\n      runCI();\r\n      runCL(');');\r\n      runextNL();\r\n      runextLMD();\r\n      runCL('} ;');\r\n      runextNL();\r\n    } ;\r\n    if (!flag) {\r\n      runSET();\r\n      if (flag) {\r\n        runCL('runextCE(');\r\n        runCI();\r\n        runCL(');');\r\n        runextNL();\r\n      } ;\r\n    } ;\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction ruleCX3 () {\r\n  var rname = \"CX3\" ;\r\n  var rlabel = 0 ;\r\n  ruleNUMBER();\r\n  if (flag) {\r\n  } ;\r\n} ;\r\n\r\nfunction rulePREFIX () {\r\n  var rname = \"PREFIX\" ;\r\n  var rlabel = 0 ;\r\n  runSET();\r\n  while (flag) {\r\n    runextCE(32);\r\n    if (!flag) {\r\n      runextCE(9);\r\n    } ;\r\n    if (!flag) {\r\n      runextCE(13);\r\n    } ;\r\n    if (!flag) {\r\n      runextCE(10);\r\n    } ;\r\n    runextSCN();\r\n    };\r\n  runSET();\r\n  if (flag) {\r\n  } ;\r\n} ;\r\n\r\nfunction ruleID () {\r\n  var rname = \"ID\" ;\r\n  var rlabel = 0 ;\r\n  rulePREFIX();\r\n  if (flag) {\r\n    runextTFT();\r\n    runSET();\r\n    if (!flag) return;\r\n    ruleALPHA();\r\n    if (!flag) return;\r\n    runSET();\r\n    while (flag) {\r\n      ruleALPHA();\r\n      if (flag) {\r\n      } ;\r\n      if (!flag) {\r\n        ruleDIGIT();\r\n        if (flag) {\r\n        } ;\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) return;\r\n    runextTFF();\r\n    runSET();\r\n    if (!flag) return;\r\n  } ;\r\n} ;\r\n\r\nfunction ruleNUMBER () {\r\n  var rname = \"NUMBER\" ;\r\n  var rlabel = 0 ;\r\n  rulePREFIX();\r\n  if (flag) {\r\n    runextTFT();\r\n    runSET();\r\n    if (!flag) return;\r\n    ruleDIGIT();\r\n    if (!flag) return;\r\n    runSET();\r\n    while (flag) {\r\n      ruleDIGIT();\r\n      };\r\n    runSET();\r\n    if (!flag) return;\r\n    runextTFF();\r\n    runSET();\r\n    if (!flag) return;\r\n  } ;\r\n} ;\r\n\r\nfunction ruleSTRING () {\r\n  var rname = \"STRING\" ;\r\n  var rlabel = 0 ;\r\n  rulePREFIX();\r\n  if (flag) {\r\n    runextCE(39);\r\n    runextSCN();\r\n    if (!flag) return;\r\n    runextTFT();\r\n    runSET();\r\n    if (!flag) return;\r\n    runSET();\r\n    while (flag) {\r\n      runextCE(13);\r\n      if (!flag) {\r\n        runextCE(10);\r\n      } ;\r\n      if (!flag) {\r\n        runextCE(39);\r\n      } ;\r\n      runextNOT();\r\n      runextSCN();\r\n      };\r\n    runSET();\r\n    if (!flag) return;\r\n    runextTFF();\r\n    runSET();\r\n    if (!flag) return;\r\n    runextCE(39);\r\n    runextSCN();\r\n    if (!flag) return;\r\n  } ;\r\n} ;\r\n\r\nfunction ruleALPHA () {\r\n  var rname = \"ALPHA\" ;\r\n  var rlabel = 0 ;\r\n  runextCGE(65);\r\n  if (flag) {\r\n    runextCLE(90);\r\n  } ;\r\n  if (!flag) {\r\n    runextCGE(97);\r\n    if (flag) {\r\n      runextCLE(122);\r\n    } ;\r\n  } ;\r\n  runextSCN();\r\n  if (flag) {\r\n  } ;\r\n} ;\r\n\r\nfunction ruleDIGIT () {\r\n  var rname = \"DIGIT\" ;\r\n  var rlabel = 0 ;\r\n  runextCGE(48);\r\n  if (flag) {\r\n    runextCLE(57);\r\n  } ;\r\n  runextSCN();\r\n  if (flag) {\r\n  } ;\r\n} ;\r\n\r\n"
    },
    {
        "filename": "c10__use_tokens__c[i12_c09]__m[i12_c10].txt",
        "contents": "\tADR PROGRAM\r\nPROGRAM\r\n\tTST '.SYNTAX'\r\n\tBF L1\r\n\tCLL ID\r\n\tBE\r\n\tLB\r\n\tTB\r\n\tCL 'ADR '\r\n\tCI\r\n\tNL\r\nL2\r\n\tCLL PR\r\n\tBT L2\r\n\tSET\r\n\tBE\r\n\tTST '.TOKENS'\r\n\tBE\r\nL3\r\n\tCLL TR\r\n\tBT L3\r\n\tSET\r\n\tBE\r\n\tTST '.END'\r\n\tBE\r\n\tTB\r\n\tCL 'END'\r\n\tNL\r\nL1\r\nL4\r\n\tR\r\nPR\r\n\tCLL ID\r\n\tBF L5\r\n\tLB\r\n\tCI\r\n\tNL\r\n\tTST '='\r\n\tBE\r\n\tCLL EX1\r\n\tBE\r\n\tTST ';'\r\n\tBE\r\n\tTB\r\n\tCL 'R'\r\n\tNL\r\nL5\r\nL6\r\n\tR\r\nTR\r\n\tCLL ID\r\n\tBF L7\r\n\tLB\r\n\tCI\r\n\tNL\r\n\tTST ':'\r\n\tBE\r\n\tCLL TX1\r\n\tBE\r\n\tTST ';'\r\n\tBE\r\n\tTB\r\n\tCL 'R'\r\n\tNL\r\nL7\r\nL8\r\n\tR\r\nEX1\r\n\tCLL EX2\r\n\tBF L9\r\nL10\r\n\tTST '/'\r\n\tBF L11\r\n\tTB\r\n\tCL 'BT L'\r\n\tGN\r\n\tNL\r\n\tCLL EX2\r\n\tBE\r\nL11\r\nL12\r\n\tBT L10\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tCL 'L'\r\n\tGN\r\n\tNL\r\nL9\r\nL13\r\n\tR\r\nEX2\r\n\tCLL EX3\r\n\tBF L14\r\n\tTB\r\n\tCL 'BF L'\r\n\tGN\r\n\tNL\r\nL14\r\n\tBT L15\r\n\tCLL OUTPUT\r\n\tBF L16\r\nL16\r\nL15\r\n\tBF L17\r\nL18\r\n\tCLL EX3\r\n\tBF L19\r\n\tTB\r\n\tCL 'BE'\r\n\tNL\r\nL19\r\n\tBT L20\r\n\tCLL OUTPUT\r\n\tBF L21\r\nL21\r\nL20\r\n\tBT L18\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tCL 'L'\r\n\tGN\r\n\tNL\r\nL17\r\nL22\r\n\tR\r\nEX3\r\n\tCLL ID\r\n\tBF L23\r\n\tTB\r\n\tCL 'CLL '\r\n\tCI\r\n\tNL\r\nL23\r\n\tBT L24\r\n\tCLL STRING\r\n\tBF L25\r\n\tTB\r\n\tCL 'TST '\r\n\tCC 39\r\n\tCI\r\n\tCC 39\r\n\tNL\r\nL25\r\n\tBT L24\r\n\tTST '('\r\n\tBF L26\r\n\tCLL EX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL26\r\n\tBT L24\r\n\tTST '.EMPTY'\r\n\tBF L27\r\n\tTB\r\n\tCL 'SET'\r\n\tNL\r\nL27\r\n\tBT L24\r\n\tTST '.LITCHR'\r\n\tBF L28\r\n\tTB\r\n\tCL 'LCH'\r\n\tNL\r\nL28\r\n\tBT L24\r\n\tTST '$'\r\n\tBF L29\r\n\tLB\r\n\tCL 'L'\r\n\tGN\r\n\tNL\r\n\tCLL EX3\r\n\tBE\r\n\tTB\r\n\tCL 'BT L'\r\n\tGN\r\n\tNL\r\n\tTB\r\n\tCL 'SET'\r\n\tNL\r\nL29\r\nL24\r\n\tR\r\nOUTPUT\r\n\tTST '.OUT'\r\n\tBF L30\r\n\tTST '('\r\n\tBE\r\nL31\r\n\tCLL OUT1\r\n\tBT L31\r\n\tSET\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL30\r\nL32\r\n\tR\r\nOUT1\r\n\tTST '*'\r\n\tBF L33\r\n\tTB\r\n\tCL 'CI'\r\n\tNL\r\nL33\r\n\tBT L34\r\n\tCLL STRING\r\n\tBF L35\r\n\tTB\r\n\tCL 'CL '\r\n\tCC 39\r\n\tCI\r\n\tCC 39\r\n\tNL\r\nL35\r\n\tBT L34\r\n\tCLL NUMBER\r\n\tBF L36\r\n\tTB\r\n\tCL 'CC '\r\n\tCI\r\n\tNL\r\nL36\r\n\tBT L34\r\n\tTST '#'\r\n\tBF L37\r\n\tTB\r\n\tCL 'GN'\r\n\tNL\r\nL37\r\n\tBT L34\r\n\tTST '.NL'\r\n\tBF L38\r\n\tTB\r\n\tCL 'NL'\r\n\tNL\r\nL38\r\n\tBT L34\r\n\tTST '.LB'\r\n\tBF L39\r\n\tTB\r\n\tCL 'LB'\r\n\tNL\r\nL39\r\n\tBT L34\r\n\tTST '.TB'\r\n\tBF L40\r\n\tTB\r\n\tCL 'TB'\r\n\tNL\r\nL40\r\n\tBT L34\r\n\tTST '.LM+'\r\n\tBF L41\r\n\tTB\r\n\tCL 'LMI'\r\n\tNL\r\nL41\r\n\tBT L34\r\n\tTST '.LM-'\r\n\tBF L42\r\n\tTB\r\n\tCL 'LMD'\r\n\tNL\r\nL42\r\nL34\r\n\tR\r\nTX1\r\n\tCLL TX2\r\n\tBF L43\r\nL44\r\n\tTST '/'\r\n\tBF L45\r\n\tTB\r\n\tCL 'BT T'\r\n\tGN\r\n\tNL\r\n\tCLL TX2\r\n\tBE\r\nL45\r\nL46\r\n\tBT L44\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tCL 'T'\r\n\tGN\r\n\tNL\r\nL43\r\nL47\r\n\tR\r\nTX2\r\n\tCLL TX3\r\n\tBF L48\r\n\tTB\r\n\tCL 'BF T'\r\n\tGN\r\n\tNL\r\nL49\r\n\tCLL TX3\r\n\tBF L50\r\n\tTB\r\n\tCL 'RF'\r\n\tNL\r\nL50\r\nL51\r\n\tBT L49\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tCL 'T'\r\n\tGN\r\n\tNL\r\nL48\r\nL52\r\n\tR\r\nTX3\r\n\tTST '.TOKEN'\r\n\tBF L53\r\n\tTB\r\n\tCL 'TFT'\r\n\tNL\r\nL53\r\n\tBT L54\r\n\tTST '.DELTOK'\r\n\tBF L55\r\n\tTB\r\n\tCL 'TFF'\r\n\tNL\r\nL55\r\n\tBT L54\r\n\tTST '$'\r\n\tBF L56\r\n\tLB\r\n\tCL 'T'\r\n\tGN\r\n\tNL\r\n\tCLL TX3\r\n\tBE\r\n\tTB\r\n\tCL 'BT T'\r\n\tGN\r\n\tNL\r\nL56\r\nL54\r\n\tBF L57\r\n\tTB\r\n\tCL 'SET'\r\n\tNL\r\nL57\r\n\tBT L58\r\n\tTST '.ANYBUT('\r\n\tBF L59\r\n\tCLL CX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\n\tTB\r\n\tCL 'NOT'\r\n\tNL\r\n\tTB\r\n\tCL 'SCN'\r\n\tNL\r\nL59\r\n\tBT L58\r\n\tTST '.ANY('\r\n\tBF L60\r\n\tCLL CX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\n\tTB\r\n\tCL 'SCN'\r\n\tNL\r\nL60\r\n\tBT L58\r\n\tCLL ID\r\n\tBF L61\r\n\tTB\r\n\tCL 'CLL '\r\n\tCI\r\n\tNL\r\nL61\r\n\tBT L58\r\n\tTST '('\r\n\tBF L62\r\n\tCLL TX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL62\r\nL58\r\n\tR\r\nCX1\r\n\tCLL CX2\r\n\tBF L63\r\nL64\r\n\tTST '!'\r\n\tBF L65\r\n\tTB\r\n\tCL 'BT C'\r\n\tGN\r\n\tNL\r\n\tCLL CX2\r\n\tBE\r\nL65\r\nL66\r\n\tBT L64\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tCL 'C'\r\n\tGN\r\n\tNL\r\nL63\r\nL67\r\n\tR\r\nCX2\r\n\tCLL CX3\r\n\tBF L68\r\n\tTST ':'\r\n\tBF L69\r\n\tTB\r\n\tCL 'CGE '\r\n\tCI\r\n\tNL\r\n\tTB\r\n\tCL 'BF D'\r\n\tGN\r\n\tNL\r\n\tCLL CX3\r\n\tBE\r\n\tTB\r\n\tCL 'CLE '\r\n\tCI\r\n\tNL\r\n\tLB\r\n\tCL 'D'\r\n\tGN\r\n\tNL\r\nL69\r\n\tBT L70\r\n\tSET\r\n\tBF L71\r\n\tTB\r\n\tCL 'CE '\r\n\tCI\r\n\tNL\r\nL71\r\nL70\r\n\tBE\r\nL68\r\nL72\r\n\tR\r\nCX3\r\n\tCLL NUMBER\r\n\tBF L73\r\nL73\r\nL74\r\n\tR\r\nPREFIX\r\nT75\r\n\tCE 32\r\n\tBT C76\r\n\tCE 9\r\n\tBT C76\r\n\tCE 13\r\n\tBT C76\r\n\tCE 10\r\nC76\r\n\tSCN\r\n\tBT T75\r\n\tSET\r\n\tBF T77\r\nT77\r\nT78\r\n\tR\r\nID\r\n\tCLL PREFIX\r\n\tBF T79\r\n\tTFT\r\n\tSET\r\n\tRF\r\n\tCLL ALPHA\r\n\tRF\r\nT80\r\n\tCLL ALPHA\r\n\tBF T81\r\nT81\r\n\tBT T82\r\n\tCLL DIGIT\r\n\tBF T83\r\nT83\r\nT82\r\n\tBT T80\r\n\tSET\r\n\tRF\r\n\tTFF\r\n\tSET\r\n\tRF\r\nT79\r\nT84\r\n\tR\r\nNUMBER\r\n\tCLL PREFIX\r\n\tBF T85\r\n\tTFT\r\n\tSET\r\n\tRF\r\n\tCLL DIGIT\r\n\tRF\r\nT86\r\n\tCLL DIGIT\r\n\tBT T86\r\n\tSET\r\n\tRF\r\n\tTFF\r\n\tSET\r\n\tRF\r\nT85\r\nT87\r\n\tR\r\nSTRING\r\n\tCLL PREFIX\r\n\tBF T88\r\n\tCE 39\r\nC89\r\n\tSCN\r\n\tRF\r\n\tTFT\r\n\tSET\r\n\tRF\r\nT90\r\n\tCE 13\r\n\tBT C91\r\n\tCE 10\r\n\tBT C91\r\n\tCE 39\r\nC91\r\n\tNOT\r\n\tSCN\r\n\tBT T90\r\n\tSET\r\n\tRF\r\n\tTFF\r\n\tSET\r\n\tRF\r\n\tCE 39\r\nC92\r\n\tSCN\r\n\tRF\r\nT88\r\nT93\r\n\tR\r\nALPHA\r\n\tCGE 65\r\n\tBF D94\r\n\tCLE 90\r\nD94\r\n\tBT C95\r\n\tCGE 97\r\n\tBF D96\r\n\tCLE 122\r\nD96\r\nC95\r\n\tSCN\r\n\tBF T97\r\nT97\r\nT98\r\n\tR\r\nDIGIT\r\n\tCGE 48\r\n\tBF D99\r\n\tCLE 57\r\nD99\r\nC100\r\n\tSCN\r\n\tBF T101\r\nT101\r\nT102\r\n\tR\r\n\tEND\r\n"
    },
    {
        "filename": "c11jf__accept_comments__c[i13jf_c10jf].txt",
        "contents": "// PROGRAM compiler\r\nfunction compiler (input) {\r\n  inbuf = input ;\r\n  inp = 0 ;\r\n  outbuf = \"\" ;\r\n  margin = 0 ;\r\n  gnlabel = 1 ;\r\n  runextTFF();\r\n  rulePROGRAM() ;\r\n  return outbuf ;\r\n} ;\r\n\r\nfunction rulePROGRAM () {\r\n  var rname = \"PROGRAM\" ;\r\n  var rlabel = 0 ;\r\n  runTST('.SYNTAX');\r\n  if (flag) {\r\n    ruleID();\r\n    if (!flag) runBEjsfn(rname);\r\n    runLB();\r\n    runCL('// ');\r\n    runCI();\r\n    runCL(' compiler');\r\n    runextNL();\r\n    runCL('function compiler (input) {');\r\n    runextLMI();\r\n    runextNL();\r\n    runCL('inbuf = input ;');\r\n    runextNL();\r\n    runCL('inp = 0 ;');\r\n    runextNL();\r\n    runCL('outbuf = \"\" ;');\r\n    runextNL();\r\n    runCL('margin = 0 ;');\r\n    runextNL();\r\n    runCL('gnlabel = 1 ;');\r\n    runextNL();\r\n    runCL('runextTFF();');\r\n    runextNL();\r\n    runCL('rule');\r\n    runCI();\r\n    runCL('() ;');\r\n    runextNL();\r\n    runCL('return outbuf ;');\r\n    runextNL();\r\n    runextLMD();\r\n    runCL('} ;');\r\n    runextNL();\r\n    runextNL();\r\n    runSET();\r\n    while (flag) {\r\n      rulePR();\r\n      if (flag) {\r\n      } ;\r\n      if (!flag) {\r\n        ruleCOMMENT();\r\n        if (flag) {\r\n        } ;\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST('.TOKENS');\r\n    if (!flag) runBEjsfn(rname);\r\n    runSET();\r\n    while (flag) {\r\n      ruleTR();\r\n      if (flag) {\r\n      } ;\r\n      if (!flag) {\r\n        ruleCOMMENT();\r\n        if (flag) {\r\n        } ;\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST('.END');\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction rulePR () {\r\n  var rname = \"PR\" ;\r\n  var rlabel = 0 ;\r\n  ruleID();\r\n  if (flag) {\r\n    runLB();\r\n    runCL('function rule');\r\n    runCI();\r\n    runCL(' () {');\r\n    runextLMI();\r\n    runextNL();\r\n    runCL('var rname = \"');\r\n    runCI();\r\n    runCL('\" ;');\r\n    runextNL();\r\n    runCL('var rlabel = 0 ;');\r\n    runextNL();\r\n    runTST('=');\r\n    if (!flag) runBEjsfn(rname);\r\n    ruleEX1();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST(';');\r\n    if (!flag) runBEjsfn(rname);\r\n    runextLMD();\r\n    runCL('} ;');\r\n    runextNL();\r\n    runextNL();\r\n  } ;\r\n} ;\r\n\r\nfunction ruleTR () {\r\n  var rname = \"TR\" ;\r\n  var rlabel = 0 ;\r\n  ruleID();\r\n  if (flag) {\r\n    runLB();\r\n    runCL('function rule');\r\n    runCI();\r\n    runCL(' () {');\r\n    runextLMI();\r\n    runextNL();\r\n    runCL('var rname = \"');\r\n    runCI();\r\n    runCL('\" ;');\r\n    runextNL();\r\n    runCL('var rlabel = 0 ;');\r\n    runextNL();\r\n    runTST(':');\r\n    if (!flag) runBEjsfn(rname);\r\n    ruleTX1();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST(';');\r\n    if (!flag) runBEjsfn(rname);\r\n    runextLMD();\r\n    runCL('} ;');\r\n    runextNL();\r\n    runextNL();\r\n  } ;\r\n} ;\r\n\r\nfunction ruleCOMMENT () {\r\n  var rname = \"COMMENT\" ;\r\n  var rlabel = 0 ;\r\n  runTST('[');\r\n  if (flag) {\r\n    ruleCMLINE();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST(']');\r\n    if (!flag) runBEjsfn(rname);\r\n    runCL('//');\r\n    runCI();\r\n    runextNL();\r\n  } ;\r\n} ;\r\n\r\nfunction ruleEX1 () {\r\n  var rname = \"EX1\" ;\r\n  var rlabel = 0 ;\r\n  ruleEX2();\r\n  if (flag) {\r\n    runSET();\r\n    while (flag) {\r\n      runTST('/');\r\n      if (flag) {\r\n        runCL('if (!flag) {');\r\n        runextLMI();\r\n        runextNL();\r\n        ruleEX2();\r\n        if (!flag) runBEjsfn(rname);\r\n        runextLMD();\r\n        runCL('} ;');\r\n        runextNL();\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction ruleEX2 () {\r\n  var rname = \"EX2\" ;\r\n  var rlabel = 0 ;\r\n  ruleEX3();\r\n  if (flag) {\r\n    runCL('if (flag) {');\r\n    runextLMI();\r\n    runextNL();\r\n  } ;\r\n  if (!flag) {\r\n    ruleOUTPUT();\r\n    if (flag) {\r\n      runCL('if (true) {');\r\n      runextLMI();\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (flag) {\r\n    runSET();\r\n    while (flag) {\r\n      ruleEX3();\r\n      if (flag) {\r\n        runCL('if (!flag) runBEjsfn(rname);');\r\n        runextNL();\r\n      } ;\r\n      if (!flag) {\r\n        ruleOUTPUT();\r\n        if (flag) {\r\n        } ;\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n    runextLMD();\r\n    runCL('} ;');\r\n    runextNL();\r\n  } ;\r\n} ;\r\n\r\nfunction ruleEX3 () {\r\n  var rname = \"EX3\" ;\r\n  var rlabel = 0 ;\r\n  ruleID();\r\n  if (flag) {\r\n    runCL('rule');\r\n    runCI();\r\n    runCL('();');\r\n    runextNL();\r\n  } ;\r\n  if (!flag) {\r\n    ruleSTRING();\r\n    if (flag) {\r\n      runCL('runTST(');\r\n      runextCC(39);\r\n      runCI();\r\n      runextCC(39);\r\n      runCL(');');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('(');\r\n    if (flag) {\r\n      ruleEX1();\r\n      if (!flag) runBEjsfn(rname);\r\n      runTST(')');\r\n      if (!flag) runBEjsfn(rname);\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.EMPTY');\r\n    if (flag) {\r\n      runCL('runSET();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.LITCHR');\r\n    if (flag) {\r\n      runCL('runextLCH();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('$');\r\n    if (flag) {\r\n      runCL('runSET();');\r\n      runextNL();\r\n      runCL('while (flag) {');\r\n      runextLMI();\r\n      runextNL();\r\n      ruleEX3();\r\n      if (!flag) runBEjsfn(rname);\r\n      runCL('};');\r\n      runextLMD();\r\n      runextNL();\r\n      runCL('runSET();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n} ;\r\n\r\nfunction ruleOUTPUT () {\r\n  var rname = \"OUTPUT\" ;\r\n  var rlabel = 0 ;\r\n  runTST('.OUT');\r\n  if (flag) {\r\n    runTST('(');\r\n    if (!flag) runBEjsfn(rname);\r\n    runSET();\r\n    while (flag) {\r\n      ruleOUT1();\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST(')');\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction ruleOUT1 () {\r\n  var rname = \"OUT1\" ;\r\n  var rlabel = 0 ;\r\n  runTST('*');\r\n  if (flag) {\r\n    runCL('runCI();');\r\n    runextNL();\r\n  } ;\r\n  if (!flag) {\r\n    ruleSTRING();\r\n    if (flag) {\r\n      runCL('runCL(');\r\n      runextCC(39);\r\n      runCI();\r\n      runextCC(39);\r\n      runCL(');');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    ruleNUMBER();\r\n    if (flag) {\r\n      runCL('runextCC(');\r\n      runCI();\r\n      runCL(');');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('#');\r\n    if (flag) {\r\n      runCL('if (rlabel == 0) { rlabel = gnlabel; gnlabel++ ; } ;');\r\n      runextNL();\r\n      runCL('runCL(rlabel.toString());');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.NL');\r\n    if (flag) {\r\n      runCL('runextNL();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.LB');\r\n    if (flag) {\r\n      runCL('runLB();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.TB');\r\n    if (flag) {\r\n      runCL('runextTB();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.LM+');\r\n    if (flag) {\r\n      runCL('runextLMI();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.LM-');\r\n    if (flag) {\r\n      runCL('runextLMD();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n} ;\r\n\r\nfunction ruleTX1 () {\r\n  var rname = \"TX1\" ;\r\n  var rlabel = 0 ;\r\n  ruleTX2();\r\n  if (flag) {\r\n    runSET();\r\n    while (flag) {\r\n      runTST('/');\r\n      if (flag) {\r\n        runCL('if (!flag) {');\r\n        runextLMI();\r\n        runextNL();\r\n        ruleTX2();\r\n        if (!flag) runBEjsfn(rname);\r\n        runextLMD();\r\n        runCL('} ;');\r\n        runextNL();\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction ruleTX2 () {\r\n  var rname = \"TX2\" ;\r\n  var rlabel = 0 ;\r\n  ruleTX3();\r\n  if (flag) {\r\n    runCL('if (flag) {');\r\n    runextLMI();\r\n    runextNL();\r\n    runSET();\r\n    while (flag) {\r\n      ruleTX3();\r\n      if (flag) {\r\n        runCL('if (!flag) return;');\r\n        runextNL();\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n    runextLMD();\r\n    runCL('} ;');\r\n    runextNL();\r\n  } ;\r\n} ;\r\n\r\nfunction ruleTX3 () {\r\n  var rname = \"TX3\" ;\r\n  var rlabel = 0 ;\r\n  runTST('.TOKEN');\r\n  if (flag) {\r\n    runCL('runextTFT();');\r\n    runextNL();\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.DELTOK');\r\n    if (flag) {\r\n      runCL('runextTFF();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('$');\r\n    if (flag) {\r\n      runCL('runSET();');\r\n      runextNL();\r\n      runCL('while (flag) {');\r\n      runextLMI();\r\n      runextNL();\r\n      ruleTX3();\r\n      if (!flag) runBEjsfn(rname);\r\n      runCL('};');\r\n      runextLMD();\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (flag) {\r\n    runCL('runSET();');\r\n    runextNL();\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.ANYBUT(');\r\n    if (flag) {\r\n      ruleCX1();\r\n      if (!flag) runBEjsfn(rname);\r\n      runTST(')');\r\n      if (!flag) runBEjsfn(rname);\r\n      runCL('runextNOT();');\r\n      runextNL();\r\n      runCL('runextSCN();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.ANY(');\r\n    if (flag) {\r\n      ruleCX1();\r\n      if (!flag) runBEjsfn(rname);\r\n      runTST(')');\r\n      if (!flag) runBEjsfn(rname);\r\n      runCL('runextSCN();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    ruleID();\r\n    if (flag) {\r\n      runCL('rule');\r\n      runCI();\r\n      runCL('();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('(');\r\n    if (flag) {\r\n      ruleTX1();\r\n      if (!flag) runBEjsfn(rname);\r\n      runTST(')');\r\n      if (!flag) runBEjsfn(rname);\r\n    } ;\r\n  } ;\r\n} ;\r\n\r\nfunction ruleCX1 () {\r\n  var rname = \"CX1\" ;\r\n  var rlabel = 0 ;\r\n  ruleCX2();\r\n  if (flag) {\r\n    runSET();\r\n    while (flag) {\r\n      runTST('!');\r\n      if (flag) {\r\n        runCL('if (!flag) {');\r\n        runextLMI();\r\n        runextNL();\r\n        ruleCX2();\r\n        if (!flag) runBEjsfn(rname);\r\n        runextLMD();\r\n        runCL('} ;');\r\n        runextNL();\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction ruleCX2 () {\r\n  var rname = \"CX2\" ;\r\n  var rlabel = 0 ;\r\n  ruleCX3();\r\n  if (flag) {\r\n    runTST(':');\r\n    if (flag) {\r\n      runCL('runextCGE(');\r\n      runCI();\r\n      runCL(');');\r\n      runextNL();\r\n      runCL('if (flag) {');\r\n      runextLMI();\r\n      runextNL();\r\n      ruleCX3();\r\n      if (!flag) runBEjsfn(rname);\r\n      runCL('runextCLE(');\r\n      runCI();\r\n      runCL(');');\r\n      runextNL();\r\n      runextLMD();\r\n      runCL('} ;');\r\n      runextNL();\r\n    } ;\r\n    if (!flag) {\r\n      runSET();\r\n      if (flag) {\r\n        runCL('runextCE(');\r\n        runCI();\r\n        runCL(');');\r\n        runextNL();\r\n      } ;\r\n    } ;\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction ruleCX3 () {\r\n  var rname = \"CX3\" ;\r\n  var rlabel = 0 ;\r\n  ruleNUMBER();\r\n  if (flag) {\r\n  } ;\r\n  if (!flag) {\r\n    ruleSQUOTE();\r\n    if (flag) {\r\n      runextLCH();\r\n      if (!flag) runBEjsfn(rname);\r\n    } ;\r\n  } ;\r\n} ;\r\n\r\nfunction rulePREFIX () {\r\n  var rname = \"PREFIX\" ;\r\n  var rlabel = 0 ;\r\n  runSET();\r\n  while (flag) {\r\n    runextCE(32);\r\n    if (!flag) {\r\n      runextCE(9);\r\n    } ;\r\n    if (!flag) {\r\n      runextCE(13);\r\n    } ;\r\n    if (!flag) {\r\n      runextCE(10);\r\n    } ;\r\n    runextSCN();\r\n    };\r\n  runSET();\r\n  if (flag) {\r\n  } ;\r\n} ;\r\n\r\nfunction ruleID () {\r\n  var rname = \"ID\" ;\r\n  var rlabel = 0 ;\r\n  rulePREFIX();\r\n  if (flag) {\r\n    runextTFT();\r\n    runSET();\r\n    if (!flag) return;\r\n    ruleALPHA();\r\n    if (!flag) return;\r\n    runSET();\r\n    while (flag) {\r\n      ruleALPHA();\r\n      if (flag) {\r\n      } ;\r\n      if (!flag) {\r\n        ruleDIGIT();\r\n        if (flag) {\r\n        } ;\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) return;\r\n    runextTFF();\r\n    runSET();\r\n    if (!flag) return;\r\n  } ;\r\n} ;\r\n\r\nfunction ruleNUMBER () {\r\n  var rname = \"NUMBER\" ;\r\n  var rlabel = 0 ;\r\n  rulePREFIX();\r\n  if (flag) {\r\n    runextTFT();\r\n    runSET();\r\n    if (!flag) return;\r\n    ruleDIGIT();\r\n    if (!flag) return;\r\n    runSET();\r\n    while (flag) {\r\n      ruleDIGIT();\r\n      };\r\n    runSET();\r\n    if (!flag) return;\r\n    runextTFF();\r\n    runSET();\r\n    if (!flag) return;\r\n  } ;\r\n} ;\r\n\r\nfunction ruleSTRING () {\r\n  var rname = \"STRING\" ;\r\n  var rlabel = 0 ;\r\n  rulePREFIX();\r\n  if (flag) {\r\n    runextCE(39);\r\n    runextSCN();\r\n    if (!flag) return;\r\n    runextTFT();\r\n    runSET();\r\n    if (!flag) return;\r\n    runSET();\r\n    while (flag) {\r\n      runextCE(13);\r\n      if (!flag) {\r\n        runextCE(10);\r\n      } ;\r\n      if (!flag) {\r\n        runextCE(39);\r\n      } ;\r\n      runextNOT();\r\n      runextSCN();\r\n      };\r\n    runSET();\r\n    if (!flag) return;\r\n    runextTFF();\r\n    runSET();\r\n    if (!flag) return;\r\n    runextCE(39);\r\n    runextSCN();\r\n    if (!flag) return;\r\n  } ;\r\n} ;\r\n\r\nfunction ruleALPHA () {\r\n  var rname = \"ALPHA\" ;\r\n  var rlabel = 0 ;\r\n  runextCGE(65);\r\n  if (flag) {\r\n    runextCLE(90);\r\n  } ;\r\n  if (!flag) {\r\n    runextCGE(97);\r\n    if (flag) {\r\n      runextCLE(122);\r\n    } ;\r\n  } ;\r\n  runextSCN();\r\n  if (flag) {\r\n  } ;\r\n} ;\r\n\r\nfunction ruleDIGIT () {\r\n  var rname = \"DIGIT\" ;\r\n  var rlabel = 0 ;\r\n  runextCGE(48);\r\n  if (flag) {\r\n    runextCLE(57);\r\n  } ;\r\n  runextSCN();\r\n  if (flag) {\r\n  } ;\r\n} ;\r\n\r\nfunction ruleSQUOTE () {\r\n  var rname = \"SQUOTE\" ;\r\n  var rlabel = 0 ;\r\n  rulePREFIX();\r\n  if (flag) {\r\n    runextCE(39);\r\n    runextSCN();\r\n    if (!flag) return;\r\n  } ;\r\n} ;\r\n\r\nfunction ruleCMLINE () {\r\n  var rname = \"CMLINE\" ;\r\n  var rlabel = 0 ;\r\n  runextTFT();\r\n  runSET();\r\n  if (flag) {\r\n    runSET();\r\n    while (flag) {\r\n      runextCE(10);\r\n      if (!flag) {\r\n        runextCE(13);\r\n      } ;\r\n      if (!flag) {\r\n        runextCE(93);\r\n      } ;\r\n      runextNOT();\r\n      runextSCN();\r\n      };\r\n    runSET();\r\n    if (!flag) return;\r\n    runextTFF();\r\n    runSET();\r\n    if (!flag) return;\r\n  } ;\r\n} ;\r\n\r\n"
    },
    {
        "filename": "c11__accept_comments__c[i13_c10].txt",
        "contents": "\tADR PROGRAM\r\nPROGRAM\r\n\tTST '.SYNTAX'\r\n\tBF L1\r\n\tCLL ID\r\n\tBE\r\n\tLB\r\n\tTB\r\n\tCL 'ADR '\r\n\tCI\r\n\tNL\r\nL2\r\n\tCLL PR\r\n\tBF L3\r\nL3\r\n\tBT L4\r\n\tCLL COMMENT\r\n\tBF L5\r\nL5\r\nL4\r\n\tBT L2\r\n\tSET\r\n\tBE\r\n\tTST '.TOKENS'\r\n\tBE\r\nL6\r\n\tCLL TR\r\n\tBF L7\r\nL7\r\n\tBT L8\r\n\tCLL COMMENT\r\n\tBF L9\r\nL9\r\nL8\r\n\tBT L6\r\n\tSET\r\n\tBE\r\n\tTST '.END'\r\n\tBE\r\n\tTB\r\n\tCL 'END'\r\n\tNL\r\nL1\r\nL10\r\n\tR\r\nPR\r\n\tCLL ID\r\n\tBF L11\r\n\tLB\r\n\tCI\r\n\tNL\r\n\tTST '='\r\n\tBE\r\n\tCLL EX1\r\n\tBE\r\n\tTST ';'\r\n\tBE\r\n\tTB\r\n\tCL 'R'\r\n\tNL\r\nL11\r\nL12\r\n\tR\r\nTR\r\n\tCLL ID\r\n\tBF L13\r\n\tLB\r\n\tCI\r\n\tNL\r\n\tTST ':'\r\n\tBE\r\n\tCLL TX1\r\n\tBE\r\n\tTST ';'\r\n\tBE\r\n\tTB\r\n\tCL 'R'\r\n\tNL\r\nL13\r\nL14\r\n\tR\r\nCOMMENT\r\n\tTST '['\r\n\tBF L15\r\n\tCLL CMLINE\r\n\tBE\r\n\tTST ']'\r\n\tBE\r\n\tLB\r\n\tCL ';'\r\n\tCI\r\n\tNL\r\nL15\r\nL16\r\n\tR\r\nEX1\r\n\tCLL EX2\r\n\tBF L17\r\nL18\r\n\tTST '/'\r\n\tBF L19\r\n\tTB\r\n\tCL 'BT L'\r\n\tGN\r\n\tNL\r\n\tCLL EX2\r\n\tBE\r\nL19\r\nL20\r\n\tBT L18\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tCL 'L'\r\n\tGN\r\n\tNL\r\nL17\r\nL21\r\n\tR\r\nEX2\r\n\tCLL EX3\r\n\tBF L22\r\n\tTB\r\n\tCL 'BF L'\r\n\tGN\r\n\tNL\r\nL22\r\n\tBT L23\r\n\tCLL OUTPUT\r\n\tBF L24\r\nL24\r\nL23\r\n\tBF L25\r\nL26\r\n\tCLL EX3\r\n\tBF L27\r\n\tTB\r\n\tCL 'BE'\r\n\tNL\r\nL27\r\n\tBT L28\r\n\tCLL OUTPUT\r\n\tBF L29\r\nL29\r\nL28\r\n\tBT L26\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tCL 'L'\r\n\tGN\r\n\tNL\r\nL25\r\nL30\r\n\tR\r\nEX3\r\n\tCLL ID\r\n\tBF L31\r\n\tTB\r\n\tCL 'CLL '\r\n\tCI\r\n\tNL\r\nL31\r\n\tBT L32\r\n\tCLL STRING\r\n\tBF L33\r\n\tTB\r\n\tCL 'TST '\r\n\tCC 39\r\n\tCI\r\n\tCC 39\r\n\tNL\r\nL33\r\n\tBT L32\r\n\tTST '('\r\n\tBF L34\r\n\tCLL EX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL34\r\n\tBT L32\r\n\tTST '.EMPTY'\r\n\tBF L35\r\n\tTB\r\n\tCL 'SET'\r\n\tNL\r\nL35\r\n\tBT L32\r\n\tTST '.LITCHR'\r\n\tBF L36\r\n\tTB\r\n\tCL 'LCH'\r\n\tNL\r\nL36\r\n\tBT L32\r\n\tTST '$'\r\n\tBF L37\r\n\tLB\r\n\tCL 'L'\r\n\tGN\r\n\tNL\r\n\tCLL EX3\r\n\tBE\r\n\tTB\r\n\tCL 'BT L'\r\n\tGN\r\n\tNL\r\n\tTB\r\n\tCL 'SET'\r\n\tNL\r\nL37\r\nL32\r\n\tR\r\nOUTPUT\r\n\tTST '.OUT'\r\n\tBF L38\r\n\tTST '('\r\n\tBE\r\nL39\r\n\tCLL OUT1\r\n\tBT L39\r\n\tSET\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL38\r\nL40\r\n\tR\r\nOUT1\r\n\tTST '*'\r\n\tBF L41\r\n\tTB\r\n\tCL 'CI'\r\n\tNL\r\nL41\r\n\tBT L42\r\n\tCLL STRING\r\n\tBF L43\r\n\tTB\r\n\tCL 'CL '\r\n\tCC 39\r\n\tCI\r\n\tCC 39\r\n\tNL\r\nL43\r\n\tBT L42\r\n\tCLL NUMBER\r\n\tBF L44\r\n\tTB\r\n\tCL 'CC '\r\n\tCI\r\n\tNL\r\nL44\r\n\tBT L42\r\n\tTST '#'\r\n\tBF L45\r\n\tTB\r\n\tCL 'GN'\r\n\tNL\r\nL45\r\n\tBT L42\r\n\tTST '.NL'\r\n\tBF L46\r\n\tTB\r\n\tCL 'NL'\r\n\tNL\r\nL46\r\n\tBT L42\r\n\tTST '.LB'\r\n\tBF L47\r\n\tTB\r\n\tCL 'LB'\r\n\tNL\r\nL47\r\n\tBT L42\r\n\tTST '.TB'\r\n\tBF L48\r\n\tTB\r\n\tCL 'TB'\r\n\tNL\r\nL48\r\n\tBT L42\r\n\tTST '.LM+'\r\n\tBF L49\r\n\tTB\r\n\tCL 'LMI'\r\n\tNL\r\nL49\r\n\tBT L42\r\n\tTST '.LM-'\r\n\tBF L50\r\n\tTB\r\n\tCL 'LMD'\r\n\tNL\r\nL50\r\nL42\r\n\tR\r\nTX1\r\n\tCLL TX2\r\n\tBF L51\r\nL52\r\n\tTST '/'\r\n\tBF L53\r\n\tTB\r\n\tCL 'BT T'\r\n\tGN\r\n\tNL\r\n\tCLL TX2\r\n\tBE\r\nL53\r\nL54\r\n\tBT L52\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tCL 'T'\r\n\tGN\r\n\tNL\r\nL51\r\nL55\r\n\tR\r\nTX2\r\n\tCLL TX3\r\n\tBF L56\r\n\tTB\r\n\tCL 'BF T'\r\n\tGN\r\n\tNL\r\nL57\r\n\tCLL TX3\r\n\tBF L58\r\n\tTB\r\n\tCL 'RF'\r\n\tNL\r\nL58\r\nL59\r\n\tBT L57\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tCL 'T'\r\n\tGN\r\n\tNL\r\nL56\r\nL60\r\n\tR\r\nTX3\r\n\tTST '.TOKEN'\r\n\tBF L61\r\n\tTB\r\n\tCL 'TFT'\r\n\tNL\r\nL61\r\n\tBT L62\r\n\tTST '.DELTOK'\r\n\tBF L63\r\n\tTB\r\n\tCL 'TFF'\r\n\tNL\r\nL63\r\n\tBT L62\r\n\tTST '$'\r\n\tBF L64\r\n\tLB\r\n\tCL 'T'\r\n\tGN\r\n\tNL\r\n\tCLL TX3\r\n\tBE\r\n\tTB\r\n\tCL 'BT T'\r\n\tGN\r\n\tNL\r\nL64\r\nL62\r\n\tBF L65\r\n\tTB\r\n\tCL 'SET'\r\n\tNL\r\nL65\r\n\tBT L66\r\n\tTST '.ANYBUT('\r\n\tBF L67\r\n\tCLL CX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\n\tTB\r\n\tCL 'NOT'\r\n\tNL\r\n\tTB\r\n\tCL 'SCN'\r\n\tNL\r\nL67\r\n\tBT L66\r\n\tTST '.ANY('\r\n\tBF L68\r\n\tCLL CX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\n\tTB\r\n\tCL 'SCN'\r\n\tNL\r\nL68\r\n\tBT L66\r\n\tCLL ID\r\n\tBF L69\r\n\tTB\r\n\tCL 'CLL '\r\n\tCI\r\n\tNL\r\nL69\r\n\tBT L66\r\n\tTST '('\r\n\tBF L70\r\n\tCLL TX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL70\r\nL66\r\n\tR\r\nCX1\r\n\tCLL CX2\r\n\tBF L71\r\nL72\r\n\tTST '!'\r\n\tBF L73\r\n\tTB\r\n\tCL 'BT C'\r\n\tGN\r\n\tNL\r\n\tCLL CX2\r\n\tBE\r\nL73\r\nL74\r\n\tBT L72\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tCL 'C'\r\n\tGN\r\n\tNL\r\nL71\r\nL75\r\n\tR\r\nCX2\r\n\tCLL CX3\r\n\tBF L76\r\n\tTST ':'\r\n\tBF L77\r\n\tTB\r\n\tCL 'CGE '\r\n\tCI\r\n\tNL\r\n\tTB\r\n\tCL 'BF D'\r\n\tGN\r\n\tNL\r\n\tCLL CX3\r\n\tBE\r\n\tTB\r\n\tCL 'CLE '\r\n\tCI\r\n\tNL\r\n\tLB\r\n\tCL 'D'\r\n\tGN\r\n\tNL\r\nL77\r\n\tBT L78\r\n\tSET\r\n\tBF L79\r\n\tTB\r\n\tCL 'CE '\r\n\tCI\r\n\tNL\r\nL79\r\nL78\r\n\tBE\r\nL76\r\nL80\r\n\tR\r\nCX3\r\n\tCLL NUMBER\r\n\tBF L81\r\nL81\r\n\tBT L82\r\n\tCLL SQUOTE\r\n\tBF L83\r\n\tLCH\r\n\tBE\r\nL83\r\nL82\r\n\tR\r\nPREFIX\r\nT84\r\n\tCE 32\r\n\tBT C85\r\n\tCE 9\r\n\tBT C85\r\n\tCE 13\r\n\tBT C85\r\n\tCE 10\r\nC85\r\n\tSCN\r\n\tBT T84\r\n\tSET\r\n\tBF T86\r\nT86\r\nT87\r\n\tR\r\nID\r\n\tCLL PREFIX\r\n\tBF T88\r\n\tTFT\r\n\tSET\r\n\tRF\r\n\tCLL ALPHA\r\n\tRF\r\nT89\r\n\tCLL ALPHA\r\n\tBF T90\r\nT90\r\n\tBT T91\r\n\tCLL DIGIT\r\n\tBF T92\r\nT92\r\nT91\r\n\tBT T89\r\n\tSET\r\n\tRF\r\n\tTFF\r\n\tSET\r\n\tRF\r\nT88\r\nT93\r\n\tR\r\nNUMBER\r\n\tCLL PREFIX\r\n\tBF T94\r\n\tTFT\r\n\tSET\r\n\tRF\r\n\tCLL DIGIT\r\n\tRF\r\nT95\r\n\tCLL DIGIT\r\n\tBT T95\r\n\tSET\r\n\tRF\r\n\tTFF\r\n\tSET\r\n\tRF\r\nT94\r\nT96\r\n\tR\r\nSTRING\r\n\tCLL PREFIX\r\n\tBF T97\r\n\tCE 39\r\nC98\r\n\tSCN\r\n\tRF\r\n\tTFT\r\n\tSET\r\n\tRF\r\nT99\r\n\tCE 13\r\n\tBT C100\r\n\tCE 10\r\n\tBT C100\r\n\tCE 39\r\nC100\r\n\tNOT\r\n\tSCN\r\n\tBT T99\r\n\tSET\r\n\tRF\r\n\tTFF\r\n\tSET\r\n\tRF\r\n\tCE 39\r\nC101\r\n\tSCN\r\n\tRF\r\nT97\r\nT102\r\n\tR\r\nALPHA\r\n\tCGE 65\r\n\tBF D103\r\n\tCLE 90\r\nD103\r\n\tBT C104\r\n\tCGE 97\r\n\tBF D105\r\n\tCLE 122\r\nD105\r\nC104\r\n\tSCN\r\n\tBF T106\r\nT106\r\nT107\r\n\tR\r\nDIGIT\r\n\tCGE 48\r\n\tBF D108\r\n\tCLE 57\r\nD108\r\nC109\r\n\tSCN\r\n\tBF T110\r\nT110\r\nT111\r\n\tR\r\nSQUOTE\r\n\tCLL PREFIX\r\n\tBF T112\r\n\tCE 39\r\nC113\r\n\tSCN\r\n\tRF\r\nT112\r\nT114\r\n\tR\r\nCMLINE\r\n\tTFT\r\n\tSET\r\n\tBF T115\r\nT116\r\n\tCE 10\r\n\tBT C117\r\n\tCE 13\r\n\tBT C117\r\n\tCE 93\r\nC117\r\n\tNOT\r\n\tSCN\r\n\tBT T116\r\n\tSET\r\n\tRF\r\n\tTFF\r\n\tSET\r\n\tRF\r\nT115\r\nT118\r\n\tR\r\n\tEND\r\n"
    },
    {
        "filename": "c12jf__use_comments__c[i14jf_c11jf]__m[i14jf_c12jf].txt",
        "contents": "// PROGRAM compiler\r\nfunction compiler (input) {\r\n  inbuf = input ;\r\n  inp = 0 ;\r\n  outbuf = \"\" ;\r\n  margin = 0 ;\r\n  gnlabel = 1 ;\r\n  runextTFF();\r\n  rulePROGRAM() ;\r\n  return outbuf ;\r\n} ;\r\n\r\n// Example Metacompiler Definition \r\n// javascript function version \r\n// James M. Neighbors \r\n// body of compiler definition \r\nfunction rulePROGRAM () {\r\n  var rname = \"PROGRAM\" ;\r\n  var rlabel = 0 ;\r\n  runTST('.SYNTAX');\r\n  if (flag) {\r\n    ruleID();\r\n    if (!flag) runBEjsfn(rname);\r\n    runLB();\r\n    runCL('// ');\r\n    runCI();\r\n    runCL(' compiler');\r\n    runextNL();\r\n    runCL('function compiler (input) {');\r\n    runextLMI();\r\n    runextNL();\r\n    runCL('inbuf = input ;');\r\n    runextNL();\r\n    runCL('inp = 0 ;');\r\n    runextNL();\r\n    runCL('outbuf = \"\" ;');\r\n    runextNL();\r\n    runCL('margin = 0 ;');\r\n    runextNL();\r\n    runCL('gnlabel = 1 ;');\r\n    runextNL();\r\n    runCL('runextTFF();');\r\n    runextNL();\r\n    runCL('rule');\r\n    runCI();\r\n    runCL('() ;');\r\n    runextNL();\r\n    runCL('return outbuf ;');\r\n    runextNL();\r\n    runextLMD();\r\n    runCL('} ;');\r\n    runextNL();\r\n    runextNL();\r\n    runSET();\r\n    while (flag) {\r\n      rulePR();\r\n      if (flag) {\r\n      } ;\r\n      if (!flag) {\r\n        ruleCOMMENT();\r\n        if (flag) {\r\n        } ;\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST('.TOKENS');\r\n    if (!flag) runBEjsfn(rname);\r\n    runSET();\r\n    while (flag) {\r\n      ruleTR();\r\n      if (flag) {\r\n      } ;\r\n      if (!flag) {\r\n        ruleCOMMENT();\r\n        if (flag) {\r\n        } ;\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST('.END');\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\n// parsing rule definition \r\nfunction rulePR () {\r\n  var rname = \"PR\" ;\r\n  var rlabel = 0 ;\r\n  ruleID();\r\n  if (flag) {\r\n    runLB();\r\n    runCL('function rule');\r\n    runCI();\r\n    runCL(' () {');\r\n    runextLMI();\r\n    runextNL();\r\n    runCL('var rname = \"');\r\n    runCI();\r\n    runCL('\" ;');\r\n    runextNL();\r\n    runCL('var rlabel = 0 ;');\r\n    runextNL();\r\n    runTST('=');\r\n    if (!flag) runBEjsfn(rname);\r\n    ruleEX1();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST(';');\r\n    if (!flag) runBEjsfn(rname);\r\n    runextLMD();\r\n    runCL('} ;');\r\n    runextNL();\r\n    runextNL();\r\n  } ;\r\n} ;\r\n\r\n// token rule definition \r\nfunction ruleTR () {\r\n  var rname = \"TR\" ;\r\n  var rlabel = 0 ;\r\n  ruleID();\r\n  if (flag) {\r\n    runLB();\r\n    runCL('function rule');\r\n    runCI();\r\n    runCL(' () {');\r\n    runextLMI();\r\n    runextNL();\r\n    runCL('var rname = \"');\r\n    runCI();\r\n    runCL('\" ;');\r\n    runextNL();\r\n    runCL('var rlabel = 0 ;');\r\n    runextNL();\r\n    runTST(':');\r\n    if (!flag) runBEjsfn(rname);\r\n    ruleTX1();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST(';');\r\n    if (!flag) runBEjsfn(rname);\r\n    runextLMD();\r\n    runCL('} ;');\r\n    runextNL();\r\n    runextNL();\r\n  } ;\r\n} ;\r\n\r\n// comment definition \r\nfunction ruleCOMMENT () {\r\n  var rname = \"COMMENT\" ;\r\n  var rlabel = 0 ;\r\n  runTST('[');\r\n  if (flag) {\r\n    ruleCMLINE();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST(']');\r\n    if (!flag) runBEjsfn(rname);\r\n    runCL('//');\r\n    runCI();\r\n    runextNL();\r\n  } ;\r\n} ;\r\n\r\n// parsing expressions \r\nfunction ruleEX1 () {\r\n  var rname = \"EX1\" ;\r\n  var rlabel = 0 ;\r\n  ruleEX2();\r\n  if (flag) {\r\n    runSET();\r\n    while (flag) {\r\n      runTST('/');\r\n      if (flag) {\r\n        runCL('if (!flag) {');\r\n        runextLMI();\r\n        runextNL();\r\n        ruleEX2();\r\n        if (!flag) runBEjsfn(rname);\r\n        runextLMD();\r\n        runCL('} ;');\r\n        runextNL();\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction ruleEX2 () {\r\n  var rname = \"EX2\" ;\r\n  var rlabel = 0 ;\r\n  ruleEX3();\r\n  if (flag) {\r\n    runCL('if (flag) {');\r\n    runextLMI();\r\n    runextNL();\r\n  } ;\r\n  if (!flag) {\r\n    ruleOUTPUT();\r\n    if (flag) {\r\n      runCL('if (true) {');\r\n      runextLMI();\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (flag) {\r\n    runSET();\r\n    while (flag) {\r\n      ruleEX3();\r\n      if (flag) {\r\n        runCL('if (!flag) runBEjsfn(rname);');\r\n        runextNL();\r\n      } ;\r\n      if (!flag) {\r\n        ruleOUTPUT();\r\n        if (flag) {\r\n        } ;\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n    runextLMD();\r\n    runCL('} ;');\r\n    runextNL();\r\n  } ;\r\n} ;\r\n\r\nfunction ruleEX3 () {\r\n  var rname = \"EX3\" ;\r\n  var rlabel = 0 ;\r\n  ruleID();\r\n  if (flag) {\r\n    runCL('rule');\r\n    runCI();\r\n    runCL('();');\r\n    runextNL();\r\n  } ;\r\n  if (!flag) {\r\n    ruleSTRING();\r\n    if (flag) {\r\n      runCL('runTST(');\r\n      runextCC(39);\r\n      runCI();\r\n      runextCC(39);\r\n      runCL(');');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('(');\r\n    if (flag) {\r\n      ruleEX1();\r\n      if (!flag) runBEjsfn(rname);\r\n      runTST(')');\r\n      if (!flag) runBEjsfn(rname);\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.EMPTY');\r\n    if (flag) {\r\n      runCL('runSET();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.LITCHR');\r\n    if (flag) {\r\n      runCL('runextLCH();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('$');\r\n    if (flag) {\r\n      runCL('runSET();');\r\n      runextNL();\r\n      runCL('while (flag) {');\r\n      runextLMI();\r\n      runextNL();\r\n      ruleEX3();\r\n      if (!flag) runBEjsfn(rname);\r\n      runCL('};');\r\n      runextLMD();\r\n      runextNL();\r\n      runCL('runSET();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n} ;\r\n\r\n// output expressions \r\nfunction ruleOUTPUT () {\r\n  var rname = \"OUTPUT\" ;\r\n  var rlabel = 0 ;\r\n  runTST('.OUT');\r\n  if (flag) {\r\n    runTST('(');\r\n    if (!flag) runBEjsfn(rname);\r\n    runSET();\r\n    while (flag) {\r\n      ruleOUT1();\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n    runTST(')');\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction ruleOUT1 () {\r\n  var rname = \"OUT1\" ;\r\n  var rlabel = 0 ;\r\n  runTST('*');\r\n  if (flag) {\r\n    runCL('runCI();');\r\n    runextNL();\r\n  } ;\r\n  if (!flag) {\r\n    ruleSTRING();\r\n    if (flag) {\r\n      runCL('runCL(');\r\n      runextCC(39);\r\n      runCI();\r\n      runextCC(39);\r\n      runCL(');');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    ruleNUMBER();\r\n    if (flag) {\r\n      runCL('runextCC(');\r\n      runCI();\r\n      runCL(');');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('#');\r\n    if (flag) {\r\n      runCL('if (rlabel == 0) { rlabel = gnlabel; gnlabel++ ; } ;');\r\n      runextNL();\r\n      runCL('runCL(rlabel.toString());');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.NL');\r\n    if (flag) {\r\n      runCL('runextNL();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.LB');\r\n    if (flag) {\r\n      runCL('runLB();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.TB');\r\n    if (flag) {\r\n      runCL('runextTB();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.LM+');\r\n    if (flag) {\r\n      runCL('runextLMI();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.LM-');\r\n    if (flag) {\r\n      runCL('runextLMD();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n} ;\r\n\r\n// token expressions \r\nfunction ruleTX1 () {\r\n  var rname = \"TX1\" ;\r\n  var rlabel = 0 ;\r\n  ruleTX2();\r\n  if (flag) {\r\n    runSET();\r\n    while (flag) {\r\n      runTST('/');\r\n      if (flag) {\r\n        runCL('if (!flag) {');\r\n        runextLMI();\r\n        runextNL();\r\n        ruleTX2();\r\n        if (!flag) runBEjsfn(rname);\r\n        runextLMD();\r\n        runCL('} ;');\r\n        runextNL();\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction ruleTX2 () {\r\n  var rname = \"TX2\" ;\r\n  var rlabel = 0 ;\r\n  ruleTX3();\r\n  if (flag) {\r\n    runCL('if (flag) {');\r\n    runextLMI();\r\n    runextNL();\r\n    runSET();\r\n    while (flag) {\r\n      ruleTX3();\r\n      if (flag) {\r\n        runCL('if (!flag) return;');\r\n        runextNL();\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n    runextLMD();\r\n    runCL('} ;');\r\n    runextNL();\r\n  } ;\r\n} ;\r\n\r\nfunction ruleTX3 () {\r\n  var rname = \"TX3\" ;\r\n  var rlabel = 0 ;\r\n  runTST('.TOKEN');\r\n  if (flag) {\r\n    runCL('runextTFT();');\r\n    runextNL();\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.DELTOK');\r\n    if (flag) {\r\n      runCL('runextTFF();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('$');\r\n    if (flag) {\r\n      runCL('runSET();');\r\n      runextNL();\r\n      runCL('while (flag) {');\r\n      runextLMI();\r\n      runextNL();\r\n      ruleTX3();\r\n      if (!flag) runBEjsfn(rname);\r\n      runCL('};');\r\n      runextLMD();\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (flag) {\r\n    runCL('runSET();');\r\n    runextNL();\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.ANYBUT(');\r\n    if (flag) {\r\n      ruleCX1();\r\n      if (!flag) runBEjsfn(rname);\r\n      runTST(')');\r\n      if (!flag) runBEjsfn(rname);\r\n      runCL('runextNOT();');\r\n      runextNL();\r\n      runCL('runextSCN();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('.ANY(');\r\n    if (flag) {\r\n      ruleCX1();\r\n      if (!flag) runBEjsfn(rname);\r\n      runTST(')');\r\n      if (!flag) runBEjsfn(rname);\r\n      runCL('runextSCN();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    ruleID();\r\n    if (flag) {\r\n      runCL('rule');\r\n      runCI();\r\n      runCL('();');\r\n      runextNL();\r\n    } ;\r\n  } ;\r\n  if (!flag) {\r\n    runTST('(');\r\n    if (flag) {\r\n      ruleTX1();\r\n      if (!flag) runBEjsfn(rname);\r\n      runTST(')');\r\n      if (!flag) runBEjsfn(rname);\r\n    } ;\r\n  } ;\r\n} ;\r\n\r\n// character expressions \r\nfunction ruleCX1 () {\r\n  var rname = \"CX1\" ;\r\n  var rlabel = 0 ;\r\n  ruleCX2();\r\n  if (flag) {\r\n    runSET();\r\n    while (flag) {\r\n      runTST('!');\r\n      if (flag) {\r\n        runCL('if (!flag) {');\r\n        runextLMI();\r\n        runextNL();\r\n        ruleCX2();\r\n        if (!flag) runBEjsfn(rname);\r\n        runextLMD();\r\n        runCL('} ;');\r\n        runextNL();\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction ruleCX2 () {\r\n  var rname = \"CX2\" ;\r\n  var rlabel = 0 ;\r\n  ruleCX3();\r\n  if (flag) {\r\n    runTST(':');\r\n    if (flag) {\r\n      runCL('runextCGE(');\r\n      runCI();\r\n      runCL(');');\r\n      runextNL();\r\n      runCL('if (flag) {');\r\n      runextLMI();\r\n      runextNL();\r\n      ruleCX3();\r\n      if (!flag) runBEjsfn(rname);\r\n      runCL('runextCLE(');\r\n      runCI();\r\n      runCL(');');\r\n      runextNL();\r\n      runextLMD();\r\n      runCL('} ;');\r\n      runextNL();\r\n    } ;\r\n    if (!flag) {\r\n      runSET();\r\n      if (flag) {\r\n        runCL('runextCE(');\r\n        runCI();\r\n        runCL(');');\r\n        runextNL();\r\n      } ;\r\n    } ;\r\n    if (!flag) runBEjsfn(rname);\r\n  } ;\r\n} ;\r\n\r\nfunction ruleCX3 () {\r\n  var rname = \"CX3\" ;\r\n  var rlabel = 0 ;\r\n  ruleNUMBER();\r\n  if (flag) {\r\n  } ;\r\n  if (!flag) {\r\n    ruleSQUOTE();\r\n    if (flag) {\r\n      runextLCH();\r\n      if (!flag) runBEjsfn(rname);\r\n    } ;\r\n  } ;\r\n} ;\r\n\r\n// token definitions \r\nfunction rulePREFIX () {\r\n  var rname = \"PREFIX\" ;\r\n  var rlabel = 0 ;\r\n  runSET();\r\n  while (flag) {\r\n    runextCE(32);\r\n    if (!flag) {\r\n      runextCE(9);\r\n    } ;\r\n    if (!flag) {\r\n      runextCE(13);\r\n    } ;\r\n    if (!flag) {\r\n      runextCE(10);\r\n    } ;\r\n    runextSCN();\r\n    };\r\n  runSET();\r\n  if (flag) {\r\n  } ;\r\n} ;\r\n\r\nfunction ruleID () {\r\n  var rname = \"ID\" ;\r\n  var rlabel = 0 ;\r\n  rulePREFIX();\r\n  if (flag) {\r\n    runextTFT();\r\n    runSET();\r\n    if (!flag) return;\r\n    ruleALPHA();\r\n    if (!flag) return;\r\n    runSET();\r\n    while (flag) {\r\n      ruleALPHA();\r\n      if (flag) {\r\n      } ;\r\n      if (!flag) {\r\n        ruleDIGIT();\r\n        if (flag) {\r\n        } ;\r\n      } ;\r\n      };\r\n    runSET();\r\n    if (!flag) return;\r\n    runextTFF();\r\n    runSET();\r\n    if (!flag) return;\r\n  } ;\r\n} ;\r\n\r\nfunction ruleNUMBER () {\r\n  var rname = \"NUMBER\" ;\r\n  var rlabel = 0 ;\r\n  rulePREFIX();\r\n  if (flag) {\r\n    runextTFT();\r\n    runSET();\r\n    if (!flag) return;\r\n    ruleDIGIT();\r\n    if (!flag) return;\r\n    runSET();\r\n    while (flag) {\r\n      ruleDIGIT();\r\n      };\r\n    runSET();\r\n    if (!flag) return;\r\n    runextTFF();\r\n    runSET();\r\n    if (!flag) return;\r\n  } ;\r\n} ;\r\n\r\nfunction ruleSTRING () {\r\n  var rname = \"STRING\" ;\r\n  var rlabel = 0 ;\r\n  rulePREFIX();\r\n  if (flag) {\r\n    runextCE(39);\r\n    runextSCN();\r\n    if (!flag) return;\r\n    runextTFT();\r\n    runSET();\r\n    if (!flag) return;\r\n    runSET();\r\n    while (flag) {\r\n      runextCE(13);\r\n      if (!flag) {\r\n        runextCE(10);\r\n      } ;\r\n      if (!flag) {\r\n        runextCE(39);\r\n      } ;\r\n      runextNOT();\r\n      runextSCN();\r\n      };\r\n    runSET();\r\n    if (!flag) return;\r\n    runextTFF();\r\n    runSET();\r\n    if (!flag) return;\r\n    runextCE(39);\r\n    runextSCN();\r\n    if (!flag) return;\r\n  } ;\r\n} ;\r\n\r\nfunction ruleALPHA () {\r\n  var rname = \"ALPHA\" ;\r\n  var rlabel = 0 ;\r\n  runextCGE(65);\r\n  if (flag) {\r\n    runextCLE(90);\r\n  } ;\r\n  if (!flag) {\r\n    runextCGE(97);\r\n    if (flag) {\r\n      runextCLE(122);\r\n    } ;\r\n  } ;\r\n  runextSCN();\r\n  if (flag) {\r\n  } ;\r\n} ;\r\n\r\nfunction ruleDIGIT () {\r\n  var rname = \"DIGIT\" ;\r\n  var rlabel = 0 ;\r\n  runextCGE(48);\r\n  if (flag) {\r\n    runextCLE(57);\r\n  } ;\r\n  runextSCN();\r\n  if (flag) {\r\n  } ;\r\n} ;\r\n\r\nfunction ruleSQUOTE () {\r\n  var rname = \"SQUOTE\" ;\r\n  var rlabel = 0 ;\r\n  rulePREFIX();\r\n  if (flag) {\r\n    runextCE(39);\r\n    runextSCN();\r\n    if (!flag) return;\r\n  } ;\r\n} ;\r\n\r\nfunction ruleCMLINE () {\r\n  var rname = \"CMLINE\" ;\r\n  var rlabel = 0 ;\r\n  runextTFT();\r\n  runSET();\r\n  if (flag) {\r\n    runSET();\r\n    while (flag) {\r\n      runextCE(10);\r\n      if (!flag) {\r\n        runextCE(13);\r\n      } ;\r\n      if (!flag) {\r\n        runextCE(93);\r\n      } ;\r\n      runextNOT();\r\n      runextSCN();\r\n      };\r\n    runSET();\r\n    if (!flag) return;\r\n    runextTFF();\r\n    runSET();\r\n    if (!flag) return;\r\n  } ;\r\n} ;\r\n\r\n"
    },
    {
        "filename": "c12js__use_comments__c[i14js_c[i14js_c12jf]]_m[i14js_c12js].txt",
        "contents": "// PROGRAM compiler\r\ncompiler = {\r\n\r\n  compile: function (input) {\r\n    // initialize compiler variables\r\n    this.inbuf = input ;\r\n    this.initialize() ;\r\n    // call the first rule\r\n    this.ctxpush('PROGRAM') ;\r\n    this.rulePROGRAM() ;\r\n    this.ctxpop() ;\r\n    // special case handling of first rule failure\r\n    if ((!this.eflag) && (!this.pflag)) {\r\n      this.eflag = true ;\r\n      this.erule = 'PROGRAM' ;\r\n      this.einput = this.inp ; } ;\r\n    return this.eflag ;\r\n  },\r\n\r\n  // Example Metacompiler Definition \r\n  // fully contained javascript object version \r\n  // James M. Neighbors \r\n  // body of compiler definition \r\n  rulePROGRAM: function () {\r\n    this.test('.SYNTAX');\r\n    if (this.pflag) {\r\n      this.ctxpush('ID') ;\r\n      this.ruleID() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (!this.pflag) this.err();\r\n      this.out('// ') ;\r\n      this.out(this.token) ;\r\n      this.out(' compiler') ;\r\n      this.eol() ;\r\n      this.out('compiler = {') ;\r\n      this.stack[this.stackframe + 2] += 2 ;\r\n      this.eol() ;\r\n      this.eol() ;\r\n      this.ctxpush('PREAMBLE') ;\r\n      this.rulePREAMBLE() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (!this.pflag) this.err();\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.ctxpush('PR') ;\r\n        this.rulePR() ;\r\n        this.ctxpop() ;\r\n        if (this.eflag) return ;\r\n        if (this.pflag) {\r\n        } ;\r\n        if (!this.pflag) {\r\n          this.ctxpush('COMMENT') ;\r\n          this.ruleCOMMENT() ;\r\n          this.ctxpop() ;\r\n          if (this.eflag) return ;\r\n          if (this.pflag) {\r\n          } ;\r\n        } ;\r\n      } ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) this.err();\r\n      this.test('.TOKENS');\r\n      if (!this.pflag) this.err();\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.ctxpush('TR') ;\r\n        this.ruleTR() ;\r\n        this.ctxpop() ;\r\n        if (this.eflag) return ;\r\n        if (this.pflag) {\r\n        } ;\r\n        if (!this.pflag) {\r\n          this.ctxpush('COMMENT') ;\r\n          this.ruleCOMMENT() ;\r\n          this.ctxpop() ;\r\n          if (this.eflag) return ;\r\n          if (this.pflag) {\r\n          } ;\r\n        } ;\r\n      } ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) this.err();\r\n      this.test('.END');\r\n      if (!this.pflag) this.err();\r\n      this.ctxpush('POSTAMBLE') ;\r\n      this.rulePOSTAMBLE() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (!this.pflag) this.err();\r\n      this.stack[this.stackframe + 2] -= 2 ;\r\n      this.out('}') ;\r\n      this.eol() ;\r\n    } ;\r\n  } ,\r\n\r\n  // object definition preamble \r\n  rulePREAMBLE: function () {\r\n    this.out('compile: function (input) {') ;\r\n    this.stack[this.stackframe + 2] += 2 ;\r\n    this.eol() ;\r\n    if (true) {\r\n      this.out('// initialize compiler variables') ;\r\n      this.eol() ;\r\n      this.out('this.inbuf = input ;') ;\r\n      this.eol() ;\r\n      this.out('this.initialize() ;') ;\r\n      this.eol() ;\r\n      this.out('// call the first rule') ;\r\n      this.eol() ;\r\n      this.out('this.ctxpush(') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(this.token) ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(') ;') ;\r\n      this.eol() ;\r\n      this.out('this.rule') ;\r\n      this.out(this.token) ;\r\n      this.out('() ;') ;\r\n      this.eol() ;\r\n      this.out('this.ctxpop() ;') ;\r\n      this.eol() ;\r\n      this.out('// special case handling of first rule failure') ;\r\n      this.eol() ;\r\n      this.out('if ((!this.eflag) && (!this.pflag)) {') ;\r\n      this.stack[this.stackframe + 2] += 2 ;\r\n      this.eol() ;\r\n      this.out('this.eflag = true ;') ;\r\n      this.eol() ;\r\n      this.out('this.erule = ') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(this.token) ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(' ;') ;\r\n      this.eol() ;\r\n      this.out('this.einput = this.inp ; } ;') ;\r\n      this.stack[this.stackframe + 2] -= 2 ;\r\n      this.eol() ;\r\n      this.out('return this.eflag ;') ;\r\n      this.eol() ;\r\n      this.stack[this.stackframe + 2] -= 2 ;\r\n      this.out('},') ;\r\n      this.eol() ;\r\n      this.eol() ;\r\n    } ;\r\n  } ,\r\n\r\n  // runtime and object definition postamble \r\n  rulePOSTAMBLE: function () {\r\n    this.out('// runtime variables') ;\r\n    this.eol() ;\r\n    if (true) {\r\n      this.out('pflag: false ,') ;\r\n      this.eol() ;\r\n      this.out('tflag: false ,') ;\r\n      this.eol() ;\r\n      this.out('eflag: false ,') ;\r\n      this.eol() ;\r\n      this.out('inp: 0 ,') ;\r\n      this.eol() ;\r\n      this.out('inbuf:  ') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(' ,') ;\r\n      this.eol() ;\r\n      this.out('outbuf:  ') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(' ,') ;\r\n      this.eol() ;\r\n      this.out('erule:  ') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(' ,') ;\r\n      this.eol() ;\r\n      this.out('einput: 0 ,') ;\r\n      this.eol() ;\r\n      this.out('token: ') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(' ,') ;\r\n      this.eol() ;\r\n      this.out('labelcount: 0 ,') ;\r\n      this.eol() ;\r\n      this.out('stackframesize: 3 ,') ;\r\n      this.eol() ;\r\n      this.out('stackframe: 0 ,') ;\r\n      this.eol() ;\r\n      this.out('stos: -1 ,') ;\r\n      this.eol() ;\r\n      this.out('stack: [] ,') ;\r\n      this.eol() ;\r\n      this.eol() ;\r\n      this.out('initialize: function () {') ;\r\n      this.stack[this.stackframe + 2] += 2 ;\r\n      this.eol() ;\r\n      this.out('// initialize for another compile') ;\r\n      this.eol() ;\r\n      this.out('this.pflag = false ;') ;\r\n      this.eol() ;\r\n      this.out('this.tflag = false ;') ;\r\n      this.eol() ;\r\n      this.out('this.eflag = false ;') ;\r\n      this.eol() ;\r\n      this.out('this.inp = 0 ;') ;\r\n      this.eol() ;\r\n      this.out('this.outbuf = ') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(' ;') ;\r\n      this.eol() ;\r\n      this.out('this.erule = ') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(' ;') ;\r\n      this.eol() ;\r\n      this.out('this.einput = 0 ;') ;\r\n      this.eol() ;\r\n      this.out('this.token = ') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(' ;') ;\r\n      this.eol() ;\r\n      this.out('this.labelcount = 1 ;') ;\r\n      this.eol() ;\r\n      this.out('this.stackframe = -1 ;') ;\r\n      this.eol() ;\r\n      this.out('this.stos = -1 ;') ;\r\n      this.eol() ;\r\n      this.out('this.stack = [] ;') ;\r\n      this.eol() ;\r\n      this.stack[this.stackframe + 2] -= 2 ;\r\n      this.out('},') ;\r\n      this.eol() ;\r\n      this.eol() ;\r\n      this.out('ctxpush: function (rulename){') ;\r\n      this.stack[this.stackframe + 2] += 2 ;\r\n      this.eol() ;\r\n      this.out('// push and initialize a new stackframe') ;\r\n      this.eol() ;\r\n      this.out('var LM ;') ;\r\n      this.eol() ;\r\n      this.out('// new context inherits current context left margin') ;\r\n      this.eol() ;\r\n      this.out('LM = 0; if (this.stackframe >= 0) LM = this.stack[this.stackframe + 2] ;') ;\r\n      this.eol() ;\r\n      this.out('this.stos++ ;') ;\r\n      this.eol() ;\r\n      this.out('this.stackframe = this.stos * this.stackframesize ;') ;\r\n      this.eol() ;\r\n      this.out('// stackframe definition') ;\r\n      this.eol() ;\r\n      this.out('this.stack[this.stackframe + 0] = 0 ;        // generated label') ;\r\n      this.eol() ;\r\n      this.out('this.stack[this.stackframe + 1] = rulename ; // called rule name') ;\r\n      this.eol() ;\r\n      this.out('this.stack[this.stackframe + 2] = LM ;       // left margin') ;\r\n      this.eol() ;\r\n      this.stack[this.stackframe + 2] -= 2 ;\r\n      this.out('},') ;\r\n      this.eol() ;\r\n      this.eol() ;\r\n      this.out('ctxpop: function (){') ;\r\n      this.stack[this.stackframe + 2] += 2 ;\r\n      this.eol() ;\r\n      this.out('// pop and possibly deallocate old stackframe') ;\r\n      this.eol() ;\r\n      this.out('this.stos-- ; // pop stackframe') ;\r\n      this.eol() ;\r\n      this.out('this.stackframe = this.stos * this.stackframesize ;') ;\r\n      this.eol() ;\r\n      this.stack[this.stackframe + 2] -= 2 ;\r\n      this.out('},') ;\r\n      this.eol() ;\r\n      this.eol() ;\r\n      this.out('out: function (s){') ;\r\n      this.stack[this.stackframe + 2] += 2 ;\r\n      this.eol() ;\r\n      this.out('// output string') ;\r\n      this.eol() ;\r\n      this.out('var i ;') ;\r\n      this.eol() ;\r\n      this.out('// if newline last output, add left margin before string') ;\r\n      this.eol() ;\r\n      this.out('if (this.outbuf.charAt(this.outbuf.length - 1) == ') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(String.fromCharCode(92)) ;\r\n      this.out('n') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(') {') ;\r\n      this.eol() ;\r\n      this.out('  i = this.stack[this.stackframe + 2] ;') ;\r\n      this.eol() ;\r\n      this.out('  while (i>0) { this.outbuf += ') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(' ') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(' ; i-- } ; } ;') ;\r\n      this.eol() ;\r\n      this.out('this.outbuf += s ;') ;\r\n      this.eol() ;\r\n      this.stack[this.stackframe + 2] -= 2 ;\r\n      this.out('},') ;\r\n      this.eol() ;\r\n      this.eol() ;\r\n      this.out('eol: function (){') ;\r\n      this.stack[this.stackframe + 2] += 2 ;\r\n      this.eol() ;\r\n      this.out('// output end of line') ;\r\n      this.eol() ;\r\n      this.out('this.outbuf += ') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(String.fromCharCode(92)) ;\r\n      this.out('n') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(' ;') ;\r\n      this.eol() ;\r\n      this.stack[this.stackframe + 2] -= 2 ;\r\n      this.out('},') ;\r\n      this.eol() ;\r\n      this.eol() ;\r\n      this.out('test: function (s) {') ;\r\n      this.stack[this.stackframe + 2] += 2 ;\r\n      this.eol() ;\r\n      this.out('// test for a string in the input') ;\r\n      this.eol() ;\r\n      this.out('var i ;') ;\r\n      this.eol() ;\r\n      this.out('// delete whitespace') ;\r\n      this.eol() ;\r\n      this.out('while ((this.inbuf.charAt(this.inp) == ') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(' ') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(')  ||') ;\r\n      this.eol() ;\r\n      this.out('       (this.inbuf.charAt(this.inp) == ') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(String.fromCharCode(92)) ;\r\n      this.out('n') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(') ||') ;\r\n      this.eol() ;\r\n      this.out('       (this.inbuf.charAt(this.inp) == ') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(String.fromCharCode(92)) ;\r\n      this.out('r') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(') ||') ;\r\n      this.eol() ;\r\n      this.out('       (this.inbuf.charAt(this.inp) == ') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(String.fromCharCode(92)) ;\r\n      this.out('t') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(') ) this.inp++ ;') ;\r\n      this.eol() ;\r\n      this.out('// test string case insensitive') ;\r\n      this.eol() ;\r\n      this.out('this.pflag = true ; i = 0 ;') ;\r\n      this.eol() ;\r\n      this.out('while (this.pflag && (i < s.length) && ((this.inp+i) < this.inbuf.length) )') ;\r\n      this.eol() ;\r\n      this.out('{ this.pflag = (s.charAt(i).toUpperCase() ==') ;\r\n      this.eol() ;\r\n      this.out('                this.inbuf.charAt(this.inp+i).toUpperCase()) ;') ;\r\n      this.eol() ;\r\n      this.out('  i++ ; } ;') ;\r\n      this.eol() ;\r\n      this.out('this.pflag = this.pflag && (i == s.length) ;') ;\r\n      this.eol() ;\r\n      this.out('// advance input if found') ;\r\n      this.eol() ;\r\n      this.out('if (this.pflag) this.inp = this.inp + s.length ;') ;\r\n      this.eol() ;\r\n      this.stack[this.stackframe + 2] -= 2 ;\r\n      this.out('},') ;\r\n      this.eol() ;\r\n      this.eol() ;\r\n      this.out('err: function () {') ;\r\n      this.stack[this.stackframe + 2] += 2 ;\r\n      this.eol() ;\r\n      this.out('// compilation error, provide error indication and context') ;\r\n      this.eol() ;\r\n      this.out('this.eflag = true ;') ;\r\n      this.eol() ;\r\n      this.out('this.erule = this.stack[this.stackframe + 1] ;') ;\r\n      this.eol() ;\r\n      this.out('this.einput = this.inp ;') ;\r\n      this.eol() ;\r\n      this.stack[this.stackframe + 2] -= 2 ;\r\n      this.out('}') ;\r\n      this.eol() ;\r\n      this.eol() ;\r\n    } ;\r\n  } ,\r\n\r\n  // parsing rule definition \r\n  rulePR: function () {\r\n    this.ctxpush('ID') ;\r\n    this.ruleID() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.out('rule') ;\r\n      this.out(this.token) ;\r\n      this.out(': function () {') ;\r\n      this.stack[this.stackframe + 2] += 2 ;\r\n      this.eol() ;\r\n      this.test('=');\r\n      if (!this.pflag) this.err();\r\n      this.ctxpush('EX1') ;\r\n      this.ruleEX1() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (!this.pflag) this.err();\r\n      this.test(';');\r\n      if (!this.pflag) this.err();\r\n      this.stack[this.stackframe + 2] -= 2 ;\r\n      this.out('} ,') ;\r\n      this.eol() ;\r\n      this.eol() ;\r\n    } ;\r\n  } ,\r\n\r\n  // token rule definition \r\n  ruleTR: function () {\r\n    this.ctxpush('ID') ;\r\n    this.ruleID() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.out('rule') ;\r\n      this.out(this.token) ;\r\n      this.out(': function () {') ;\r\n      this.stack[this.stackframe + 2] += 2 ;\r\n      this.eol() ;\r\n      this.test(':');\r\n      if (!this.pflag) this.err();\r\n      this.ctxpush('TX1') ;\r\n      this.ruleTX1() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (!this.pflag) this.err();\r\n      this.test(';');\r\n      if (!this.pflag) this.err();\r\n      this.stack[this.stackframe + 2] -= 2 ;\r\n      this.out('} ,') ;\r\n      this.eol() ;\r\n      this.eol() ;\r\n    } ;\r\n  } ,\r\n\r\n  // comment definition \r\n  ruleCOMMENT: function () {\r\n    this.test('[');\r\n    if (this.pflag) {\r\n      this.ctxpush('CMLINE') ;\r\n      this.ruleCMLINE() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (!this.pflag) this.err();\r\n      this.test(']');\r\n      if (!this.pflag) this.err();\r\n      this.out('//') ;\r\n      this.out(this.token) ;\r\n      this.eol() ;\r\n    } ;\r\n  } ,\r\n\r\n  // parsing expressions \r\n  ruleEX1: function () {\r\n    this.ctxpush('EX2') ;\r\n    this.ruleEX2() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.test('/');\r\n        if (this.pflag) {\r\n          this.out('if (!this.pflag) {') ;\r\n          this.stack[this.stackframe + 2] += 2 ;\r\n          this.eol() ;\r\n          this.ctxpush('EX2') ;\r\n          this.ruleEX2() ;\r\n          this.ctxpop() ;\r\n          if (this.eflag) return ;\r\n          if (!this.pflag) this.err();\r\n          this.stack[this.stackframe + 2] -= 2 ;\r\n          this.out('} ;') ;\r\n          this.eol() ;\r\n        } ;\r\n      } ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) this.err();\r\n    } ;\r\n  } ,\r\n\r\n  ruleEX2: function () {\r\n    this.ctxpush('EX3') ;\r\n    this.ruleEX3() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.out('if (this.pflag) {') ;\r\n      this.stack[this.stackframe + 2] += 2 ;\r\n      this.eol() ;\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.ctxpush('OUTPUT') ;\r\n      this.ruleOUTPUT() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (this.pflag) {\r\n        this.out('if (true) {') ;\r\n        this.stack[this.stackframe + 2] += 2 ;\r\n        this.eol() ;\r\n      } ;\r\n    } ;\r\n    if (this.pflag) {\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.ctxpush('EX3') ;\r\n        this.ruleEX3() ;\r\n        this.ctxpop() ;\r\n        if (this.eflag) return ;\r\n        if (this.pflag) {\r\n          this.out('if (!this.pflag) this.err();') ;\r\n          this.eol() ;\r\n        } ;\r\n        if (!this.pflag) {\r\n          this.ctxpush('OUTPUT') ;\r\n          this.ruleOUTPUT() ;\r\n          this.ctxpop() ;\r\n          if (this.eflag) return ;\r\n          if (this.pflag) {\r\n          } ;\r\n        } ;\r\n      } ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) this.err();\r\n      this.stack[this.stackframe + 2] -= 2 ;\r\n      this.out('} ;') ;\r\n      this.eol() ;\r\n    } ;\r\n  } ,\r\n\r\n  ruleEX3: function () {\r\n    this.ctxpush('ID') ;\r\n    this.ruleID() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.out('this.ctxpush(') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(this.token) ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(') ;') ;\r\n      this.eol() ;\r\n      this.out('this.rule') ;\r\n      this.out(this.token) ;\r\n      this.out('() ;') ;\r\n      this.eol() ;\r\n      this.out('this.ctxpop() ;') ;\r\n      this.eol() ;\r\n      this.out('if (this.eflag) return ;') ;\r\n      this.eol() ;\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.ctxpush('STRING') ;\r\n      this.ruleSTRING() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (this.pflag) {\r\n        this.out('this.test(') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(this.token) ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(');') ;\r\n        this.eol() ;\r\n      } ;\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.test('(');\r\n      if (this.pflag) {\r\n        this.ctxpush('EX1') ;\r\n        this.ruleEX1() ;\r\n        this.ctxpop() ;\r\n        if (this.eflag) return ;\r\n        if (!this.pflag) this.err();\r\n        this.test(')');\r\n        if (!this.pflag) this.err();\r\n      } ;\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.test('.EMPTY');\r\n      if (this.pflag) {\r\n        this.out('this.pflag = true ;') ;\r\n        this.eol() ;\r\n      } ;\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.test('.LITCHR');\r\n      if (this.pflag) {\r\n        this.out('this.token = this.inbuf.charCodeAt(this.inp) ;') ;\r\n        this.eol() ;\r\n        this.out('this.inp++ ;') ;\r\n        this.eol() ;\r\n      } ;\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.test('$');\r\n      if (this.pflag) {\r\n        this.out('this.pflag = true ;') ;\r\n        this.eol() ;\r\n        this.out('while (this.pflag) {') ;\r\n        this.stack[this.stackframe + 2] += 2 ;\r\n        this.eol() ;\r\n        this.ctxpush('EX3') ;\r\n        this.ruleEX3() ;\r\n        this.ctxpop() ;\r\n        if (this.eflag) return ;\r\n        if (!this.pflag) this.err();\r\n        this.stack[this.stackframe + 2] -= 2 ;\r\n        this.out('} ;') ;\r\n        this.eol() ;\r\n        this.out('this.pflag = true ;') ;\r\n        this.eol() ;\r\n      } ;\r\n    } ;\r\n  } ,\r\n\r\n  // output expressions \r\n  ruleOUTPUT: function () {\r\n    this.test('.OUT');\r\n    if (this.pflag) {\r\n      this.test('(');\r\n      if (!this.pflag) this.err();\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.ctxpush('OUT1') ;\r\n        this.ruleOUT1() ;\r\n        this.ctxpop() ;\r\n        if (this.eflag) return ;\r\n      } ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) this.err();\r\n      this.test(')');\r\n      if (!this.pflag) this.err();\r\n    } ;\r\n  } ,\r\n\r\n  ruleOUT1: function () {\r\n    this.test('*');\r\n    if (this.pflag) {\r\n      this.out('this.out(this.token) ;') ;\r\n      this.eol() ;\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.ctxpush('STRING') ;\r\n      this.ruleSTRING() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (this.pflag) {\r\n        this.out('this.out(') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(this.token) ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(') ;') ;\r\n        this.eol() ;\r\n      } ;\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.ctxpush('NUMBER') ;\r\n      this.ruleNUMBER() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (this.pflag) {\r\n        this.out('this.out(String.fromCharCode(') ;\r\n        this.out(this.token) ;\r\n        this.out(')) ;') ;\r\n        this.eol() ;\r\n      } ;\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.test('#');\r\n      if (this.pflag) {\r\n        this.out('if (this.stack[this.stackframe + 0] == 0) {') ;\r\n        this.stack[this.stackframe + 2] += 2 ;\r\n        this.eol() ;\r\n        this.out('this.stack[this.stackframe + 0] = this.labelcount ;') ;\r\n        this.eol() ;\r\n        this.out('this.labelcount++ ; } ;') ;\r\n        this.stack[this.stackframe + 2] -= 2 ;\r\n        this.eol() ;\r\n        this.out('this.out(this.stack[this.stackframe + 0]) ;') ;\r\n        this.eol() ;\r\n      } ;\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.test('.NL');\r\n      if (this.pflag) {\r\n        this.out('this.eol() ;') ;\r\n        this.eol() ;\r\n      } ;\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.test('.LB');\r\n      if (this.pflag) {\r\n      } ;\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.test('.TB');\r\n      if (this.pflag) {\r\n        this.out('this.out(') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(String.fromCharCode(92)) ;\r\n        this.out('t') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(') ;') ;\r\n        this.eol() ;\r\n      } ;\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.test('.LM+');\r\n      if (this.pflag) {\r\n        this.out('this.stack[this.stackframe + 2] += 2 ;') ;\r\n        this.eol() ;\r\n      } ;\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.test('.LM-');\r\n      if (this.pflag) {\r\n        this.out('this.stack[this.stackframe + 2] -= 2 ;') ;\r\n        this.eol() ;\r\n      } ;\r\n    } ;\r\n  } ,\r\n\r\n  // token expressions \r\n  ruleTX1: function () {\r\n    this.ctxpush('TX2') ;\r\n    this.ruleTX2() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.test('/');\r\n        if (this.pflag) {\r\n          this.out('if (!this.pflag) {') ;\r\n          this.stack[this.stackframe + 2] += 2 ;\r\n          this.eol() ;\r\n          this.ctxpush('TX2') ;\r\n          this.ruleTX2() ;\r\n          this.ctxpop() ;\r\n          if (this.eflag) return ;\r\n          if (!this.pflag) this.err();\r\n          this.stack[this.stackframe + 2] -= 2 ;\r\n          this.out('} ;') ;\r\n          this.eol() ;\r\n        } ;\r\n      } ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) this.err();\r\n    } ;\r\n  } ,\r\n\r\n  ruleTX2: function () {\r\n    this.ctxpush('TX3') ;\r\n    this.ruleTX3() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.out('if (this.pflag) {') ;\r\n      this.stack[this.stackframe + 2] += 2 ;\r\n      this.eol() ;\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.ctxpush('TX3') ;\r\n        this.ruleTX3() ;\r\n        this.ctxpop() ;\r\n        if (this.eflag) return ;\r\n        if (this.pflag) {\r\n          this.out('if (!this.pflag) return;') ;\r\n          this.eol() ;\r\n        } ;\r\n      } ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) this.err();\r\n      this.stack[this.stackframe + 2] -= 2 ;\r\n      this.out('} ;') ;\r\n      this.eol() ;\r\n    } ;\r\n  } ,\r\n\r\n  ruleTX3: function () {\r\n    this.test('.TOKEN');\r\n    if (this.pflag) {\r\n      this.out('this.tflag = true ; ') ;\r\n      this.eol() ;\r\n      this.out('this.token = ') ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(String.fromCharCode(39)) ;\r\n      this.out(' ;') ;\r\n      this.eol() ;\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.test('.DELTOK');\r\n      if (this.pflag) {\r\n        this.out('this.tflag = false ;') ;\r\n        this.eol() ;\r\n      } ;\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.test('$');\r\n      if (this.pflag) {\r\n        this.out('this.pflag = true ;') ;\r\n        this.eol() ;\r\n        this.out('while (this.pflag) {') ;\r\n        this.stack[this.stackframe + 2] += 2 ;\r\n        this.eol() ;\r\n        this.ctxpush('TX3') ;\r\n        this.ruleTX3() ;\r\n        this.ctxpop() ;\r\n        if (this.eflag) return ;\r\n        if (!this.pflag) this.err();\r\n        this.stack[this.stackframe + 2] -= 2 ;\r\n        this.out('};') ;\r\n        this.eol() ;\r\n      } ;\r\n    } ;\r\n    if (this.pflag) {\r\n      this.out('this.pflag = true ;') ;\r\n      this.eol() ;\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.test('.ANYBUT(');\r\n      if (this.pflag) {\r\n        this.ctxpush('CX1') ;\r\n        this.ruleCX1() ;\r\n        this.ctxpop() ;\r\n        if (this.eflag) return ;\r\n        if (!this.pflag) this.err();\r\n        this.test(')');\r\n        if (!this.pflag) this.err();\r\n        this.out('this.pflag = !this.pflag ;') ;\r\n        this.eol() ;\r\n        this.out('if (this.pflag) {') ;\r\n        this.stack[this.stackframe + 2] += 2 ;\r\n        this.eol() ;\r\n        this.out('if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;') ;\r\n        this.eol() ;\r\n        this.out('this.inp++ } ;') ;\r\n        this.stack[this.stackframe + 2] -= 2 ;\r\n        this.eol() ;\r\n      } ;\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.test('.ANY(');\r\n      if (this.pflag) {\r\n        this.ctxpush('CX1') ;\r\n        this.ruleCX1() ;\r\n        this.ctxpop() ;\r\n        if (this.eflag) return ;\r\n        if (!this.pflag) this.err();\r\n        this.test(')');\r\n        if (!this.pflag) this.err();\r\n        this.out('if (this.pflag) {') ;\r\n        this.stack[this.stackframe + 2] += 2 ;\r\n        this.eol() ;\r\n        this.out('if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;') ;\r\n        this.eol() ;\r\n        this.out('this.inp++ } ;') ;\r\n        this.stack[this.stackframe + 2] -= 2 ;\r\n        this.eol() ;\r\n      } ;\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.ctxpush('ID') ;\r\n      this.ruleID() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (this.pflag) {\r\n        this.out('this.ctxpush(') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(this.token) ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(') ;') ;\r\n        this.eol() ;\r\n        this.out('this.rule') ;\r\n        this.out(this.token) ;\r\n        this.out('() ;') ;\r\n        this.eol() ;\r\n        this.out('this.ctxpop() ;') ;\r\n        this.eol() ;\r\n        this.out('if (this.eflag) return ;') ;\r\n        this.eol() ;\r\n      } ;\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.test('(');\r\n      if (this.pflag) {\r\n        this.ctxpush('TX1') ;\r\n        this.ruleTX1() ;\r\n        this.ctxpop() ;\r\n        if (this.eflag) return ;\r\n        if (!this.pflag) this.err();\r\n        this.test(')');\r\n        if (!this.pflag) this.err();\r\n      } ;\r\n    } ;\r\n  } ,\r\n\r\n  // character expressions \r\n  ruleCX1: function () {\r\n    this.out('this.pflag = ') ;\r\n    this.stack[this.stackframe + 2] += 2 ;\r\n    this.eol() ;\r\n    if (true) {\r\n      this.ctxpush('CX2') ;\r\n      this.ruleCX2() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (!this.pflag) this.err();\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.test('!');\r\n        if (this.pflag) {\r\n          this.out(' ||') ;\r\n          this.eol() ;\r\n          this.ctxpush('CX2') ;\r\n          this.ruleCX2() ;\r\n          this.ctxpop() ;\r\n          if (this.eflag) return ;\r\n          if (!this.pflag) this.err();\r\n        } ;\r\n      } ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) this.err();\r\n      this.stack[this.stackframe + 2] -= 2 ;\r\n      this.out(' ;') ;\r\n      this.eol() ;\r\n    } ;\r\n  } ,\r\n\r\n  ruleCX2: function () {\r\n    this.ctxpush('CX3') ;\r\n    this.ruleCX3() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.test(':');\r\n      if (this.pflag) {\r\n        this.out('((this.inbuf.charCodeAt(this.inp) >= ') ;\r\n        this.out(this.token) ;\r\n        this.out(') &&') ;\r\n        this.eol() ;\r\n        this.ctxpush('CX3') ;\r\n        this.ruleCX3() ;\r\n        this.ctxpop() ;\r\n        if (this.eflag) return ;\r\n        if (!this.pflag) this.err();\r\n        this.out(' (this.inbuf.charCodeAt(this.inp) <= ') ;\r\n        this.out(this.token) ;\r\n        this.out(')  )') ;\r\n      } ;\r\n      if (!this.pflag) {\r\n        this.pflag = true ;\r\n        if (this.pflag) {\r\n          this.out('(this.inbuf.charCodeAt(this.inp) == ') ;\r\n          this.out(this.token) ;\r\n          this.out(') ') ;\r\n        } ;\r\n      } ;\r\n      if (!this.pflag) this.err();\r\n    } ;\r\n  } ,\r\n\r\n  ruleCX3: function () {\r\n    this.ctxpush('NUMBER') ;\r\n    this.ruleNUMBER() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n    } ;\r\n    if (!this.pflag) {\r\n      this.ctxpush('SQUOTE') ;\r\n      this.ruleSQUOTE() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (this.pflag) {\r\n        this.token = this.inbuf.charCodeAt(this.inp) ;\r\n        this.inp++ ;\r\n        if (!this.pflag) this.err();\r\n      } ;\r\n    } ;\r\n  } ,\r\n\r\n  // token definitions \r\n  rulePREFIX: function () {\r\n    this.pflag = true ;\r\n    while (this.pflag) {\r\n      this.pflag = \r\n        (this.inbuf.charCodeAt(this.inp) == 32)  ||\r\n        (this.inbuf.charCodeAt(this.inp) == 9)  ||\r\n        (this.inbuf.charCodeAt(this.inp) == 13)  ||\r\n        (this.inbuf.charCodeAt(this.inp) == 10)  ;\r\n      if (this.pflag) {\r\n        if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n        this.inp++ } ;\r\n    };\r\n    this.pflag = true ;\r\n    if (this.pflag) {\r\n    } ;\r\n  } ,\r\n\r\n  ruleID: function () {\r\n    this.ctxpush('PREFIX') ;\r\n    this.rulePREFIX() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.tflag = true ; \r\n      this.token = '' ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.ctxpush('ALPHA') ;\r\n      this.ruleALPHA() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (!this.pflag) return;\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.ctxpush('ALPHA') ;\r\n        this.ruleALPHA() ;\r\n        this.ctxpop() ;\r\n        if (this.eflag) return ;\r\n        if (this.pflag) {\r\n        } ;\r\n        if (!this.pflag) {\r\n          this.ctxpush('DIGIT') ;\r\n          this.ruleDIGIT() ;\r\n          this.ctxpop() ;\r\n          if (this.eflag) return ;\r\n          if (this.pflag) {\r\n          } ;\r\n        } ;\r\n      };\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.tflag = false ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n    } ;\r\n  } ,\r\n\r\n  ruleNUMBER: function () {\r\n    this.ctxpush('PREFIX') ;\r\n    this.rulePREFIX() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.tflag = true ; \r\n      this.token = '' ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.ctxpush('DIGIT') ;\r\n      this.ruleDIGIT() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (!this.pflag) return;\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.ctxpush('DIGIT') ;\r\n        this.ruleDIGIT() ;\r\n        this.ctxpop() ;\r\n        if (this.eflag) return ;\r\n      };\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.tflag = false ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n    } ;\r\n  } ,\r\n\r\n  ruleSTRING: function () {\r\n    this.ctxpush('PREFIX') ;\r\n    this.rulePREFIX() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.pflag = \r\n        (this.inbuf.charCodeAt(this.inp) == 39)  ;\r\n      if (this.pflag) {\r\n        if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n        this.inp++ } ;\r\n      if (!this.pflag) return;\r\n      this.tflag = true ; \r\n      this.token = '' ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.pflag = \r\n          (this.inbuf.charCodeAt(this.inp) == 13)  ||\r\n          (this.inbuf.charCodeAt(this.inp) == 10)  ||\r\n          (this.inbuf.charCodeAt(this.inp) == 39)  ;\r\n        this.pflag = !this.pflag ;\r\n        if (this.pflag) {\r\n          if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n          this.inp++ } ;\r\n      };\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.tflag = false ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.pflag = \r\n        (this.inbuf.charCodeAt(this.inp) == 39)  ;\r\n      if (this.pflag) {\r\n        if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n        this.inp++ } ;\r\n      if (!this.pflag) return;\r\n    } ;\r\n  } ,\r\n\r\n  ruleALPHA: function () {\r\n    this.pflag = \r\n      ((this.inbuf.charCodeAt(this.inp) >= 65) &&\r\n       (this.inbuf.charCodeAt(this.inp) <= 90)  ) ||\r\n      ((this.inbuf.charCodeAt(this.inp) >= 97) &&\r\n       (this.inbuf.charCodeAt(this.inp) <= 122)  ) ;\r\n    if (this.pflag) {\r\n      if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n      this.inp++ } ;\r\n    if (this.pflag) {\r\n    } ;\r\n  } ,\r\n\r\n  ruleDIGIT: function () {\r\n    this.pflag = \r\n      ((this.inbuf.charCodeAt(this.inp) >= 48) &&\r\n       (this.inbuf.charCodeAt(this.inp) <= 57)  ) ;\r\n    if (this.pflag) {\r\n      if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n      this.inp++ } ;\r\n    if (this.pflag) {\r\n    } ;\r\n  } ,\r\n\r\n  ruleSQUOTE: function () {\r\n    this.ctxpush('PREFIX') ;\r\n    this.rulePREFIX() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.pflag = \r\n        (this.inbuf.charCodeAt(this.inp) == 39)  ;\r\n      if (this.pflag) {\r\n        if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n        this.inp++ } ;\r\n      if (!this.pflag) return;\r\n    } ;\r\n  } ,\r\n\r\n  ruleCMLINE: function () {\r\n    this.tflag = true ; \r\n    this.token = '' ;\r\n    this.pflag = true ;\r\n    if (this.pflag) {\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.pflag = \r\n          (this.inbuf.charCodeAt(this.inp) == 10)  ||\r\n          (this.inbuf.charCodeAt(this.inp) == 13)  ||\r\n          (this.inbuf.charCodeAt(this.inp) == 93)  ;\r\n        this.pflag = !this.pflag ;\r\n        if (this.pflag) {\r\n          if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n          this.inp++ } ;\r\n      };\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.tflag = false ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n    } ;\r\n  } ,\r\n\r\n  // runtime variables\r\n  pflag: false ,\r\n  tflag: false ,\r\n  eflag: false ,\r\n  inp: 0 ,\r\n  inbuf:  '' ,\r\n  outbuf:  '' ,\r\n  erule:  '' ,\r\n  einput: 0 ,\r\n  token: '' ,\r\n  labelcount: 0 ,\r\n  stackframesize: 3 ,\r\n  stackframe: 0 ,\r\n  stos: -1 ,\r\n  stack: [] ,\r\n\r\n  initialize: function () {\r\n    // initialize for another compile\r\n    this.pflag = false ;\r\n    this.tflag = false ;\r\n    this.eflag = false ;\r\n    this.inp = 0 ;\r\n    this.outbuf = '' ;\r\n    this.erule = '' ;\r\n    this.einput = 0 ;\r\n    this.token = '' ;\r\n    this.labelcount = 1 ;\r\n    this.stackframe = -1 ;\r\n    this.stos = -1 ;\r\n    this.stack = [] ;\r\n  },\r\n\r\n  ctxpush: function (rulename){\r\n    // push and initialize a new stackframe\r\n    var LM ;\r\n    // new context inherits current context left margin\r\n    LM = 0; if (this.stackframe >= 0) LM = this.stack[this.stackframe + 2] ;\r\n    this.stos++ ;\r\n    this.stackframe = this.stos * this.stackframesize ;\r\n    // stackframe definition\r\n    this.stack[this.stackframe + 0] = 0 ;        // generated label\r\n    this.stack[this.stackframe + 1] = rulename ; // called rule name\r\n    this.stack[this.stackframe + 2] = LM ;       // left margin\r\n  },\r\n\r\n  ctxpop: function (){\r\n    // pop and possibly deallocate old stackframe\r\n    this.stos-- ; // pop stackframe\r\n    this.stackframe = this.stos * this.stackframesize ;\r\n  },\r\n\r\n  out: function (s){\r\n    // output string\r\n    var i ;\r\n    // if newline last output, add left margin before string\r\n    if (this.outbuf.charAt(this.outbuf.length - 1) == '\\n') {\r\n      i = this.stack[this.stackframe + 2] ;\r\n      while (i>0) { this.outbuf += ' ' ; i-- } ; } ;\r\n    this.outbuf += s ;\r\n  },\r\n\r\n  eol: function (){\r\n    // output end of line\r\n    this.outbuf += '\\n' ;\r\n  },\r\n\r\n  test: function (s) {\r\n    // test for a string in the input\r\n    var i ;\r\n    // delete whitespace\r\n    while ((this.inbuf.charAt(this.inp) == ' ')  ||\r\n           (this.inbuf.charAt(this.inp) == '\\n') ||\r\n           (this.inbuf.charAt(this.inp) == '\\r') ||\r\n           (this.inbuf.charAt(this.inp) == '\\t') ) this.inp++ ;\r\n    // test string case insensitive\r\n    this.pflag = true ; i = 0 ;\r\n    while (this.pflag && (i < s.length) && ((this.inp+i) < this.inbuf.length) )\r\n    { this.pflag = (s.charAt(i).toUpperCase() ==\r\n                    this.inbuf.charAt(this.inp+i).toUpperCase()) ;\r\n      i++ ; } ;\r\n    this.pflag = this.pflag && (i == s.length) ;\r\n    // advance input if found\r\n    if (this.pflag) this.inp = this.inp + s.length ;\r\n  },\r\n\r\n  err: function () {\r\n    // compilation error, provide error indication and context\r\n    this.eflag = true ;\r\n    this.erule = this.stack[this.stackframe + 1] ;\r\n    this.einput = this.inp ;\r\n  }\r\n\r\n}\r\n"
    },
    {
        "filename": "c12__use_comments__c[i14_c11]__m[i14_c12].txt",
        "contents": "\tADR PROGRAM\r\n; Example Metacompiler Definition \r\n; interpreter code version \r\n; James M. Neighbors \r\n; body of compiler definition \r\nPROGRAM\r\n\tTST '.SYNTAX'\r\n\tBF L1\r\n\tCLL ID\r\n\tBE\r\n\tLB\r\n\tTB\r\n\tCL 'ADR '\r\n\tCI\r\n\tNL\r\nL2\r\n\tCLL PR\r\n\tBF L3\r\nL3\r\n\tBT L4\r\n\tCLL COMMENT\r\n\tBF L5\r\nL5\r\nL4\r\n\tBT L2\r\n\tSET\r\n\tBE\r\n\tTST '.TOKENS'\r\n\tBE\r\nL6\r\n\tCLL TR\r\n\tBF L7\r\nL7\r\n\tBT L8\r\n\tCLL COMMENT\r\n\tBF L9\r\nL9\r\nL8\r\n\tBT L6\r\n\tSET\r\n\tBE\r\n\tTST '.END'\r\n\tBE\r\n\tTB\r\n\tCL 'END'\r\n\tNL\r\nL1\r\nL10\r\n\tR\r\n; parsing rule definition \r\nPR\r\n\tCLL ID\r\n\tBF L11\r\n\tLB\r\n\tCI\r\n\tNL\r\n\tTST '='\r\n\tBE\r\n\tCLL EX1\r\n\tBE\r\n\tTST ';'\r\n\tBE\r\n\tTB\r\n\tCL 'R'\r\n\tNL\r\nL11\r\nL12\r\n\tR\r\n; token rule definition \r\nTR\r\n\tCLL ID\r\n\tBF L13\r\n\tLB\r\n\tCI\r\n\tNL\r\n\tTST ':'\r\n\tBE\r\n\tCLL TX1\r\n\tBE\r\n\tTST ';'\r\n\tBE\r\n\tTB\r\n\tCL 'R'\r\n\tNL\r\nL13\r\nL14\r\n\tR\r\n; comment definition \r\nCOMMENT\r\n\tTST '['\r\n\tBF L15\r\n\tCLL CMLINE\r\n\tBE\r\n\tTST ']'\r\n\tBE\r\n\tLB\r\n\tCL ';'\r\n\tCI\r\n\tNL\r\nL15\r\nL16\r\n\tR\r\n; parsing expressions \r\nEX1\r\n\tCLL EX2\r\n\tBF L17\r\nL18\r\n\tTST '/'\r\n\tBF L19\r\n\tTB\r\n\tCL 'BT L'\r\n\tGN\r\n\tNL\r\n\tCLL EX2\r\n\tBE\r\nL19\r\nL20\r\n\tBT L18\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tCL 'L'\r\n\tGN\r\n\tNL\r\nL17\r\nL21\r\n\tR\r\nEX2\r\n\tCLL EX3\r\n\tBF L22\r\n\tTB\r\n\tCL 'BF L'\r\n\tGN\r\n\tNL\r\nL22\r\n\tBT L23\r\n\tCLL OUTPUT\r\n\tBF L24\r\nL24\r\nL23\r\n\tBF L25\r\nL26\r\n\tCLL EX3\r\n\tBF L27\r\n\tTB\r\n\tCL 'BE'\r\n\tNL\r\nL27\r\n\tBT L28\r\n\tCLL OUTPUT\r\n\tBF L29\r\nL29\r\nL28\r\n\tBT L26\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tCL 'L'\r\n\tGN\r\n\tNL\r\nL25\r\nL30\r\n\tR\r\nEX3\r\n\tCLL ID\r\n\tBF L31\r\n\tTB\r\n\tCL 'CLL '\r\n\tCI\r\n\tNL\r\nL31\r\n\tBT L32\r\n\tCLL STRING\r\n\tBF L33\r\n\tTB\r\n\tCL 'TST '\r\n\tCC 39\r\n\tCI\r\n\tCC 39\r\n\tNL\r\nL33\r\n\tBT L32\r\n\tTST '('\r\n\tBF L34\r\n\tCLL EX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL34\r\n\tBT L32\r\n\tTST '.EMPTY'\r\n\tBF L35\r\n\tTB\r\n\tCL 'SET'\r\n\tNL\r\nL35\r\n\tBT L32\r\n\tTST '.LITCHR'\r\n\tBF L36\r\n\tTB\r\n\tCL 'LCH'\r\n\tNL\r\nL36\r\n\tBT L32\r\n\tTST '$'\r\n\tBF L37\r\n\tLB\r\n\tCL 'L'\r\n\tGN\r\n\tNL\r\n\tCLL EX3\r\n\tBE\r\n\tTB\r\n\tCL 'BT L'\r\n\tGN\r\n\tNL\r\n\tTB\r\n\tCL 'SET'\r\n\tNL\r\nL37\r\nL32\r\n\tR\r\n; output expressions \r\nOUTPUT\r\n\tTST '.OUT'\r\n\tBF L38\r\n\tTST '('\r\n\tBE\r\nL39\r\n\tCLL OUT1\r\n\tBT L39\r\n\tSET\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL38\r\nL40\r\n\tR\r\nOUT1\r\n\tTST '*'\r\n\tBF L41\r\n\tTB\r\n\tCL 'CI'\r\n\tNL\r\nL41\r\n\tBT L42\r\n\tCLL STRING\r\n\tBF L43\r\n\tTB\r\n\tCL 'CL '\r\n\tCC 39\r\n\tCI\r\n\tCC 39\r\n\tNL\r\nL43\r\n\tBT L42\r\n\tCLL NUMBER\r\n\tBF L44\r\n\tTB\r\n\tCL 'CC '\r\n\tCI\r\n\tNL\r\nL44\r\n\tBT L42\r\n\tTST '#'\r\n\tBF L45\r\n\tTB\r\n\tCL 'GN'\r\n\tNL\r\nL45\r\n\tBT L42\r\n\tTST '.NL'\r\n\tBF L46\r\n\tTB\r\n\tCL 'NL'\r\n\tNL\r\nL46\r\n\tBT L42\r\n\tTST '.LB'\r\n\tBF L47\r\n\tTB\r\n\tCL 'LB'\r\n\tNL\r\nL47\r\n\tBT L42\r\n\tTST '.TB'\r\n\tBF L48\r\n\tTB\r\n\tCL 'TB'\r\n\tNL\r\nL48\r\n\tBT L42\r\n\tTST '.LM+'\r\n\tBF L49\r\n\tTB\r\n\tCL 'LMI'\r\n\tNL\r\nL49\r\n\tBT L42\r\n\tTST '.LM-'\r\n\tBF L50\r\n\tTB\r\n\tCL 'LMD'\r\n\tNL\r\nL50\r\nL42\r\n\tR\r\n; token expressions \r\nTX1\r\n\tCLL TX2\r\n\tBF L51\r\nL52\r\n\tTST '/'\r\n\tBF L53\r\n\tTB\r\n\tCL 'BT T'\r\n\tGN\r\n\tNL\r\n\tCLL TX2\r\n\tBE\r\nL53\r\nL54\r\n\tBT L52\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tCL 'T'\r\n\tGN\r\n\tNL\r\nL51\r\nL55\r\n\tR\r\nTX2\r\n\tCLL TX3\r\n\tBF L56\r\n\tTB\r\n\tCL 'BF T'\r\n\tGN\r\n\tNL\r\nL57\r\n\tCLL TX3\r\n\tBF L58\r\n\tTB\r\n\tCL 'RF'\r\n\tNL\r\nL58\r\nL59\r\n\tBT L57\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tCL 'T'\r\n\tGN\r\n\tNL\r\nL56\r\nL60\r\n\tR\r\nTX3\r\n\tTST '.TOKEN'\r\n\tBF L61\r\n\tTB\r\n\tCL 'TFT'\r\n\tNL\r\nL61\r\n\tBT L62\r\n\tTST '.DELTOK'\r\n\tBF L63\r\n\tTB\r\n\tCL 'TFF'\r\n\tNL\r\nL63\r\n\tBT L62\r\n\tTST '$'\r\n\tBF L64\r\n\tLB\r\n\tCL 'T'\r\n\tGN\r\n\tNL\r\n\tCLL TX3\r\n\tBE\r\n\tTB\r\n\tCL 'BT T'\r\n\tGN\r\n\tNL\r\nL64\r\nL62\r\n\tBF L65\r\n\tTB\r\n\tCL 'SET'\r\n\tNL\r\nL65\r\n\tBT L66\r\n\tTST '.ANYBUT('\r\n\tBF L67\r\n\tCLL CX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\n\tTB\r\n\tCL 'NOT'\r\n\tNL\r\n\tTB\r\n\tCL 'SCN'\r\n\tNL\r\nL67\r\n\tBT L66\r\n\tTST '.ANY('\r\n\tBF L68\r\n\tCLL CX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\n\tTB\r\n\tCL 'SCN'\r\n\tNL\r\nL68\r\n\tBT L66\r\n\tCLL ID\r\n\tBF L69\r\n\tTB\r\n\tCL 'CLL '\r\n\tCI\r\n\tNL\r\nL69\r\n\tBT L66\r\n\tTST '('\r\n\tBF L70\r\n\tCLL TX1\r\n\tBE\r\n\tTST ')'\r\n\tBE\r\nL70\r\nL66\r\n\tR\r\n; character expressions \r\nCX1\r\n\tCLL CX2\r\n\tBF L71\r\nL72\r\n\tTST '!'\r\n\tBF L73\r\n\tTB\r\n\tCL 'BT C'\r\n\tGN\r\n\tNL\r\n\tCLL CX2\r\n\tBE\r\nL73\r\nL74\r\n\tBT L72\r\n\tSET\r\n\tBE\r\n\tLB\r\n\tCL 'C'\r\n\tGN\r\n\tNL\r\nL71\r\nL75\r\n\tR\r\nCX2\r\n\tCLL CX3\r\n\tBF L76\r\n\tTST ':'\r\n\tBF L77\r\n\tTB\r\n\tCL 'CGE '\r\n\tCI\r\n\tNL\r\n\tTB\r\n\tCL 'BF D'\r\n\tGN\r\n\tNL\r\n\tCLL CX3\r\n\tBE\r\n\tTB\r\n\tCL 'CLE '\r\n\tCI\r\n\tNL\r\n\tLB\r\n\tCL 'D'\r\n\tGN\r\n\tNL\r\nL77\r\n\tBT L78\r\n\tSET\r\n\tBF L79\r\n\tTB\r\n\tCL 'CE '\r\n\tCI\r\n\tNL\r\nL79\r\nL78\r\n\tBE\r\nL76\r\nL80\r\n\tR\r\nCX3\r\n\tCLL NUMBER\r\n\tBF L81\r\nL81\r\n\tBT L82\r\n\tCLL SQUOTE\r\n\tBF L83\r\n\tLCH\r\n\tBE\r\nL83\r\nL82\r\n\tR\r\n; token definitions \r\nPREFIX\r\nT84\r\n\tCE 32\r\n\tBT C85\r\n\tCE 9\r\n\tBT C85\r\n\tCE 13\r\n\tBT C85\r\n\tCE 10\r\nC85\r\n\tSCN\r\n\tBT T84\r\n\tSET\r\n\tBF T86\r\nT86\r\nT87\r\n\tR\r\nID\r\n\tCLL PREFIX\r\n\tBF T88\r\n\tTFT\r\n\tSET\r\n\tRF\r\n\tCLL ALPHA\r\n\tRF\r\nT89\r\n\tCLL ALPHA\r\n\tBF T90\r\nT90\r\n\tBT T91\r\n\tCLL DIGIT\r\n\tBF T92\r\nT92\r\nT91\r\n\tBT T89\r\n\tSET\r\n\tRF\r\n\tTFF\r\n\tSET\r\n\tRF\r\nT88\r\nT93\r\n\tR\r\nNUMBER\r\n\tCLL PREFIX\r\n\tBF T94\r\n\tTFT\r\n\tSET\r\n\tRF\r\n\tCLL DIGIT\r\n\tRF\r\nT95\r\n\tCLL DIGIT\r\n\tBT T95\r\n\tSET\r\n\tRF\r\n\tTFF\r\n\tSET\r\n\tRF\r\nT94\r\nT96\r\n\tR\r\nSTRING\r\n\tCLL PREFIX\r\n\tBF T97\r\n\tCE 39\r\nC98\r\n\tSCN\r\n\tRF\r\n\tTFT\r\n\tSET\r\n\tRF\r\nT99\r\n\tCE 13\r\n\tBT C100\r\n\tCE 10\r\n\tBT C100\r\n\tCE 39\r\nC100\r\n\tNOT\r\n\tSCN\r\n\tBT T99\r\n\tSET\r\n\tRF\r\n\tTFF\r\n\tSET\r\n\tRF\r\n\tCE 39\r\nC101\r\n\tSCN\r\n\tRF\r\nT97\r\nT102\r\n\tR\r\nALPHA\r\n\tCGE 65\r\n\tBF D103\r\n\tCLE 90\r\nD103\r\n\tBT C104\r\n\tCGE 97\r\n\tBF D105\r\n\tCLE 122\r\nD105\r\nC104\r\n\tSCN\r\n\tBF T106\r\nT106\r\nT107\r\n\tR\r\nDIGIT\r\n\tCGE 48\r\n\tBF D108\r\n\tCLE 57\r\nD108\r\nC109\r\n\tSCN\r\n\tBF T110\r\nT110\r\nT111\r\n\tR\r\nSQUOTE\r\n\tCLL PREFIX\r\n\tBF T112\r\n\tCE 39\r\nC113\r\n\tSCN\r\n\tRF\r\nT112\r\nT114\r\n\tR\r\nCMLINE\r\n\tTFT\r\n\tSET\r\n\tBF T115\r\nT116\r\n\tCE 10\r\n\tBT C117\r\n\tCE 13\r\n\tBT C117\r\n\tCE 93\r\nC117\r\n\tNOT\r\n\tSCN\r\n\tBT T116\r\n\tSET\r\n\tRF\r\n\tTFF\r\n\tSET\r\n\tRF\r\nT115\r\nT118\r\n\tR\r\n\tEND\r\n"
    },
    {
        "filename": "c13js__accept_backup_c[i15js_c[i15js_c12js]]__m[i15js_c13js].txt",
        "contents": "// PROGRAM compiler\r\ncompiler = {\r\n\r\n  compile: function (input) {\r\n    // initialize compiler variables\r\n    this.inbuf = input ;\r\n    this.initialize() ;\r\n    // call the first rule\r\n    this.ctxpush('PROGRAM') ;\r\n    this.rulePROGRAM() ;\r\n    this.ctxpop() ;\r\n    // special case handling of first rule failure\r\n    if ((!this.eflag) && (!this.pflag)) {\r\n      this.eflag = true ;\r\n      this.erule = 'PROGRAM' ;\r\n      this.einput = this.inp ; } ;\r\n    return this.eflag ;\r\n  },\r\n\r\n  // Example Metacompiler Definition \r\n  // fully contained javascript object version with backup \r\n  // James M. Neighbors \r\n  // body of compiler definition \r\n  rulePROGRAM: function () {\r\n    this.test('.SYNTAX');\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.ctxpush('ID') ;\r\n        this.ruleID() ;\r\n        this.ctxpop() ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.out('// ') ;\r\n        this.out(this.token) ;\r\n        this.out(' compiler') ;\r\n        this.eol() ;\r\n        this.out('compiler = {') ;\r\n        this.stack[this.stackframe + 2] += 2 ;\r\n        this.eol() ;\r\n        this.eol() ;\r\n        this.ctxpush('PREAMBLE') ;\r\n        this.rulePREAMBLE() ;\r\n        this.ctxpop() ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.pflag = true ;\r\n        while (this.pflag & !this.eflag) {\r\n          this.ctxpush('PR') ;\r\n          this.rulePR() ;\r\n          this.ctxpop() ;\r\n          if (this.pflag) {\r\n            while (!this.eflag) {\r\n              break }\r\n          } ;\r\n          if ((!this.pflag) && (!this.eflag)) {\r\n            this.ctxpush('COMMENT') ;\r\n            this.ruleCOMMENT() ;\r\n            this.ctxpop() ;\r\n            if (this.pflag) {\r\n              while (!this.eflag) {\r\n                break }\r\n            } ;\r\n          } ;\r\n        } ;\r\n        this.pflag = !this.eflag ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.test('.TOKENS');\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.pflag = true ;\r\n        while (this.pflag & !this.eflag) {\r\n          this.ctxpush('TR') ;\r\n          this.ruleTR() ;\r\n          this.ctxpop() ;\r\n          if (this.pflag) {\r\n            while (!this.eflag) {\r\n              break }\r\n          } ;\r\n          if ((!this.pflag) && (!this.eflag)) {\r\n            this.ctxpush('COMMENT') ;\r\n            this.ruleCOMMENT() ;\r\n            this.ctxpop() ;\r\n            if (this.pflag) {\r\n              while (!this.eflag) {\r\n                break }\r\n            } ;\r\n          } ;\r\n        } ;\r\n        this.pflag = !this.eflag ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.test('.END');\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.ctxpush('POSTAMBLE') ;\r\n        this.rulePOSTAMBLE() ;\r\n        this.ctxpop() ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.stack[this.stackframe + 2] -= 2 ;\r\n        this.out('}') ;\r\n        this.eol() ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  // object definition preamble \r\n  rulePREAMBLE: function () {\r\n    this.out('compile: function (input) {') ;\r\n    this.stack[this.stackframe + 2] += 2 ;\r\n    this.eol() ;\r\n    if (true) {\r\n      while (!this.eflag) {\r\n        this.out('// initialize compiler variables') ;\r\n        this.eol() ;\r\n        this.out('this.inbuf = input ;') ;\r\n        this.eol() ;\r\n        this.out('this.initialize() ;') ;\r\n        this.eol() ;\r\n        this.out('// call the first rule') ;\r\n        this.eol() ;\r\n        this.out('this.ctxpush(') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(this.token) ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(') ;') ;\r\n        this.eol() ;\r\n        this.out('this.rule') ;\r\n        this.out(this.token) ;\r\n        this.out('() ;') ;\r\n        this.eol() ;\r\n        this.out('this.ctxpop() ;') ;\r\n        this.eol() ;\r\n        this.out('// special case handling of first rule failure') ;\r\n        this.eol() ;\r\n        this.out('if ((!this.eflag) && (!this.pflag)) {') ;\r\n        this.stack[this.stackframe + 2] += 2 ;\r\n        this.eol() ;\r\n        this.out('this.eflag = true ;') ;\r\n        this.eol() ;\r\n        this.out('this.erule = ') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(this.token) ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(' ;') ;\r\n        this.eol() ;\r\n        this.out('this.einput = this.inp ; } ;') ;\r\n        this.stack[this.stackframe + 2] -= 2 ;\r\n        this.eol() ;\r\n        this.out('return this.eflag ;') ;\r\n        this.eol() ;\r\n        this.stack[this.stackframe + 2] -= 2 ;\r\n        this.out('},') ;\r\n        this.eol() ;\r\n        this.eol() ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  // runtime and object definition postamble \r\n  rulePOSTAMBLE: function () {\r\n    this.out('// runtime variables') ;\r\n    this.eol() ;\r\n    if (true) {\r\n      while (!this.eflag) {\r\n        this.out('pflag: false ,') ;\r\n        this.eol() ;\r\n        this.out('tflag: false ,') ;\r\n        this.eol() ;\r\n        this.out('eflag: false ,') ;\r\n        this.eol() ;\r\n        this.out('inp: 0 ,') ;\r\n        this.eol() ;\r\n        this.out('inbuf:  ') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(' ,') ;\r\n        this.eol() ;\r\n        this.out('outbuf:  ') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(' ,') ;\r\n        this.eol() ;\r\n        this.out('erule:  ') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(' ,') ;\r\n        this.eol() ;\r\n        this.out('einput: 0 ,') ;\r\n        this.eol() ;\r\n        this.out('token: ') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(' ,') ;\r\n        this.eol() ;\r\n        this.out('labelcount: 0 ,') ;\r\n        this.eol() ;\r\n        this.out('stackframesize: 6 ,') ;\r\n        this.eol() ;\r\n        this.out('stackframe: 0 ,') ;\r\n        this.eol() ;\r\n        this.out('stos: -1 ,') ;\r\n        this.eol() ;\r\n        this.out('stack: [] ,') ;\r\n        this.eol() ;\r\n        this.eol() ;\r\n        this.out('initialize: function () {') ;\r\n        this.stack[this.stackframe + 2] += 2 ;\r\n        this.eol() ;\r\n        this.out('// initialize for another compile') ;\r\n        this.eol() ;\r\n        this.out('this.pflag = false ;') ;\r\n        this.eol() ;\r\n        this.out('this.tflag = false ;') ;\r\n        this.eol() ;\r\n        this.out('this.eflag = false ;') ;\r\n        this.eol() ;\r\n        this.out('this.inp = 0 ;') ;\r\n        this.eol() ;\r\n        this.out('this.outbuf = ') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(' ;') ;\r\n        this.eol() ;\r\n        this.out('this.erule = ') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(' ;') ;\r\n        this.eol() ;\r\n        this.out('this.einput = 0 ;') ;\r\n        this.eol() ;\r\n        this.out('this.token = ') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(' ;') ;\r\n        this.eol() ;\r\n        this.out('this.labelcount = 1 ;') ;\r\n        this.eol() ;\r\n        this.out('this.stackframe = -1 ;') ;\r\n        this.eol() ;\r\n        this.out('this.stos = -1 ;') ;\r\n        this.eol() ;\r\n        this.out('this.stack = [] ;') ;\r\n        this.eol() ;\r\n        this.stack[this.stackframe + 2] -= 2 ;\r\n        this.out('},') ;\r\n        this.eol() ;\r\n        this.eol() ;\r\n        this.out('ctxpush: function (rulename){') ;\r\n        this.stack[this.stackframe + 2] += 2 ;\r\n        this.eol() ;\r\n        this.out('// push and initialize a new stackframe') ;\r\n        this.eol() ;\r\n        this.out('var LM ;') ;\r\n        this.eol() ;\r\n        this.out('// new context inherits current context left margin') ;\r\n        this.eol() ;\r\n        this.out('LM = 0; if (this.stackframe >= 0) LM = this.stack[this.stackframe + 2] ;') ;\r\n        this.eol() ;\r\n        this.out('this.stos++ ;') ;\r\n        this.eol() ;\r\n        this.out('this.stackframe = this.stos * this.stackframesize ;') ;\r\n        this.eol() ;\r\n        this.out('// stackframe definition') ;\r\n        this.eol() ;\r\n        this.out('this.stack[this.stackframe + 0] = 0 ;        // generated label') ;\r\n        this.eol() ;\r\n        this.out('this.stack[this.stackframe + 1] = rulename ; // called rule name') ;\r\n        this.eol() ;\r\n        this.out('this.stack[this.stackframe + 2] = LM ;       // left margin') ;\r\n        this.eol() ;\r\n        this.out('// clear additional stackframe backtracking entries') ;\r\n        this.eol() ;\r\n        this.out('this.bkclear() ;') ;\r\n        this.eol() ;\r\n        this.stack[this.stackframe + 2] -= 2 ;\r\n        this.out('},') ;\r\n        this.eol() ;\r\n        this.eol() ;\r\n        this.out('ctxpop: function (){') ;\r\n        this.stack[this.stackframe + 2] += 2 ;\r\n        this.eol() ;\r\n        this.out('// pop and possibly deallocate old stackframe') ;\r\n        this.eol() ;\r\n        this.out('this.stos-- ; // pop stackframe') ;\r\n        this.eol() ;\r\n        this.out('this.stackframe = this.stos * this.stackframesize ;') ;\r\n        this.eol() ;\r\n        this.stack[this.stackframe + 2] -= 2 ;\r\n        this.out('},') ;\r\n        this.eol() ;\r\n        this.eol() ;\r\n        this.out('out: function (s){') ;\r\n        this.stack[this.stackframe + 2] += 2 ;\r\n        this.eol() ;\r\n        this.out('// output string') ;\r\n        this.eol() ;\r\n        this.out('var i ;') ;\r\n        this.eol() ;\r\n        this.out('// if newline last output, add left margin before string') ;\r\n        this.eol() ;\r\n        this.out('if (this.outbuf.charAt(this.outbuf.length - 1) == ') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(String.fromCharCode(92)) ;\r\n        this.out('n') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(') {') ;\r\n        this.eol() ;\r\n        this.out('  i = this.stack[this.stackframe + 2] ;') ;\r\n        this.eol() ;\r\n        this.out('  while (i>0) { this.outbuf += ') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(' ') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(' ; i-- } ; } ;') ;\r\n        this.eol() ;\r\n        this.out('this.outbuf += s ;') ;\r\n        this.eol() ;\r\n        this.stack[this.stackframe + 2] -= 2 ;\r\n        this.out('},') ;\r\n        this.eol() ;\r\n        this.eol() ;\r\n        this.out('eol: function (){') ;\r\n        this.stack[this.stackframe + 2] += 2 ;\r\n        this.eol() ;\r\n        this.out('// output end of line') ;\r\n        this.eol() ;\r\n        this.out('this.outbuf += ') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(String.fromCharCode(92)) ;\r\n        this.out('n') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(' ;') ;\r\n        this.eol() ;\r\n        this.stack[this.stackframe + 2] -= 2 ;\r\n        this.out('},') ;\r\n        this.eol() ;\r\n        this.eol() ;\r\n        this.out('test: function (s) {') ;\r\n        this.stack[this.stackframe + 2] += 2 ;\r\n        this.eol() ;\r\n        this.out('// test for a string in the input') ;\r\n        this.eol() ;\r\n        this.out('var i ;') ;\r\n        this.eol() ;\r\n        this.out('// delete whitespace') ;\r\n        this.eol() ;\r\n        this.out('while ((this.inbuf.charAt(this.inp) == ') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(' ') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(')  ||') ;\r\n        this.eol() ;\r\n        this.out('       (this.inbuf.charAt(this.inp) == ') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(String.fromCharCode(92)) ;\r\n        this.out('n') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(') ||') ;\r\n        this.eol() ;\r\n        this.out('       (this.inbuf.charAt(this.inp) == ') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(String.fromCharCode(92)) ;\r\n        this.out('r') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(') ||') ;\r\n        this.eol() ;\r\n        this.out('       (this.inbuf.charAt(this.inp) == ') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(String.fromCharCode(92)) ;\r\n        this.out('t') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(') ) this.inp++ ;') ;\r\n        this.eol() ;\r\n        this.out('// test string case insensitive') ;\r\n        this.eol() ;\r\n        this.out('this.pflag = true ; i = 0 ;') ;\r\n        this.eol() ;\r\n        this.out('while (this.pflag && (i < s.length) && ((this.inp+i) < this.inbuf.length) )') ;\r\n        this.eol() ;\r\n        this.out('{ this.pflag = (s.charAt(i).toUpperCase() ==') ;\r\n        this.eol() ;\r\n        this.out('                this.inbuf.charAt(this.inp+i).toUpperCase()) ;') ;\r\n        this.eol() ;\r\n        this.out('  i++ ; } ;') ;\r\n        this.eol() ;\r\n        this.out('this.pflag = this.pflag && (i == s.length) ;') ;\r\n        this.eol() ;\r\n        this.out('// advance input if found') ;\r\n        this.eol() ;\r\n        this.out('if (this.pflag) this.inp = this.inp + s.length ;') ;\r\n        this.eol() ;\r\n        this.stack[this.stackframe + 2] -= 2 ;\r\n        this.out('},') ;\r\n        this.eol() ;\r\n        this.eol() ;\r\n        this.out('bkerr: function () {') ;\r\n        this.stack[this.stackframe + 2] += 2 ;\r\n        this.eol() ;\r\n        this.out('// compilation error, provide error indication and context') ;\r\n        this.eol() ;\r\n        this.out('this.eflag = true ;') ;\r\n        this.eol() ;\r\n        this.out('this.erule = this.stack[this.stackframe + 1] ;') ;\r\n        this.eol() ;\r\n        this.out('this.einput = this.inp ;') ;\r\n        this.eol() ;\r\n        this.stack[this.stackframe + 2] -= 2 ;\r\n        this.out('},') ;\r\n        this.eol() ;\r\n        this.eol() ;\r\n        this.out('bkset: function () {') ;\r\n        this.stack[this.stackframe + 2] += 2 ;\r\n        this.eol() ;\r\n        this.out('// set backtrack context on stack') ;\r\n        this.eol() ;\r\n        this.out('this.stack[this.stackframe + 3] = this.inp ;           // input position') ;\r\n        this.eol() ;\r\n        this.out('this.stack[this.stackframe + 4] = this.outbuf.length ; // output position') ;\r\n        this.eol() ;\r\n        this.out('this.stack[this.stackframe + 5] = this.token ;         // current token') ;\r\n        this.eol() ;\r\n        this.stack[this.stackframe + 2] -= 2 ;\r\n        this.out('},') ;\r\n        this.eol() ;\r\n        this.eol() ;\r\n        this.out('bkclear: function () {') ;\r\n        this.stack[this.stackframe + 2] += 2 ;\r\n        this.eol() ;\r\n        this.out('// clear backtrack context on stack') ;\r\n        this.eol() ;\r\n        this.out('this.stack[this.stackframe + 3] = -1 ; // input position') ;\r\n        this.eol() ;\r\n        this.out('this.stack[this.stackframe + 4] = -1 ; // output position') ;\r\n        this.eol() ;\r\n        this.out('this.stack[this.stackframe + 5] = ') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(' ; // current token') ;\r\n        this.eol() ;\r\n        this.stack[this.stackframe + 2] -= 2 ;\r\n        this.out('},') ;\r\n        this.eol() ;\r\n        this.eol() ;\r\n        this.out('bkrestore: function () {') ;\r\n        this.stack[this.stackframe + 2] += 2 ;\r\n        this.eol() ;\r\n        this.out('// restore context for backtracking') ;\r\n        this.eol() ;\r\n        this.out('this.eflag = false ;') ;\r\n        this.eol() ;\r\n        this.out('this.inp = this.stack[this.stackframe + 3] ;           // input position') ;\r\n        this.eol() ;\r\n        this.out('this.outbuf = this.outbuf.substring(0,this.stack[this.stackframe + 4]) ; // output position') ;\r\n        this.eol() ;\r\n        this.out('this.token = this.stack[this.stackframe + 5] ;         // current token') ;\r\n        this.eol() ;\r\n        this.stack[this.stackframe + 2] -= 2 ;\r\n        this.out('}') ;\r\n        this.eol() ;\r\n        this.eol() ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  // parsing rule definition \r\n  rulePR: function () {\r\n    this.ctxpush('ID') ;\r\n    this.ruleID() ;\r\n    this.ctxpop() ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.out('rule') ;\r\n        this.out(this.token) ;\r\n        this.out(': function () {') ;\r\n        this.stack[this.stackframe + 2] += 2 ;\r\n        this.eol() ;\r\n        this.test('=');\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.ctxpush('EX1') ;\r\n        this.ruleEX1() ;\r\n        this.ctxpop() ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.test(';');\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.stack[this.stackframe + 2] -= 2 ;\r\n        this.out('} ,') ;\r\n        this.eol() ;\r\n        this.eol() ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  // token rule definition \r\n  ruleTR: function () {\r\n    this.ctxpush('ID') ;\r\n    this.ruleID() ;\r\n    this.ctxpop() ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.out('rule') ;\r\n        this.out(this.token) ;\r\n        this.out(': function () {') ;\r\n        this.stack[this.stackframe + 2] += 2 ;\r\n        this.eol() ;\r\n        this.test(':');\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.ctxpush('TX1') ;\r\n        this.ruleTX1() ;\r\n        this.ctxpop() ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.test(';');\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.stack[this.stackframe + 2] -= 2 ;\r\n        this.out('} ,') ;\r\n        this.eol() ;\r\n        this.eol() ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  // comment definition \r\n  ruleCOMMENT: function () {\r\n    this.test('[');\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.ctxpush('CMLINE') ;\r\n        this.ruleCMLINE() ;\r\n        this.ctxpop() ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.test(']');\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.out('//') ;\r\n        this.out(this.token) ;\r\n        this.eol() ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  // parsing expressions \r\n  ruleEX1: function () {\r\n    this.ctxpush('EX2') ;\r\n    this.ruleEX2() ;\r\n    this.ctxpop() ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.pflag = true ;\r\n        while (this.pflag & !this.eflag) {\r\n          this.test('/');\r\n          if (this.pflag) {\r\n            while (!this.eflag) {\r\n              this.out('if ((!this.pflag) && (!this.eflag)) {') ;\r\n              this.stack[this.stackframe + 2] += 2 ;\r\n              this.eol() ;\r\n              this.ctxpush('EX2') ;\r\n              this.ruleEX2() ;\r\n              this.ctxpop() ;\r\n              if (!this.pflag) this.bkerr();\r\n              if (this.eflag) break ;\r\n              this.stack[this.stackframe + 2] -= 2 ;\r\n              this.out('} ;') ;\r\n              this.eol() ;\r\n              break }\r\n          } ;\r\n        } ;\r\n        this.pflag = !this.eflag ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  ruleEX2: function () {\r\n    this.ctxpush('EX3') ;\r\n    this.ruleEX3() ;\r\n    this.ctxpop() ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.out('if (this.pflag) {') ;\r\n        this.stack[this.stackframe + 2] += 2 ;\r\n        this.eol() ;\r\n        break }\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.ctxpush('OUTPUT') ;\r\n      this.ruleOUTPUT() ;\r\n      this.ctxpop() ;\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('if (true) {') ;\r\n          this.stack[this.stackframe + 2] += 2 ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.out('while (!this.eflag) {') ;\r\n        this.stack[this.stackframe + 2] += 2 ;\r\n        this.eol() ;\r\n        this.pflag = true ;\r\n        while (this.pflag & !this.eflag) {\r\n          this.ctxpush('EX3') ;\r\n          this.ruleEX3() ;\r\n          this.ctxpop() ;\r\n          if (this.pflag) {\r\n            while (!this.eflag) {\r\n              this.out('if (!this.pflag) this.bkerr();') ;\r\n              this.eol() ;\r\n              this.out('if (this.eflag) break ;') ;\r\n              this.eol() ;\r\n              break }\r\n          } ;\r\n          if ((!this.pflag) && (!this.eflag)) {\r\n            this.ctxpush('OUTPUT') ;\r\n            this.ruleOUTPUT() ;\r\n            this.ctxpop() ;\r\n            if (this.pflag) {\r\n              while (!this.eflag) {\r\n                break }\r\n            } ;\r\n          } ;\r\n        } ;\r\n        this.pflag = !this.eflag ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.out('break }') ;\r\n        this.stack[this.stackframe + 2] -= 2 ;\r\n        this.eol() ;\r\n        this.stack[this.stackframe + 2] -= 2 ;\r\n        this.out('} ;') ;\r\n        this.eol() ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  ruleEX3: function () {\r\n    this.ctxpush('ID') ;\r\n    this.ruleID() ;\r\n    this.ctxpop() ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.out('this.ctxpush(') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(this.token) ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(') ;') ;\r\n        this.eol() ;\r\n        this.out('this.rule') ;\r\n        this.out(this.token) ;\r\n        this.out('() ;') ;\r\n        this.eol() ;\r\n        this.out('this.ctxpop() ;') ;\r\n        this.eol() ;\r\n        break }\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.ctxpush('STRING') ;\r\n      this.ruleSTRING() ;\r\n      this.ctxpop() ;\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('this.test(') ;\r\n          this.out(String.fromCharCode(39)) ;\r\n          this.out(this.token) ;\r\n          this.out(String.fromCharCode(39)) ;\r\n          this.out(');') ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('(');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.ctxpush('EX1') ;\r\n          this.ruleEX1() ;\r\n          this.ctxpop() ;\r\n          if (!this.pflag) this.bkerr();\r\n          if (this.eflag) break ;\r\n          this.test(')');\r\n          if (!this.pflag) this.bkerr();\r\n          if (this.eflag) break ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('.EMPTY');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('this.pflag = true ;') ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('.LITCHR');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('this.token = this.inbuf.charCodeAt(this.inp) ;') ;\r\n          this.eol() ;\r\n          this.out('this.inp++ ;') ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('.PASS');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('this.inp = 0 ;') ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('$');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('this.pflag = true ;') ;\r\n          this.eol() ;\r\n          this.out('while (this.pflag & !this.eflag) {') ;\r\n          this.stack[this.stackframe + 2] += 2 ;\r\n          this.eol() ;\r\n          this.ctxpush('EX3') ;\r\n          this.ruleEX3() ;\r\n          this.ctxpop() ;\r\n          if (!this.pflag) this.bkerr();\r\n          if (this.eflag) break ;\r\n          this.stack[this.stackframe + 2] -= 2 ;\r\n          this.out('} ;') ;\r\n          this.eol() ;\r\n          this.out('this.pflag = !this.eflag ;') ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('[');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('this.bkset() ;') ;\r\n          this.eol() ;\r\n          this.ctxpush('EX1') ;\r\n          this.ruleEX1() ;\r\n          this.ctxpop() ;\r\n          if (!this.pflag) this.bkerr();\r\n          if (this.eflag) break ;\r\n          this.pflag = true ;\r\n          while (this.pflag & !this.eflag) {\r\n            this.test('|');\r\n            if (this.pflag) {\r\n              while (!this.eflag) {\r\n                this.out('if (!this.pflag) {') ;\r\n                this.stack[this.stackframe + 2] += 2 ;\r\n                this.eol() ;\r\n                this.out('if (this.eflag) this.bkrestore() ;') ;\r\n                this.eol() ;\r\n                this.ctxpush('EX1') ;\r\n                this.ruleEX1() ;\r\n                this.ctxpop() ;\r\n                if (!this.pflag) this.bkerr();\r\n                if (this.eflag) break ;\r\n                this.stack[this.stackframe + 2] -= 2 ;\r\n                this.out('} ;') ;\r\n                this.eol() ;\r\n                break }\r\n            } ;\r\n          } ;\r\n          this.pflag = !this.eflag ;\r\n          if (!this.pflag) this.bkerr();\r\n          if (this.eflag) break ;\r\n          this.test(']');\r\n          if (!this.pflag) this.bkerr();\r\n          if (this.eflag) break ;\r\n          this.out('if (this.eflag) this.bkrestore() ;') ;\r\n          this.eol() ;\r\n          this.out('this.bkclear() ;') ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n  } ,\r\n\r\n  // output expressions \r\n  ruleOUTPUT: function () {\r\n    this.test('.OUT');\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.test('(');\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.pflag = true ;\r\n        while (this.pflag & !this.eflag) {\r\n          this.ctxpush('OUT1') ;\r\n          this.ruleOUT1() ;\r\n          this.ctxpop() ;\r\n        } ;\r\n        this.pflag = !this.eflag ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.test(')');\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  ruleOUT1: function () {\r\n    this.test('*');\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.out('this.out(this.token) ;') ;\r\n        this.eol() ;\r\n        break }\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.ctxpush('STRING') ;\r\n      this.ruleSTRING() ;\r\n      this.ctxpop() ;\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('this.out(') ;\r\n          this.out(String.fromCharCode(39)) ;\r\n          this.out(this.token) ;\r\n          this.out(String.fromCharCode(39)) ;\r\n          this.out(') ;') ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.ctxpush('NUMBER') ;\r\n      this.ruleNUMBER() ;\r\n      this.ctxpop() ;\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('this.out(String.fromCharCode(') ;\r\n          this.out(this.token) ;\r\n          this.out(')) ;') ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('#');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('if (this.stack[this.stackframe + 0] == 0) {') ;\r\n          this.stack[this.stackframe + 2] += 2 ;\r\n          this.eol() ;\r\n          this.out('this.stack[this.stackframe + 0] = this.labelcount ;') ;\r\n          this.eol() ;\r\n          this.out('this.labelcount++ ; } ;') ;\r\n          this.stack[this.stackframe + 2] -= 2 ;\r\n          this.eol() ;\r\n          this.out('this.out(this.stack[this.stackframe + 0]) ;') ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('.NL');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('this.eol() ;') ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('.LB');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('.TB');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('this.out(') ;\r\n          this.out(String.fromCharCode(39)) ;\r\n          this.out(String.fromCharCode(92)) ;\r\n          this.out('t') ;\r\n          this.out(String.fromCharCode(39)) ;\r\n          this.out(') ;') ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('.LM+');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('this.stack[this.stackframe + 2] += 2 ;') ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('.LM-');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('this.stack[this.stackframe + 2] -= 2 ;') ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n  } ,\r\n\r\n  // token expressions \r\n  ruleTX1: function () {\r\n    this.ctxpush('TX2') ;\r\n    this.ruleTX2() ;\r\n    this.ctxpop() ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.pflag = true ;\r\n        while (this.pflag & !this.eflag) {\r\n          this.test('/');\r\n          if (this.pflag) {\r\n            while (!this.eflag) {\r\n              this.out('if (!this.pflag) {') ;\r\n              this.stack[this.stackframe + 2] += 2 ;\r\n              this.eol() ;\r\n              this.ctxpush('TX2') ;\r\n              this.ruleTX2() ;\r\n              this.ctxpop() ;\r\n              if (!this.pflag) this.bkerr();\r\n              if (this.eflag) break ;\r\n              this.stack[this.stackframe + 2] -= 2 ;\r\n              this.out('} ;') ;\r\n              this.eol() ;\r\n              break }\r\n          } ;\r\n        } ;\r\n        this.pflag = !this.eflag ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  ruleTX2: function () {\r\n    this.ctxpush('TX3') ;\r\n    this.ruleTX3() ;\r\n    this.ctxpop() ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.out('if (this.pflag) {') ;\r\n        this.stack[this.stackframe + 2] += 2 ;\r\n        this.eol() ;\r\n        this.pflag = true ;\r\n        while (this.pflag & !this.eflag) {\r\n          this.ctxpush('TX3') ;\r\n          this.ruleTX3() ;\r\n          this.ctxpop() ;\r\n          if (this.pflag) {\r\n            while (!this.eflag) {\r\n              this.out('if (!this.pflag) return;') ;\r\n              this.eol() ;\r\n              break }\r\n          } ;\r\n        } ;\r\n        this.pflag = !this.eflag ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.stack[this.stackframe + 2] -= 2 ;\r\n        this.out('} ;') ;\r\n        this.eol() ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  ruleTX3: function () {\r\n    this.test('.TOKEN');\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.out('this.tflag = true ; ') ;\r\n        this.eol() ;\r\n        this.out('this.token = ') ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(String.fromCharCode(39)) ;\r\n        this.out(' ;') ;\r\n        this.eol() ;\r\n        break }\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('.DELTOK');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('this.tflag = false ;') ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('$');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('this.pflag = true ;') ;\r\n          this.eol() ;\r\n          this.out('while (this.pflag) {') ;\r\n          this.stack[this.stackframe + 2] += 2 ;\r\n          this.eol() ;\r\n          this.ctxpush('TX3') ;\r\n          this.ruleTX3() ;\r\n          this.ctxpop() ;\r\n          if (!this.pflag) this.bkerr();\r\n          if (this.eflag) break ;\r\n          this.stack[this.stackframe + 2] -= 2 ;\r\n          this.out('};') ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.out('this.pflag = true ;') ;\r\n        this.eol() ;\r\n        break }\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('.ANYBUT(');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.ctxpush('CX1') ;\r\n          this.ruleCX1() ;\r\n          this.ctxpop() ;\r\n          if (!this.pflag) this.bkerr();\r\n          if (this.eflag) break ;\r\n          this.test(')');\r\n          if (!this.pflag) this.bkerr();\r\n          if (this.eflag) break ;\r\n          this.out('this.pflag = !this.pflag ;') ;\r\n          this.eol() ;\r\n          this.out('if (this.pflag) {') ;\r\n          this.stack[this.stackframe + 2] += 2 ;\r\n          this.eol() ;\r\n          this.out('if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;') ;\r\n          this.eol() ;\r\n          this.out('this.inp++ } ;') ;\r\n          this.stack[this.stackframe + 2] -= 2 ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('.ANY(');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.ctxpush('CX1') ;\r\n          this.ruleCX1() ;\r\n          this.ctxpop() ;\r\n          if (!this.pflag) this.bkerr();\r\n          if (this.eflag) break ;\r\n          this.test(')');\r\n          if (!this.pflag) this.bkerr();\r\n          if (this.eflag) break ;\r\n          this.out('if (this.pflag) {') ;\r\n          this.stack[this.stackframe + 2] += 2 ;\r\n          this.eol() ;\r\n          this.out('if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;') ;\r\n          this.eol() ;\r\n          this.out('this.inp++ } ;') ;\r\n          this.stack[this.stackframe + 2] -= 2 ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.ctxpush('ID') ;\r\n      this.ruleID() ;\r\n      this.ctxpop() ;\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.out('this.ctxpush(') ;\r\n          this.out(String.fromCharCode(39)) ;\r\n          this.out(this.token) ;\r\n          this.out(String.fromCharCode(39)) ;\r\n          this.out(') ;') ;\r\n          this.eol() ;\r\n          this.out('this.rule') ;\r\n          this.out(this.token) ;\r\n          this.out('() ;') ;\r\n          this.eol() ;\r\n          this.out('this.ctxpop() ;') ;\r\n          this.eol() ;\r\n          this.out('if (this.eflag) return ;') ;\r\n          this.eol() ;\r\n          break }\r\n      } ;\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.test('(');\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.ctxpush('TX1') ;\r\n          this.ruleTX1() ;\r\n          this.ctxpop() ;\r\n          if (!this.pflag) this.bkerr();\r\n          if (this.eflag) break ;\r\n          this.test(')');\r\n          if (!this.pflag) this.bkerr();\r\n          if (this.eflag) break ;\r\n          break }\r\n      } ;\r\n    } ;\r\n  } ,\r\n\r\n  // character expressions \r\n  ruleCX1: function () {\r\n    this.out('this.pflag = ') ;\r\n    this.stack[this.stackframe + 2] += 2 ;\r\n    this.eol() ;\r\n    if (true) {\r\n      while (!this.eflag) {\r\n        this.ctxpush('CX2') ;\r\n        this.ruleCX2() ;\r\n        this.ctxpop() ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.pflag = true ;\r\n        while (this.pflag & !this.eflag) {\r\n          this.test('!');\r\n          if (this.pflag) {\r\n            while (!this.eflag) {\r\n              this.out(' ||') ;\r\n              this.eol() ;\r\n              this.ctxpush('CX2') ;\r\n              this.ruleCX2() ;\r\n              this.ctxpop() ;\r\n              if (!this.pflag) this.bkerr();\r\n              if (this.eflag) break ;\r\n              break }\r\n          } ;\r\n        } ;\r\n        this.pflag = !this.eflag ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        this.stack[this.stackframe + 2] -= 2 ;\r\n        this.out(' ;') ;\r\n        this.eol() ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  ruleCX2: function () {\r\n    this.ctxpush('CX3') ;\r\n    this.ruleCX3() ;\r\n    this.ctxpop() ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        this.test(':');\r\n        if (this.pflag) {\r\n          while (!this.eflag) {\r\n            this.out('((this.inbuf.charCodeAt(this.inp) >= ') ;\r\n            this.out(this.token) ;\r\n            this.out(') &&') ;\r\n            this.eol() ;\r\n            this.ctxpush('CX3') ;\r\n            this.ruleCX3() ;\r\n            this.ctxpop() ;\r\n            if (!this.pflag) this.bkerr();\r\n            if (this.eflag) break ;\r\n            this.out(' (this.inbuf.charCodeAt(this.inp) <= ') ;\r\n            this.out(this.token) ;\r\n            this.out(')  )') ;\r\n            break }\r\n        } ;\r\n        if ((!this.pflag) && (!this.eflag)) {\r\n          this.pflag = true ;\r\n          if (this.pflag) {\r\n            while (!this.eflag) {\r\n              this.out('(this.inbuf.charCodeAt(this.inp) == ') ;\r\n              this.out(this.token) ;\r\n              this.out(') ') ;\r\n              break }\r\n          } ;\r\n        } ;\r\n        if (!this.pflag) this.bkerr();\r\n        if (this.eflag) break ;\r\n        break }\r\n    } ;\r\n  } ,\r\n\r\n  ruleCX3: function () {\r\n    this.ctxpush('NUMBER') ;\r\n    this.ruleNUMBER() ;\r\n    this.ctxpop() ;\r\n    if (this.pflag) {\r\n      while (!this.eflag) {\r\n        break }\r\n    } ;\r\n    if ((!this.pflag) && (!this.eflag)) {\r\n      this.ctxpush('SQUOTE') ;\r\n      this.ruleSQUOTE() ;\r\n      this.ctxpop() ;\r\n      if (this.pflag) {\r\n        while (!this.eflag) {\r\n          this.token = this.inbuf.charCodeAt(this.inp) ;\r\n          this.inp++ ;\r\n          if (!this.pflag) this.bkerr();\r\n          if (this.eflag) break ;\r\n          break }\r\n      } ;\r\n    } ;\r\n  } ,\r\n\r\n  // token definitions \r\n  rulePREFIX: function () {\r\n    this.pflag = true ;\r\n    while (this.pflag) {\r\n      this.pflag = \r\n        (this.inbuf.charCodeAt(this.inp) == 32)  ||\r\n        (this.inbuf.charCodeAt(this.inp) == 9)  ||\r\n        (this.inbuf.charCodeAt(this.inp) == 13)  ||\r\n        (this.inbuf.charCodeAt(this.inp) == 10)  ;\r\n      if (this.pflag) {\r\n        if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n        this.inp++ } ;\r\n    };\r\n    this.pflag = true ;\r\n    if (this.pflag) {\r\n    } ;\r\n  } ,\r\n\r\n  ruleID: function () {\r\n    this.ctxpush('PREFIX') ;\r\n    this.rulePREFIX() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.tflag = true ; \r\n      this.token = '' ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.ctxpush('ALPHA') ;\r\n      this.ruleALPHA() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (!this.pflag) return;\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.ctxpush('ALPHA') ;\r\n        this.ruleALPHA() ;\r\n        this.ctxpop() ;\r\n        if (this.eflag) return ;\r\n        if (this.pflag) {\r\n        } ;\r\n        if (!this.pflag) {\r\n          this.ctxpush('DIGIT') ;\r\n          this.ruleDIGIT() ;\r\n          this.ctxpop() ;\r\n          if (this.eflag) return ;\r\n          if (this.pflag) {\r\n          } ;\r\n        } ;\r\n      };\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.tflag = false ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n    } ;\r\n  } ,\r\n\r\n  ruleNUMBER: function () {\r\n    this.ctxpush('PREFIX') ;\r\n    this.rulePREFIX() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.tflag = true ; \r\n      this.token = '' ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.ctxpush('DIGIT') ;\r\n      this.ruleDIGIT() ;\r\n      this.ctxpop() ;\r\n      if (this.eflag) return ;\r\n      if (!this.pflag) return;\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.ctxpush('DIGIT') ;\r\n        this.ruleDIGIT() ;\r\n        this.ctxpop() ;\r\n        if (this.eflag) return ;\r\n      };\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.tflag = false ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n    } ;\r\n  } ,\r\n\r\n  ruleSTRING: function () {\r\n    this.ctxpush('PREFIX') ;\r\n    this.rulePREFIX() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.pflag = \r\n        (this.inbuf.charCodeAt(this.inp) == 39)  ;\r\n      if (this.pflag) {\r\n        if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n        this.inp++ } ;\r\n      if (!this.pflag) return;\r\n      this.tflag = true ; \r\n      this.token = '' ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.pflag = \r\n          (this.inbuf.charCodeAt(this.inp) == 13)  ||\r\n          (this.inbuf.charCodeAt(this.inp) == 10)  ||\r\n          (this.inbuf.charCodeAt(this.inp) == 39)  ;\r\n        this.pflag = !this.pflag ;\r\n        if (this.pflag) {\r\n          if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n          this.inp++ } ;\r\n      };\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.tflag = false ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.pflag = \r\n        (this.inbuf.charCodeAt(this.inp) == 39)  ;\r\n      if (this.pflag) {\r\n        if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n        this.inp++ } ;\r\n      if (!this.pflag) return;\r\n    } ;\r\n  } ,\r\n\r\n  ruleALPHA: function () {\r\n    this.pflag = \r\n      ((this.inbuf.charCodeAt(this.inp) >= 65) &&\r\n       (this.inbuf.charCodeAt(this.inp) <= 90)  ) ||\r\n      ((this.inbuf.charCodeAt(this.inp) >= 97) &&\r\n       (this.inbuf.charCodeAt(this.inp) <= 122)  ) ;\r\n    if (this.pflag) {\r\n      if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n      this.inp++ } ;\r\n    if (this.pflag) {\r\n    } ;\r\n  } ,\r\n\r\n  ruleDIGIT: function () {\r\n    this.pflag = \r\n      ((this.inbuf.charCodeAt(this.inp) >= 48) &&\r\n       (this.inbuf.charCodeAt(this.inp) <= 57)  ) ;\r\n    if (this.pflag) {\r\n      if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n      this.inp++ } ;\r\n    if (this.pflag) {\r\n    } ;\r\n  } ,\r\n\r\n  ruleSQUOTE: function () {\r\n    this.ctxpush('PREFIX') ;\r\n    this.rulePREFIX() ;\r\n    this.ctxpop() ;\r\n    if (this.eflag) return ;\r\n    if (this.pflag) {\r\n      this.pflag = \r\n        (this.inbuf.charCodeAt(this.inp) == 39)  ;\r\n      if (this.pflag) {\r\n        if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n        this.inp++ } ;\r\n      if (!this.pflag) return;\r\n    } ;\r\n  } ,\r\n\r\n  ruleCMLINE: function () {\r\n    this.tflag = true ; \r\n    this.token = '' ;\r\n    this.pflag = true ;\r\n    if (this.pflag) {\r\n      this.pflag = true ;\r\n      while (this.pflag) {\r\n        this.pflag = \r\n          (this.inbuf.charCodeAt(this.inp) == 10)  ||\r\n          (this.inbuf.charCodeAt(this.inp) == 13)  ||\r\n          (this.inbuf.charCodeAt(this.inp) == 93)  ;\r\n        this.pflag = !this.pflag ;\r\n        if (this.pflag) {\r\n          if (this.tflag) this.token += this.inbuf.charAt(this.inp) ;\r\n          this.inp++ } ;\r\n      };\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n      this.tflag = false ;\r\n      this.pflag = true ;\r\n      if (!this.pflag) return;\r\n    } ;\r\n  } ,\r\n\r\n  // runtime variables\r\n  pflag: false ,\r\n  tflag: false ,\r\n  eflag: false ,\r\n  inp: 0 ,\r\n  inbuf:  '' ,\r\n  outbuf:  '' ,\r\n  erule:  '' ,\r\n  einput: 0 ,\r\n  token: '' ,\r\n  labelcount: 0 ,\r\n  stackframesize: 6 ,\r\n  stackframe: 0 ,\r\n  stos: -1 ,\r\n  stack: [] ,\r\n\r\n  initialize: function () {\r\n    // initialize for another compile\r\n    this.pflag = false ;\r\n    this.tflag = false ;\r\n    this.eflag = false ;\r\n    this.inp = 0 ;\r\n    this.outbuf = '' ;\r\n    this.erule = '' ;\r\n    this.einput = 0 ;\r\n    this.token = '' ;\r\n    this.labelcount = 1 ;\r\n    this.stackframe = -1 ;\r\n    this.stos = -1 ;\r\n    this.stack = [] ;\r\n  },\r\n\r\n  ctxpush: function (rulename){\r\n    // push and initialize a new stackframe\r\n    var LM ;\r\n    // new context inherits current context left margin\r\n    LM = 0; if (this.stackframe >= 0) LM = this.stack[this.stackframe + 2] ;\r\n    this.stos++ ;\r\n    this.stackframe = this.stos * this.stackframesize ;\r\n    // stackframe definition\r\n    this.stack[this.stackframe + 0] = 0 ;        // generated label\r\n    this.stack[this.stackframe + 1] = rulename ; // called rule name\r\n    this.stack[this.stackframe + 2] = LM ;       // left margin\r\n    // clear additional stackframe backtracking entries\r\n    this.bkclear() ;\r\n  },\r\n\r\n  ctxpop: function (){\r\n    // pop and possibly deallocate old stackframe\r\n    this.stos-- ; // pop stackframe\r\n    this.stackframe = this.stos * this.stackframesize ;\r\n  },\r\n\r\n  out: function (s){\r\n    // output string\r\n    var i ;\r\n    // if newline last output, add left margin before string\r\n    if (this.outbuf.charAt(this.outbuf.length - 1) == '\\n') {\r\n      i = this.stack[this.stackframe + 2] ;\r\n      while (i>0) { this.outbuf += ' ' ; i-- } ; } ;\r\n    this.outbuf += s ;\r\n  },\r\n\r\n  eol: function (){\r\n    // output end of line\r\n    this.outbuf += '\\n' ;\r\n  },\r\n\r\n  test: function (s) {\r\n    // test for a string in the input\r\n    var i ;\r\n    // delete whitespace\r\n    while ((this.inbuf.charAt(this.inp) == ' ')  ||\r\n           (this.inbuf.charAt(this.inp) == '\\n') ||\r\n           (this.inbuf.charAt(this.inp) == '\\r') ||\r\n           (this.inbuf.charAt(this.inp) == '\\t') ) this.inp++ ;\r\n    // test string case insensitive\r\n    this.pflag = true ; i = 0 ;\r\n    while (this.pflag && (i < s.length) && ((this.inp+i) < this.inbuf.length) )\r\n    { this.pflag = (s.charAt(i).toUpperCase() ==\r\n                    this.inbuf.charAt(this.inp+i).toUpperCase()) ;\r\n      i++ ; } ;\r\n    this.pflag = this.pflag && (i == s.length) ;\r\n    // advance input if found\r\n    if (this.pflag) this.inp = this.inp + s.length ;\r\n  },\r\n\r\n  bkerr: function () {\r\n    // compilation error, provide error indication and context\r\n    this.eflag = true ;\r\n    this.erule = this.stack[this.stackframe + 1] ;\r\n    this.einput = this.inp ;\r\n  },\r\n\r\n  bkset: function () {\r\n    // set backtrack context on stack\r\n    this.stack[this.stackframe + 3] = this.inp ;           // input position\r\n    this.stack[this.stackframe + 4] = this.outbuf.length ; // output position\r\n    this.stack[this.stackframe + 5] = this.token ;         // current token\r\n  },\r\n\r\n  bkclear: function () {\r\n    // clear backtrack context on stack\r\n    this.stack[this.stackframe + 3] = -1 ; // input position\r\n    this.stack[this.stackframe + 4] = -1 ; // output position\r\n    this.stack[this.stackframe + 5] = '' ; // current token\r\n  },\r\n\r\n  bkrestore: function () {\r\n    // restore context for backtracking\r\n    this.eflag = false ;\r\n    this.inp = this.stack[this.stackframe + 3] ;           // input position\r\n    this.outbuf = this.outbuf.substring(0,this.stack[this.stackframe + 4]) ; // output position\r\n    this.token = this.stack[this.stackframe + 5] ;         // current token\r\n  }\r\n\r\n}\r\n"
    },
    {
        "filename": "Code_clear.txt",
        "contents": ""
    },
];
